// File generated by ApiGen on 2013-12-17 15:11:15

namespace PxSharp {
    [System.Flags]
    public enum PxActorFlag : uint {
        eVISUALIZATION = unchecked((uint) ((1<<0))),
        eDISABLE_GRAVITY = unchecked((uint) ((1<<1))),
        eSEND_SLEEP_NOTIFIES = unchecked((uint) ((1<<2))),
        eDISABLE_SIMULATION = unchecked((uint) ((1<<3))),
    }
    public enum PxActorType : uint {
        eRIGID_STATIC,
        eRIGID_DYNAMIC,
        ePARTICLE_SYSTEM,
        ePARTICLE_FLUID,
        eARTICULATION_LINK,
        eCLOTH,
        eACTOR_COUNT,
        eACTOR_FORCE_DWORD = unchecked((uint) (0x7fffffff)),
    }
    public enum PxBatchQueryStatus : uint {
        ePENDING = unchecked((uint) (0)),
        eSUCCESS,
        eOVERFLOW,
    }
    public enum PxBroadPhaseType : uint {
        eSAP,
        eMBP,
        eLAST,
    }
    [System.Flags]
    public enum PxClientBehaviorFlag : uint {
        eREPORT_FOREIGN_OBJECTS_TO_TRIGGER_NOTIFY = unchecked((uint) ((1<<0))),
        eREPORT_FOREIGN_OBJECTS_TO_CONTACT_NOTIFY = unchecked((uint) ((1<<1))),
        eREPORT_FOREIGN_OBJECTS_TO_CONSTRAINT_BREAK_NOTIFY = unchecked((uint) ((1<<2))),
        eREPORT_FOREIGN_OBJECTS_TO_SCENE_QUERY = unchecked((uint) ((1<<3))),
    }
    [System.Flags]
    public enum PxActorClientBehaviorFlag : uint {
        eREPORT_TO_FOREIGN_CLIENTS_TRIGGER_NOTIFY = unchecked((uint) ((1<<0))),
        eREPORT_TO_FOREIGN_CLIENTS_CONTACT_NOTIFY = unchecked((uint) ((1<<1))),
        eREPORT_TO_FOREIGN_CLIENTS_CONSTRAINT_BREAK_NOTIFY = unchecked((uint) ((1<<2))),
        eREPORT_TO_FOREIGN_CLIENTS_SCENE_QUERY = unchecked((uint) ((1<<3))),
    }
    [System.Flags]
    public enum PxConstraintFlag : uint {
        eBROKEN = unchecked((uint) (1<<0)),
        ePROJECTION = unchecked((uint) (1<<1)),
        eCOLLISION_ENABLED = unchecked((uint) (1<<2)),
        eREPORTING = unchecked((uint) (1<<3)),
        eVISUALIZATION = unchecked((uint) (1<<4)),
        eDRIVE_LIMITS_ARE_FORCES = unchecked((uint) (1<<5)),
        eDEPRECATED_32_COMPATIBILITY = unchecked((uint) (1<<6)),
        eIMPROVED_SLERP = unchecked((uint) (1<<7)),
    }
    [System.Flags]
    public enum Px1DConstraintFlag : uint {
        eSPRING = unchecked((uint) (1<<0)),
        eACCELERATION_SPRING = unchecked((uint) (1<<1)),
        eRESTITUTION = unchecked((uint) (1<<2)),
        eKEEPBIAS = unchecked((uint) (1<<3)),
        eOUTPUT_FORCE = unchecked((uint) (1<<4)),
        eHAS_DRIVE_LIMIT = unchecked((uint) (1<<5)),
    }
    public enum PxConstraintSolveHint : uint {
        eNONE = unchecked((uint) (0)),
        eACCELERATION1 = unchecked((uint) (256)),
        eACCELERATION2 = unchecked((uint) (512)),
        eACCELERATION3 = unchecked((uint) (768)),
        eEQUALITY = unchecked((uint) (1024)),
        eINEQUALITY = unchecked((uint) (1025)),
    }
    [System.Flags]
    public enum PxConstraintVisualizationFlag : uint {
        eLOCAL_FRAMES = unchecked((uint) (1)),
        eLIMITS = unchecked((uint) (2)),
    }
    public enum PxPvdUpdateType : uint {
        CREATE_INSTANCE,
        RELEASE_INSTANCE,
        UPDATE_ALL_PROPERTIES,
        UPDATE_SIM_PROPERTIES,
    }
    [System.Flags]
    public enum PxDeletionEventFlag : uint {
        eUSER_RELEASE = unchecked((uint) ((1<<0))),
        eMEMORY_RELEASE = unchecked((uint) ((1<<1))),
    }
    [System.Flags]
    public enum PxPairFlag : uint {
        eSOLVE_CONTACT = unchecked((uint) ((1<<0))),
        eMODIFY_CONTACTS = unchecked((uint) ((1<<1))),
        eNOTIFY_TOUCH_FOUND = unchecked((uint) ((1<<2))),
        eNOTIFY_TOUCH_PERSISTS = unchecked((uint) ((1<<3))),
        eNOTIFY_TOUCH_LOST = unchecked((uint) ((1<<4))),
        eNOTIFY_THRESHOLD_FORCE_FOUND = unchecked((uint) ((1<<5))),
        eNOTIFY_THRESHOLD_FORCE_PERSISTS = unchecked((uint) ((1<<6))),
        eNOTIFY_THRESHOLD_FORCE_LOST = unchecked((uint) ((1<<7))),
        eNOTIFY_CONTACT_POINTS = unchecked((uint) ((1<<8))),
        eDETECT_DISCRETE_CONTACT = unchecked((uint) ((1<<9))),
        eDETECT_CCD_CONTACT = unchecked((uint) ((1<<10))),
        eRESOLVE_CONTACTS = unchecked((uint) (eSOLVE_CONTACT | eDETECT_DISCRETE_CONTACT)),
        eCCD_LINEAR = unchecked((uint) (eSOLVE_CONTACT | eDETECT_CCD_CONTACT)),
        eCONTACT_DEFAULT = unchecked((uint) (eSOLVE_CONTACT | eDETECT_DISCRETE_CONTACT)),
        eTRIGGER_DEFAULT = unchecked((uint) (eNOTIFY_TOUCH_FOUND | eNOTIFY_TOUCH_LOST)),
    }
    [System.Flags]
    public enum PxFilterFlag : uint {
        eKILL = unchecked((uint) ((1<<0))),
        eSUPPRESS = unchecked((uint) ((1<<1))),
        eCALLBACK = unchecked((uint) ((1<<2))),
        eNOTIFY = unchecked((uint) ((1<<3) | eCALLBACK)),
        eDEFAULT = unchecked((uint) (0)),
    }
    public enum PxFilterObjectType : uint {
        eRIGID_STATIC,
        eRIGID_DYNAMIC,
        ePARTICLE_SYSTEM,
        ePARTICLE_FLUID,
        eARTICULATION,
        eCLOTH,
        eMAX_TYPE_COUNT = unchecked((uint) (16)),
        eUNDEFINED = unchecked((uint) (eMAX_TYPE_COUNT-1)),
    }
    [System.Flags]
    public enum PxFilterObjectFlag : uint {
        eKINEMATIC = unchecked((uint) ((1<<4))),
        eTRIGGER = unchecked((uint) ((1<<5))),
    }
    public enum PxForceMode : uint {
        eFORCE,
        eIMPULSE,
        eVELOCITY_CHANGE,
        eACCELERATION,
    }
    [System.Flags]
    public enum PxDataAccessFlag : uint {
        eREADABLE = unchecked((uint) ((1 << 0))),
        eWRITABLE = unchecked((uint) ((1 << 1))),
        eDEVICE = unchecked((uint) ((1 << 2))),
    }
    [System.Flags]
    public enum PxMaterialFlag : uint {
        eDISABLE_FRICTION = unchecked((uint) (1 << 0)),
        eDISABLE_STRONG_FRICTION = unchecked((uint) (1 << 1)),
    }
    public enum PxCombineMode : uint {
        eAVERAGE = unchecked((uint) (0)),
        eMIN = unchecked((uint) (1)),
        eMULTIPLY = unchecked((uint) (2)),
        eMAX = unchecked((uint) (3)),
        eN_VALUES = unchecked((uint) (4)),
        ePAD_32 = unchecked((uint) (0x7fffffff)),
    }
    public enum PxCookingValue : uint {
        eCONVEX_VERSION_PC,
        eMESH_VERSION_PC,
        eCONVEX_VERSION_XENON,
        eMESH_VERSION_XENON,
        eCONVEX_VERSION_PLAYSTATION3,
        eMESH_VERSION_PLAYSTATION3,
    }
    [System.Flags]
    public enum PxQueryFlag : uint {
        eSTATIC = unchecked((uint) ((1<<0))),
        eDYNAMIC = unchecked((uint) ((1<<1))),
        ePREFILTER = unchecked((uint) ((1<<2))),
        ePOSTFILTER = unchecked((uint) ((1<<3))),
        eANY_HIT = unchecked((uint) ((1<<4))),
        eNO_BLOCK = unchecked((uint) ((1<<5))),
        eRESERVED = unchecked((uint) ((1<<15))),
    }
    public enum PxQueryHitType : uint {
        eNONE = unchecked((uint) (0)),
        eTOUCH = unchecked((uint) (1)),
        eBLOCK = unchecked((uint) (2)),
    }
    [System.Flags]
    public enum PxHitFlag : uint {
        ePOSITION = unchecked((uint) ((1<<0))),
        eIMPACT = unchecked((uint) (ePOSITION)),
        eNORMAL = unchecked((uint) ((1<<1))),
        eDISTANCE = unchecked((uint) ((1<<2))),
        eUV = unchecked((uint) ((1<<3))),
        eASSUME_NO_INITIAL_OVERLAP = unchecked((uint) ((1<<4))),
        eMESH_MULTIPLE = unchecked((uint) ((1<<5))),
        eMESH_ANY = unchecked((uint) ((1<<6))),
        eMESH_BOTH_SIDES = unchecked((uint) ((1<<7))),
        ePRECISE_SWEEP = unchecked((uint) ((1<<8))),
        eDIRECT_SWEEP = unchecked((uint) (ePRECISE_SWEEP)),
        eDEFAULT = unchecked((uint) (ePOSITION|eNORMAL|eDISTANCE)),
        eMODIFIABLE_FLAGS = unchecked((uint) (eMESH_MULTIPLE|eMESH_BOTH_SIDES|eASSUME_NO_INITIAL_OVERLAP|ePRECISE_SWEEP)),
    }
    [System.Flags]
    public enum PxRigidBodyFlag : uint {
        eKINEMATIC = unchecked((uint) ((1<<0))),
        eUSE_KINEMATIC_TARGET_FOR_SCENE_QUERIES = unchecked((uint) ((1<<1))),
        eENABLE_CCD = unchecked((uint) ((1<<2))),
        eENABLE_CCD_FRICTION = unchecked((uint) ((1<<3))),
    }
    [System.Flags]
    public enum PxActorTypeFlag : uint {
        eRIGID_STATIC = unchecked((uint) ((1 << 0))),
        eRIGID_DYNAMIC = unchecked((uint) ((1 << 1))),
        ePARTICLE_SYSTEM = unchecked((uint) ((1 << 2))),
        ePARTICLE_FLUID = unchecked((uint) ((1 << 3))),
        eCLOTH = unchecked((uint) ((1 << 5))),
    }
    public enum PxPruningStructure : uint {
        eNONE,
        eDYNAMIC_AABB_TREE,
        eSTATIC_AABB_TREE,
        eLAST,
    }
    public enum PxSimulationOrder : uint {
        eCOLLIDE_SOLVE,
        eSOLVE_COLLIDE,
    }
    public enum PxFrictionType : uint {
        ePATCH,
        eONE_DIRECTIONAL,
        eTWO_DIRECTIONAL,
        eLEGACY_PATCH,
    }
    [System.Flags]
    public enum PxSceneFlag : uint {
        eENABLE_ACTIVETRANSFORMS = unchecked((uint) ((1<<1))),
        eENABLE_CCD = unchecked((uint) ((1<<2))),
        eDISABLE_CCD_RESWEEP = unchecked((uint) ((1<<3))),
        eADAPTIVE_FORCE = unchecked((uint) ((1<<4))),
        eENABLE_KINEMATIC_STATIC_PAIRS = unchecked((uint) ((1<<5))),
        eENABLE_KINEMATIC_PAIRS = unchecked((uint) ((1<<6))),
        eENABLE_PCM = unchecked((uint) ((1 << 9))),
        eDISABLE_CONTACT_REPORT_BUFFER_RESIZE = unchecked((uint) ((1 << 10))),
        eDISABLE_CONTACT_CACHE = unchecked((uint) ((1 << 11))),
        eREQUIRE_RW_LOCK = unchecked((uint) ((1 << 12))),
    }
    [System.Flags]
    public enum PxShapeFlag : uint {
        eSIMULATION_SHAPE = unchecked((uint) ((1<<0))),
        eSCENE_QUERY_SHAPE = unchecked((uint) ((1<<1))),
        eTRIGGER_SHAPE = unchecked((uint) ((1<<2))),
        eVISUALIZATION = unchecked((uint) ((1<<3))),
        ePARTICLE_DRAIN = unchecked((uint) ((1<<4))),
    }
    [System.Flags]
    public enum PxContactPairHeaderFlag : uint {
        eDELETED_ACTOR_0 = unchecked((uint) ((1<<0))),
        eDELETED_ACTOR_1 = unchecked((uint) ((1<<1))),
    }
    [System.Flags]
    public enum PxContactPairFlag : uint {
        eDELETED_SHAPE_0 = unchecked((uint) ((1<<0))),
        eDELETED_SHAPE_1 = unchecked((uint) ((1<<1))),
        eACTOR_PAIR_HAS_FIRST_TOUCH = unchecked((uint) ((1<<2))),
        eACTOR_PAIR_LOST_TOUCH = unchecked((uint) ((1<<3))),
        eINTERNAL_HAS_FACE_INDICES = unchecked((uint) ((1<<4))),
        eINTERNAL_HAS_IMPULSES = unchecked((uint) ((1<<5))),
        eINTERNAL_CONTACTS_ARE_FLIPPED = unchecked((uint) ((1<<6))),
    }
    [System.Flags]
    public enum PxTriggerPairFlag : uint {
        eDELETED_SHAPE_TRIGGER = unchecked((uint) ((1<<0))),
        eDELETED_SHAPE_OTHER = unchecked((uint) ((1<<1))),
    }
    public enum PxVisualizationParameter : uint {
        eSCALE,
        eWORLD_AXES,
        eBODY_AXES,
        eBODY_MASS_AXES,
        eBODY_LIN_VELOCITY,
        eBODY_ANG_VELOCITY,
        eBODY_JOINT_GROUPS,
        eCONTACT_POINT,
        eCONTACT_NORMAL,
        eCONTACT_ERROR,
        eCONTACT_FORCE,
        eACTOR_AXES,
        eCOLLISION_AABBS,
        eCOLLISION_SHAPES,
        eCOLLISION_AXES,
        eCOLLISION_COMPOUNDS,
        eCOLLISION_FNORMALS,
        eCOLLISION_EDGES,
        eCOLLISION_STATIC,
        eCOLLISION_DYNAMIC,
        eCOLLISION_PAIRS,
        eJOINT_LOCAL_FRAMES,
        eJOINT_LIMITS,
        ePARTICLE_SYSTEM_POSITION,
        ePARTICLE_SYSTEM_VELOCITY,
        ePARTICLE_SYSTEM_COLLISION_NORMAL,
        ePARTICLE_SYSTEM_BOUNDS,
        ePARTICLE_SYSTEM_GRID,
        ePARTICLE_SYSTEM_BROADPHASE_BOUNDS,
        ePARTICLE_SYSTEM_MAX_MOTION_DISTANCE,
        eCULL_BOX,
        eCLOTH_VERTICAL,
        eCLOTH_HORIZONTAL,
        eCLOTH_BENDING,
        eCLOTH_SHEARING,
        eCLOTH_VIRTUAL_PARTICLES,
        eMBP_REGIONS,
        eNUM_VALUES,
        eFORCE_DWORD = unchecked((uint) (0x7fffffff)),
    }
    public enum PxCapsuleClimbingMode : uint {
        eEASY,
        eCONSTRAINED,
        eLAST,
    }
    public enum PxControllerShapeType : uint {
        eBOX,
        eCAPSULE,
        eFORCE_DWORD = unchecked((uint) (0x7fffffff)),
    }
    public enum PxControllerNonWalkableMode : uint {
        ePREVENT_CLIMBING,
        ePREVENT_CLIMBING_AND_FORCE_SLIDING,
        eFORCE_SLIDING = unchecked((uint) (ePREVENT_CLIMBING_AND_FORCE_SLIDING)),
    }
    [System.Flags]
    public enum PxControllerCollisionFlag : uint {
        eCOLLISION_SIDES = unchecked((uint) ((1<<0))),
        eCOLLISION_UP = unchecked((uint) ((1<<1))),
        eCOLLISION_DOWN = unchecked((uint) ((1<<2))),
    }
    [System.Flags]
    public enum PxControllerBehaviorFlag : uint {
        eCCT_CAN_RIDE_ON_OBJECT = unchecked((uint) ((1<<0))),
        eCCT_SLIDE = unchecked((uint) ((1<<1))),
        eCCT_USER_DEFINED_RIDE = unchecked((uint) ((1<<2))),
    }
    [System.Flags]
    public enum PxControllerDebugRenderFlag : uint {
        eTEMPORAL_BV = unchecked((uint) ((1<<0))),
        eCACHED_BV = unchecked((uint) ((1<<1))),
        eOBSTACLES = unchecked((uint) ((1<<2))),
        eNONE = unchecked((uint) (0)),
        eALL = unchecked((uint) (0xffffffff)),
    }
    public enum PxClothFabricPhaseType : uint {
        eINVALID,
        eVERTICAL,
        eHORIZONTAL,
        eBENDING,
        eSHEARING,
        eCOUNT,
    }
    [System.Flags]
    public enum PxClothFlag : uint {
        eGPU = unchecked((uint) ((1<<0))),
        eSWEPT_CONTACT = unchecked((uint) ((1<<1))),
        eSCENE_COLLISION = unchecked((uint) ((1<<2))),
        eCOUNT = unchecked((uint) (3)),
    }
    [System.Flags]
    public enum PxBaseFlag : uint {
        eOWNS_MEMORY = unchecked((uint) ((1<<0))),
        eIS_RELEASABLE = unchecked((uint) ((1<<1))),
    }
    [System.Flags]
    public enum PxMetaDataFlag : uint {
        eCLASS = unchecked((uint) ((1<<0))),
        eVIRTUAL = unchecked((uint) ((1<<1))),
        eTYPEDEF = unchecked((uint) ((1<<2))),
        ePTR = unchecked((uint) ((1<<3))),
        eEXTRA_DATA = unchecked((uint) ((1<<4))),
        eEXTRA_ITEM = unchecked((uint) ((1<<5))),
        eEXTRA_ITEMS = unchecked((uint) ((1<<6))),
        eEXTRA_NAME = unchecked((uint) ((1<<7))),
        eUNION = unchecked((uint) ((1<<8))),
        ePADDING = unchecked((uint) ((1<<9))),
        eALIGNMENT = unchecked((uint) ((1<<10))),
        eCOUNT_MASK_MSB = unchecked((uint) ((1<<11))),
        eCOUNT_SKIP_IF_ONE = unchecked((uint) ((1<<12))),
        eCONTROL_FLIP = unchecked((uint) ((1<<13))),
        eCONTROL_MASK = unchecked((uint) ((1<<14))),
        eCONTROL_MASK_RANGE = unchecked((uint) (0x000000FF)),
        eFORCE_DWORD = unchecked((uint) (0x7fffffff)),
    }
    public enum PxDebugColor : uint {
        eARGB_BLACK = unchecked((uint) (0xff000000)),
        eARGB_RED = unchecked((uint) (0xffff0000)),
        eARGB_GREEN = unchecked((uint) (0xff00ff00)),
        eARGB_BLUE = unchecked((uint) (0xff0000ff)),
        eARGB_YELLOW = unchecked((uint) (0xffffff00)),
        eARGB_MAGENTA = unchecked((uint) (0xffff00ff)),
        eARGB_CYAN = unchecked((uint) (0xff00ffff)),
        eARGB_WHITE = unchecked((uint) (0xffffffff)),
        eARGB_GREY = unchecked((uint) (0xff808080)),
        eARGB_DARKRED = unchecked((uint) (0x88880000)),
        eARGB_DARKGREEN = unchecked((uint) (0x88008800)),
        eARGB_DARKBLUE = unchecked((uint) (0x88000088)),
    }
    public enum PxConcreteType : uint {
        eUNDEFINED,
        eHEIGHTFIELD,
        eCONVEX_MESH,
        eTRIANGLE_MESH,
        eCLOTH_FABRIC,
        eRIGID_DYNAMIC,
        eRIGID_STATIC,
        eSHAPE,
        eMATERIAL,
        eCONSTRAINT,
        eCLOTH,
        ePARTICLE_SYSTEM,
        ePARTICLE_FLUID,
        eAGGREGATE,
        eARTICULATION,
        eARTICULATION_LINK,
        eARTICULATION_JOINT,
        ePHYSX_CORE_COUNT,
        eFIRST_PHYSX_EXTENSION = unchecked((uint) (256)),
        eFIRST_VEHICLE_EXTENSION = unchecked((uint) (512)),
        eFIRST_USER_EXTENSION = unchecked((uint) (1024)),
    }
    [System.Flags]
    public enum PxConvexFlag : uint {
        eFLIPNORMALS = unchecked((uint) ((1<<0))),
        e16_BIT_INDICES = unchecked((uint) ((1<<1))),
        eCOMPUTE_CONVEX = unchecked((uint) ((1<<2))),
        eINFLATE_CONVEX = unchecked((uint) ((1<<3))),
    }
    public enum PxPlatform : uint {
        ePC,
        eXENON,
        ePLAYSTATION3,
        eARM,
        eWIIU,
    }
    [System.Flags]
    public enum PxMeshPreprocessingFlag : uint {
        eWELD_VERTICES = unchecked((uint) (1 << 0)),
        eREMOVE_UNREFERENCED_VERTICES = unchecked((uint) (1 << 1)),
        eREMOVE_DUPLICATED_TRIANGLES = unchecked((uint) (1 << 2)),
    }
    public enum PxConverterReportMode : uint {
        eNONE,
        eNORMAL,
        eVERBOSE,
    }
    public enum PxConstraintExtIDs : uint {
        eJOINT,
        eVEHICLE_SUSP_LIMIT,
        eVEHICLE_STICKY_TYRE,
        eNEXT_FREE_ID,
        eINVALID_ID = unchecked((uint) (0x7fffffff)),
    }
    public enum PxD6Axis : uint {
        eX = unchecked((uint) (0)),
        eY = unchecked((uint) (1)),
        eZ = unchecked((uint) (2)),
        eTWIST = unchecked((uint) (3)),
        eSWING1 = unchecked((uint) (4)),
        eSWING2 = unchecked((uint) (5)),
        eCOUNT = unchecked((uint) (6)),
    }
    public enum PxD6Motion : uint {
        eLOCKED,
        eLIMITED,
        eFREE,
    }
    public enum PxD6Drive : uint {
        eX = unchecked((uint) (0)),
        eY = unchecked((uint) (1)),
        eZ = unchecked((uint) (2)),
        eSWING = unchecked((uint) (3)),
        eTWIST = unchecked((uint) (4)),
        eSLERP = unchecked((uint) (5)),
        eCOUNT = unchecked((uint) (6)),
    }
    [System.Flags]
    public enum PxD6JointDriveFlag : uint {
        eACCELERATION = unchecked((uint) (1)),
    }
    public enum PxFilterOp : uint {
        PX_FILTEROP_AND,
        PX_FILTEROP_OR,
        PX_FILTEROP_XOR,
        PX_FILTEROP_NAND,
        PX_FILTEROP_NOR,
        PX_FILTEROP_NXOR,
        PX_FILTEROP_SWAP_AND,
    }
    [System.Flags]
    public enum PxDistanceJointFlag : uint {
        eMAX_DISTANCE_ENABLED = unchecked((uint) (1<<1)),
        eMIN_DISTANCE_ENABLED = unchecked((uint) (1<<2)),
        eSPRING_ENABLED = unchecked((uint) (1<<3)),
    }
    public enum PxJointConcreteType : uint {
        eSPHERICAL = unchecked((uint) (PxConcreteType.eFIRST_PHYSX_EXTENSION)),
        eREVOLUTE,
        ePRISMATIC,
        eFIXED,
        eDISTANCE,
        eD6,
        eLast,
    }
    public enum PxJointActorIndex : uint {
        eACTOR0,
        eACTOR1,
        COUNT,
    }
    [System.Flags]
    public enum PxPrismaticJointFlag : uint {
        eLIMIT_ENABLED = unchecked((uint) (1<<1)),
    }
    [System.Flags]
    public enum PxRevoluteJointFlag : uint {
        eLIMIT_ENABLED = unchecked((uint) (1<<0)),
        eDRIVE_ENABLED = unchecked((uint) (1<<1)),
        eDRIVE_FREESPIN = unchecked((uint) (1<<2)),
    }
    [System.Flags]
    public enum PxSphericalJointFlag : uint {
        eLIMIT_ENABLED = unchecked((uint) (1<<1)),
    }
    [System.Flags]
    public enum PxVisualDebuggerConnectionFlag : uint {
        eDEBUG = unchecked((uint) (1 << 0)),
        ePROFILE = unchecked((uint) (1 << 1)),
        eMEMORY = unchecked((uint) (1 << 2)),
    }
    public enum PxErrorCode : uint {
        eNO_ERROR = unchecked((uint) (0)),
        eDEBUG_INFO = unchecked((uint) (1)),
        eDEBUG_WARNING = unchecked((uint) (2)),
        eINVALID_PARAMETER = unchecked((uint) (4)),
        eINVALID_OPERATION = unchecked((uint) (8)),
        eOUT_OF_MEMORY = unchecked((uint) (16)),
        eINTERNAL_ERROR = unchecked((uint) (32)),
        eABORT = unchecked((uint) (64)),
        ePERF_WARNING = unchecked((uint) (128)),
        eMASK_ALL = unchecked((uint) (-1)),
    }
    public enum PxGeometryType : uint {
        eSPHERE,
        ePLANE,
        eCAPSULE,
        eBOX,
        eCONVEXMESH,
        eTRIANGLEMESH,
        eHEIGHTFIELD,
        eGEOMETRY_COUNT,
        eINVALID = unchecked((uint) (-1)),
    }
    public enum PxHeightFieldFormat : uint {
        eS16_TM = unchecked((uint) ((1 << 0))),
    }
    [System.Flags]
    public enum PxHeightFieldTessFlag : uint {
        e0TH_VERTEX_SHARED = unchecked((uint) ((1 << 0))),
    }
    [System.Flags]
    public enum PxHeightFieldFlag : uint {
        eNO_BOUNDARY_EDGES = unchecked((uint) ((1 << 0))),
    }
    public enum PxHeightFieldMaterial : uint {
        eHOLE = unchecked((uint) (127)),
    }
    [System.Flags]
    public enum PxMeshFlag : uint {
        eFLIPNORMALS = unchecked((uint) ((1<<0))),
        e16_BIT_INDICES = unchecked((uint) ((1<<1))),
    }
    [System.Flags]
    public enum PxTriangleMeshFlag : uint {
        eHAS_16BIT_TRIANGLE_INDICES = unchecked((uint) ((1<<1))),
        eHAS_ADJACENCY_INFO = unchecked((uint) ((1<<2))),
    }
    [System.Flags]
    public enum PxMeshGeometryFlag : uint {
        eDOUBLE_SIDED = unchecked((uint) ((1<<1))),
    }
    [System.Flags]
    public enum PxParticleBaseFlag : uint {
        eCOLLISION_TWOWAY = unchecked((uint) ((1<<0))),
        eCOLLISION_WITH_DYNAMIC_ACTORS = unchecked((uint) ((1<<1))),
        eENABLED = unchecked((uint) ((1<<2))),
        ePROJECT_TO_PLANE = unchecked((uint) ((1<<3))),
        ePER_PARTICLE_REST_OFFSET = unchecked((uint) ((1<<4))),
        ePER_PARTICLE_COLLISION_CACHE_HINT = unchecked((uint) ((1<<5))),
        eGPU = unchecked((uint) ((1<<6))),
    }
    [System.Flags]
    public enum PxParticleFlag : uint {
        eVALID = unchecked((uint) ((1<<0))),
        eCOLLISION_WITH_STATIC = unchecked((uint) ((1<<1))),
        eCOLLISION_WITH_DYNAMIC = unchecked((uint) ((1<<2))),
        eCOLLISION_WITH_DRAIN = unchecked((uint) ((1<<3))),
        eSPATIAL_DATA_STRUCTURE_OVERFLOW = unchecked((uint) ((1<<4))),
    }
    [System.Flags]
    public enum PxParticleReadDataFlag : uint {
        ePOSITION_BUFFER = unchecked((uint) ((1<<0))),
        eVELOCITY_BUFFER = unchecked((uint) ((1<<1))),
        eREST_OFFSET_BUFFER = unchecked((uint) ((1<<2))),
        eFLAGS_BUFFER = unchecked((uint) ((1<<3))),
        eCOLLISION_NORMAL_BUFFER = unchecked((uint) ((1<<4))),
        eDENSITY_BUFFER = unchecked((uint) ((1<<5))),
    }
    public enum EventPriorities : uint {
        None,
        Coarse,
        Medium,
        Detail,
        Never,
    }
    public enum EventTypes : uint {
        Unknown = unchecked((uint) (0)),
        StartEvent,
        StopEvent,
        RelativeStartEvent,
        RelativeStopEvent,
        EventValue,
        CUDAProfileBuffer,
    }
    [System.Flags]
    public enum EventStreamCompressionFlags : uint {
        U8 = unchecked((uint) (0)),
        U16 = unchecked((uint) (1)),
        U32 = unchecked((uint) (2)),
        U64 = unchecked((uint) (3)),
        CompressionMask = unchecked((uint) (3)),
    }
    public enum PxProfileMemoryEventType : uint {
        Unknown = unchecked((uint) (0)),
        Allocation,
        Deallocation,
    }
    public enum PvdConnectionType : uint {
        eDEBUG = unchecked((uint) (1 << 0)),
        ePROFILE = unchecked((uint) (1 << 1)),
        eMEMORY = unchecked((uint) (1 << 2)),
    }
    public enum PvdConnectionState : uint {
        eIDLE = unchecked((uint) (0)),
        eRECORDINGORVIEWING,
        ePAUSED,
        RecordingOrViewing,
        Paused,
    }
    public enum PvdErrorType : uint {
        Success = unchecked((uint) (0)),
        NetworkError,
        ArgumentError,
        InternalProblem,
    }
    public enum PvdBaseType : uint {
        None = unchecked((uint) (0)),
        InternalStart = unchecked((uint) (1)),
        InternalStop = unchecked((uint) (64)),
        Last,
    }
    public enum PropertyType : uint {
        Unknown = unchecked((uint) (0)),
        Scalar,
        Array,
    }
    public enum PtrOffsetType : uint {
        UnknownOffset,
        VoidPtrOffset,
        StringOffset,
    }
    [System.Flags]
    public enum PxVisualDebuggerFlag : uint {
        eTRANSMIT_CONTACTS = unchecked((uint) ((1 << 0))),
        eTRANSMIT_SCENEQUERIES = unchecked((uint) ((1 << 1))),
        eTRANSMIT_CONSTRAINTS = unchecked((uint) ((1 << 2))),
    }
    public enum PxCudaInteropMode : uint {
        NO_INTEROP = unchecked((uint) (0)),
        D3D9_INTEROP,
        D3D10_INTEROP,
        D3D11_INTEROP,
        OGL_INTEROP,
        COUNT,
    }
    public enum PxAllocId : uint {
        UNASSIGNED,
        APEX,
        PARTICLES,
        GPU_UTIL,
        CLOTH,
        NUM_IDS,
    }
    public enum PxCudaBufferMemorySpace : uint {
        T_GPU,
        T_PINNED_HOST,
        T_WRITE_COMBINED,
        T_HOST,
        COUNT,
    }
    [System.Flags]
    public enum PxCudaBufferFlags : uint {
        F_READ = unchecked((uint) ((1 << 0))),
        F_WRITE = unchecked((uint) ((1 << 1))),
        F_READ_WRITE = unchecked((uint) (F_READ | F_WRITE)),
    }
    public enum PxGpuTaskHint : uint {
        HostToDevice,
        Kernel,
        DeviceToHost,
        NUM_GPU_TASK_HINTS,
    }
    public enum PxTaskType : uint {
        TT_CPU,
        TT_GPU,
        TT_NOT_PRESENT,
        TT_COMPLETED,
    }
    public enum PxVehicleClutchAccuracyMode : uint {
        eESTIMATE = unchecked((uint) (0)),
        eBEST_POSSIBLE,
    }
    public enum PxVehicleDrive4WWheelOrder : uint {
        eFRONT_LEFT = unchecked((uint) (0)),
        eFRONT_RIGHT,
        eREAR_LEFT,
        eREAR_RIGHT,
    }
    public enum PxVehicleDrive4WControl : uint {
        eANALOG_INPUT_ACCEL = unchecked((uint) (0)),
        eANALOG_INPUT_BRAKE,
        eANALOG_INPUT_HANDBRAKE,
        eANALOG_INPUT_STEER_LEFT,
        eANALOG_INPUT_STEER_RIGHT,
        eMAX_NB_DRIVE4W_ANALOG_INPUTS,
    }
    public enum PxVehicleDriveNWControl : uint {
        eANALOG_INPUT_ACCEL = unchecked((uint) (0)),
        eANALOG_INPUT_BRAKE,
        eANALOG_INPUT_HANDBRAKE,
        eANALOG_INPUT_STEER_LEFT,
        eANALOG_INPUT_STEER_RIGHT,
        eMAX_NB_DRIVENW_ANALOG_INPUTS,
    }
    public enum PxVehicleDriveTankWheelOrder : uint {
        eFRONT_LEFT = unchecked((uint) (0)),
        eFRONT_RIGHT,
        e1ST_FROM_FRONT_LEFT,
        e1ST_FROM_FRONT_RIGHT,
        e2ND_FROM_FRONT_LEFT,
        e2ND_FROM_FRONT_RIGHT,
        e3RD_FROM_FRONT_LEFT,
        e3RD_FROM_FRONT_RIGHT,
        e4TH_FROM_FRONT_LEFT,
        e4TH_FROM_FRONT_RIGHT,
        e5TH_FROM_FRONT_LEFT,
        e5TH_FROM_FRONT_RIGHT,
        e6TH_FROM_FRONT_LEFT,
        e6TH_FROM_FRONT_RIGHT,
        e7TH_FROM_FRONT_LEFT,
        e7TH_FROM_FRONT_RIGHT,
        e8TH_FROM_FRONT_LEFT,
        e8TH_FROM_FRONT_RIGHT,
        e9TH_FROM_FRONT_LEFT,
        e9TH_FROM_FRONT_RIGHT,
    }
    public enum PxVehicleDriveTankControl : uint {
        eANALOG_INPUT_ACCEL = unchecked((uint) (0)),
        eANALOG_INPUT_BRAKE_LEFT,
        eANALOG_INPUT_BRAKE_RIGHT,
        eANALOG_INPUT_THRUST_LEFT,
        eANALOG_INPUT_THRUST_RIGHT,
        eMAX_NB_DRIVETANK_ANALOG_INPUTS,
    }
    public enum PxVehicleDriveTankControlModel : uint {
        eSTANDARD = unchecked((uint) (0)),
        eSPECIAL,
    }
    public enum PxVehicleTypes : uint {
        eDRIVE4W = unchecked((uint) (0)),
        eDRIVENW,
        eDRIVETANK,
        eNODRIVE,
        eUSER1,
        eUSER2,
        eUSER3,
        eMAX_NB_VEHICLE_TYPES,
    }
    public enum PxVehicleUpdateMode : uint {
        eVELOCITY_CHANGE,
        eACCELERATION,
    }
    public enum PxVehicleWheelGraphChannel : uint {
        eJOUNCE = unchecked((uint) (0)),
        eSUSPFORCE,
        eTIRELOAD,
        eNORMALIZED_TIRELOAD,
        eWHEEL_OMEGA,
        eTIRE_FRICTION,
        eTIRE_LONG_SLIP,
        eNORM_TIRE_LONG_FORCE,
        eTIRE_LAT_SLIP,
        eNORM_TIRE_LAT_FORCE,
        eNORM_TIRE_ALIGNING_MOMENT,
        eMAX_NB_WHEEL_CHANNELS,
    }
    public enum PxVehicleDriveGraphChannel : uint {
        eENGINE_REVS = unchecked((uint) (0)),
        eENGINE_DRIVE_TORQUE,
        eCLUTCH_SLIP,
        eACCEL_CONTROL,
        eBRAKE_CONTROL,
        eHANDBRAKE_CONTROL,
        eSTEER_LEFT_CONTROL,
        eSTEER_RIGHT_CONTROL,
        eGEAR_RATIO,
        eMAX_NB_DRIVE_CHANNELS,
    }
    public enum PxVehicleGraphType : uint {
        eWHEEL = unchecked((uint) (0)),
        eDRIVE,
    }
}
