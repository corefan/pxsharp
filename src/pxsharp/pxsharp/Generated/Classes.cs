// File generated by ApiGen on 2013-12-17 15:11:31

using System;
using System.Runtime.InteropServices;
using System.Security;

namespace PxSharp { 
    using PxU8 = System.Byte;
    using PxI8 = System.SByte;
    using PxU16 = System.UInt16;
    using PxI16 = System.Int16;
    using PxU32 = System.UInt32;
    using PxI32 = System.Int32;
    using PxU64 = System.UInt64;
    using PxI64 = System.Int64;
    using PxF32 = System.Single;
    using PxF64 = System.Double;
    using PxReal = System.Single;
    using PxExtended = System.Double;
    
    public partial struct PxArticulationDriveCache {
        internal readonly IntPtr self;
        internal PxArticulationDriveCache (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxArticulationDriveCache value) { return value.self; }
        public static explicit operator PxArticulationDriveCache(IntPtr value) { return new PxArticulationDriveCache(value); }
        public static implicit operator Boolean(PxArticulationDriveCache value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxArticulationDriveCache@NULL}" : "{PxArticulationDriveCache@" + NativePtr + "}"; }
    }
    public partial struct PxsErrorCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsErrorCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsErrorCallback value) { return value.self; }
        public static explicit operator PxsErrorCallback(IntPtr value) { return new PxsErrorCallback(value); }
        public static implicit operator Boolean(PxsErrorCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsErrorCallback@NULL}" : "{PxsErrorCallback@" + NativePtr + "}"; }
        public static PxsErrorCallback New (PxsErrorDelegate arg0) { 
            return PInvoke.PxsErrorCallback_New1(arg0);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsErrorCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxErrorCallback (PxsErrorCallback value) { return new PxErrorCallback(PInvoke.CAST_PxsErrorCallback_TO_PxErrorCallback(value.self)); }
        public static explicit operator PxsErrorCallback (PxErrorCallback value) { return new PxsErrorCallback(PInvoke.CAST_PxErrorCallback_TO_PxsErrorCallback(value.self)); }
    }
    public partial struct PxErrorCallback {
        internal readonly IntPtr self;
        internal PxErrorCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxErrorCallback value) { return value.self; }
        public static explicit operator PxErrorCallback(IntPtr value) { return new PxErrorCallback(value); }
        public static implicit operator Boolean(PxErrorCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxErrorCallback@NULL}" : "{PxErrorCallback@" + NativePtr + "}"; }
    }
    public partial struct PxsBroadPhaseCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsBroadPhaseCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsBroadPhaseCallback value) { return value.self; }
        public static explicit operator PxsBroadPhaseCallback(IntPtr value) { return new PxsBroadPhaseCallback(value); }
        public static implicit operator Boolean(PxsBroadPhaseCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsBroadPhaseCallback@NULL}" : "{PxsBroadPhaseCallback@" + NativePtr + "}"; }
        public static PxsBroadPhaseCallback New (PxsBroadPhaseCallbackShapeOutOfBoundsDelegate arg0, PxsBroadPhaseCallbackAggregateOutOfBoundsDelegate arg1) { 
            return PInvoke.PxsBroadPhaseCallback_New2(arg0, arg1);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsBroadPhaseCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxBroadPhaseCallback (PxsBroadPhaseCallback value) { return new PxBroadPhaseCallback(PInvoke.CAST_PxsBroadPhaseCallback_TO_PxBroadPhaseCallback(value.self)); }
        public static explicit operator PxsBroadPhaseCallback (PxBroadPhaseCallback value) { return new PxsBroadPhaseCallback(PInvoke.CAST_PxBroadPhaseCallback_TO_PxsBroadPhaseCallback(value.self)); }
    }
    public partial struct PxBroadPhaseCallback {
        internal readonly IntPtr self;
        internal PxBroadPhaseCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxBroadPhaseCallback value) { return value.self; }
        public static explicit operator PxBroadPhaseCallback(IntPtr value) { return new PxBroadPhaseCallback(value); }
        public static implicit operator Boolean(PxBroadPhaseCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxBroadPhaseCallback@NULL}" : "{PxBroadPhaseCallback@" + NativePtr + "}"; }
    }
    public partial struct PxsControllerFilterCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsControllerFilterCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsControllerFilterCallback value) { return value.self; }
        public static explicit operator PxsControllerFilterCallback(IntPtr value) { return new PxsControllerFilterCallback(value); }
        public static implicit operator Boolean(PxsControllerFilterCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsControllerFilterCallback@NULL}" : "{PxsControllerFilterCallback@" + NativePtr + "}"; }
        public static PxsControllerFilterCallback New (PxsControllerFilterDelegate arg0) { 
            return PInvoke.PxsControllerFilterCallback_New1(arg0);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsControllerFilterCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxControllerFilterCallback (PxsControllerFilterCallback value) { return new PxControllerFilterCallback(PInvoke.CAST_PxsControllerFilterCallback_TO_PxControllerFilterCallback(value.self)); }
        public static explicit operator PxsControllerFilterCallback (PxControllerFilterCallback value) { return new PxsControllerFilterCallback(PInvoke.CAST_PxControllerFilterCallback_TO_PxsControllerFilterCallback(value.self)); }
    }
    public partial struct PxControllerFilterCallback {
        internal readonly IntPtr self;
        internal PxControllerFilterCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxControllerFilterCallback value) { return value.self; }
        public static explicit operator PxControllerFilterCallback(IntPtr value) { return new PxControllerFilterCallback(value); }
        public static implicit operator Boolean(PxControllerFilterCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxControllerFilterCallback@NULL}" : "{PxControllerFilterCallback@" + NativePtr + "}"; }
    }
    public partial struct PxsSimulationEventCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsSimulationEventCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsSimulationEventCallback value) { return value.self; }
        public static explicit operator PxsSimulationEventCallback(IntPtr value) { return new PxsSimulationEventCallback(value); }
        public static implicit operator Boolean(PxsSimulationEventCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsSimulationEventCallback@NULL}" : "{PxsSimulationEventCallback@" + NativePtr + "}"; }
        public static PxsSimulationEventCallback New (PxsSimulationWakeDelegate arg0, PxsSimulationSleepDelegate arg1, PxsSimulationTriggerDelegate arg2, PxsSimulationConstraintBreakDelegate arg3, PxsSimulationContactDelegate arg4) { 
            return PInvoke.PxsSimulationEventCallback_New5(arg0, arg1, arg2, arg3, arg4);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsSimulationEventCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxSimulationEventCallback (PxsSimulationEventCallback value) { return new PxSimulationEventCallback(PInvoke.CAST_PxsSimulationEventCallback_TO_PxSimulationEventCallback(value.self)); }
        public static explicit operator PxsSimulationEventCallback (PxSimulationEventCallback value) { return new PxsSimulationEventCallback(PInvoke.CAST_PxSimulationEventCallback_TO_PxsSimulationEventCallback(value.self)); }
    }
    public partial struct PxSimulationEventCallback {
        internal readonly IntPtr self;
        internal PxSimulationEventCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxSimulationEventCallback value) { return value.self; }
        public static explicit operator PxSimulationEventCallback(IntPtr value) { return new PxSimulationEventCallback(value); }
        public static implicit operator Boolean(PxSimulationEventCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxSimulationEventCallback@NULL}" : "{PxSimulationEventCallback@" + NativePtr + "}"; }
    }
    public partial struct PxsQueryFilterCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsQueryFilterCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsQueryFilterCallback value) { return value.self; }
        public static explicit operator PxsQueryFilterCallback(IntPtr value) { return new PxsQueryFilterCallback(value); }
        public static implicit operator Boolean(PxsQueryFilterCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsQueryFilterCallback@NULL}" : "{PxsQueryFilterCallback@" + NativePtr + "}"; }
        public static PxsQueryFilterCallback New (PxsQueryPreFilterDelegate arg0, PxsQueryPostFilterDelegate arg1) { 
            return PInvoke.PxsQueryFilterCallback_New2(arg0, arg1);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsQueryFilterCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxQueryFilterCallback (PxsQueryFilterCallback value) { return new PxQueryFilterCallback(PInvoke.CAST_PxsQueryFilterCallback_TO_PxQueryFilterCallback(value.self)); }
        public static explicit operator PxsQueryFilterCallback (PxQueryFilterCallback value) { return new PxsQueryFilterCallback(PInvoke.CAST_PxQueryFilterCallback_TO_PxsQueryFilterCallback(value.self)); }
    }
    public partial struct PxQueryFilterCallback {
        internal readonly IntPtr self;
        internal PxQueryFilterCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxQueryFilterCallback value) { return value.self; }
        public static explicit operator PxQueryFilterCallback(IntPtr value) { return new PxQueryFilterCallback(value); }
        public static implicit operator Boolean(PxQueryFilterCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxQueryFilterCallback@NULL}" : "{PxQueryFilterCallback@" + NativePtr + "}"; }
    }
    public partial struct PxsRaycastFilterCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsRaycastFilterCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsRaycastFilterCallback value) { return value.self; }
        public static explicit operator PxsRaycastFilterCallback(IntPtr value) { return new PxsRaycastFilterCallback(value); }
        public static implicit operator Boolean(PxsRaycastFilterCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsRaycastFilterCallback@NULL}" : "{PxsRaycastFilterCallback@" + NativePtr + "}"; }
        public static PxsRaycastFilterCallback New (PxsQueryPreFilterDelegate arg0, PxsRaycastPostFilterDelegate arg1) { 
            return PInvoke.PxsRaycastFilterCallback_New2(arg0, arg1);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsRaycastFilterCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxQueryFilterCallback (PxsRaycastFilterCallback value) { return new PxQueryFilterCallback(PInvoke.CAST_PxsRaycastFilterCallback_TO_PxQueryFilterCallback(value.self)); }
        public static explicit operator PxsRaycastFilterCallback (PxQueryFilterCallback value) { return new PxsRaycastFilterCallback(PInvoke.CAST_PxQueryFilterCallback_TO_PxsRaycastFilterCallback(value.self)); }
    }
    public partial struct PxsSweepFilterCallback : System.IDisposable {
        internal readonly IntPtr self;
        internal PxsSweepFilterCallback (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxsSweepFilterCallback value) { return value.self; }
        public static explicit operator PxsSweepFilterCallback(IntPtr value) { return new PxsSweepFilterCallback(value); }
        public static implicit operator Boolean(PxsSweepFilterCallback value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxsSweepFilterCallback@NULL}" : "{PxsSweepFilterCallback@" + NativePtr + "}"; }
        public static PxsSweepFilterCallback New (PxsQueryPreFilterDelegate arg0, PxsSweepPostFilterDelegate arg1) { 
            return PInvoke.PxsSweepFilterCallback_New2(arg0, arg1);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxsSweepFilterCallback_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxQueryFilterCallback (PxsSweepFilterCallback value) { return new PxQueryFilterCallback(PInvoke.CAST_PxsSweepFilterCallback_TO_PxQueryFilterCallback(value.self)); }
        public static explicit operator PxsSweepFilterCallback (PxQueryFilterCallback value) { return new PxsSweepFilterCallback(PInvoke.CAST_PxQueryFilterCallback_TO_PxsSweepFilterCallback(value.self)); }
    }
    public partial struct PxActor {
        internal readonly IntPtr self;
        internal PxActor (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxActor value) { return value.self; }
        public static explicit operator PxActor(IntPtr value) { return new PxActor(value); }
        public static implicit operator Boolean(PxActor value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxActor@NULL}" : "{PxActor@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxActor_UserData_Get(self); }
            set { PInvoke.PxActor_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_Release(self);
        }
        public PxActorType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetType(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetScene(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetWorldBounds(self, inflation);
        }
        public void SetActorFlag (PxActorFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_SetActorFlag(self, flag, value);
        }
        public void SetActorFlags (PxActorFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_SetActorFlags(self, inFlags);
        }
        public PxActorFlag GetActorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetActorFlags(self);
        }
        public void SetDominanceGroup (PxDominanceGroup dominanceGroup) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_SetDominanceGroup(self, dominanceGroup);
        }
        public PxDominanceGroup GetDominanceGroup () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetDominanceGroup(self);
        }
        public void SetOwnerClient (PxClientID inClient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_SetOwnerClient(self, inClient);
        }
        public PxClientID GetOwnerClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetOwnerClient(self);
        }
        public void SetClientBehaviorFlags (PxActorClientBehaviorFlag arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxActor_SetClientBehaviorFlags(self, arg0);
        }
        public PxActorClientBehaviorFlag GetClientBehaviorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetClientBehaviorFlags(self);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxActor_GetAggregate(self);
        }
    }
    public partial struct PxAggregate {
        internal readonly IntPtr self;
        internal PxAggregate (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxAggregate value) { return value.self; }
        public static explicit operator PxAggregate(IntPtr value) { return new PxAggregate(value); }
        public static implicit operator Boolean(PxAggregate value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxAggregate@NULL}" : "{PxAggregate@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxAggregate_Release(self);
        }
        public bool AddActor (PxActor actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_AddActor(self, actor);
        }
        public bool RemoveActor (PxActor actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_RemoveActor(self, actor);
        }
        public bool AddArticulation (PxArticulation articulation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_AddArticulation(self, articulation);
        }
        public bool RemoveArticulation (PxArticulation articulation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_RemoveArticulation(self, articulation);
        }
        public PxU32 GetNbActors () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_GetNbActors(self);
        }
        public PxU32 GetMaxNbActors () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_GetMaxNbActors(self);
        }
        public PxU32 GetActors (PxActor[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxAggregate_GetActors(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_GetScene(self);
        }
        public bool GetSelfCollision () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_GetSelfCollision(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxAggregate_GetConcreteTypeName(self);
        }
    }
    public partial struct PxArticulation {
        internal readonly IntPtr self;
        internal PxArticulation (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxArticulation value) { return value.self; }
        public static explicit operator PxArticulation(IntPtr value) { return new PxArticulation(value); }
        public static implicit operator Boolean(PxArticulation value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxArticulation@NULL}" : "{PxArticulation@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxArticulation_UserData_Get(self); }
            set { PInvoke.PxArticulation_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetScene(self);
        }
        public void SetMaxProjectionIterations (PxU32 iterations) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetMaxProjectionIterations(self, iterations);
        }
        public PxU32 GetMaxProjectionIterations () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetMaxProjectionIterations(self);
        }
        public void SetSeparationTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetSeparationTolerance(self, tolerance);
        }
        public PxReal GetSeparationTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetSeparationTolerance(self);
        }
        public void SetInternalDriveIterations (PxU32 iterations) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetInternalDriveIterations(self, iterations);
        }
        public PxU32 GetInternalDriveIterations () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetInternalDriveIterations(self);
        }
        public void SetExternalDriveIterations (PxU32 iterations) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetExternalDriveIterations(self, iterations);
        }
        public PxU32 GetExternalDriveIterations () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetExternalDriveIterations(self);
        }
        public void SetSolverIterationCounts (PxU32 minPositionIters, PxU32 minVelocityIters) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetSolverIterationCounts(self, minPositionIters, minVelocityIters);
        }
        public void GetSolverIterationCounts (ref PxU32 minPositionIters, ref PxU32 minVelocityIters) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_GetSolverIterationCounts(self, ref minPositionIters, ref minVelocityIters);
        }
        public bool IsSleeping () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_IsSleeping(self);
        }
        public void SetSleepThreshold (PxReal threshold) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetSleepThreshold(self, threshold);
        }
        public PxReal GetSleepThreshold () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetSleepThreshold(self);
        }
        public void SetWakeCounter (PxReal wakeCounterValue) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetWakeCounter(self, wakeCounterValue);
        }
        public PxReal GetWakeCounter () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetWakeCounter(self);
        }
        public void WakeUp () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_WakeUp(self);
        }
        public void PutToSleep () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_PutToSleep(self);
        }
        public PxArticulationLink CreateLink (PxArticulationLink parent, PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_CreateLink(self, parent, pose);
        }
        public PxU32 GetNbLinks () {
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetNbLinks(self);
        }
        public PxU32 GetLinks (PxArticulationLink[] userBuffer) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxArticulation_GetLinks(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length);
                }
            }
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetWorldBounds(self, inflation);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetAggregate(self);
        }
        public PxArticulationDriveCache CreateDriveCache (PxReal compliance, PxU32 driveIterations) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_CreateDriveCache(self, compliance, driveIterations);
        }
        public void UpdateDriveCache (PxArticulationDriveCache driveCache, PxReal compliance, PxU32 driveIterations) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_UpdateDriveCache(self, driveCache, compliance, driveIterations);
        }
        public void ReleaseDriveCache (PxArticulationDriveCache driveCache) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_ReleaseDriveCache(self, driveCache);
        }
        public void ApplyImpulse (PxArticulationLink link, PxArticulationDriveCache driveCache, PxVec3 linearImpulse, PxVec3 angularImpulse) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_ApplyImpulse(self, link, driveCache, linearImpulse, angularImpulse);
        }
        public void ComputeImpulseResponse (PxArticulationLink link, ref PxVec3 linearResponse, ref PxVec3 angularResponse, PxArticulationDriveCache driveCache, PxVec3 linearImpulse, PxVec3 angularImpulse) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulation_ComputeImpulseResponse(self, link, ref linearResponse, ref angularResponse, driveCache, linearImpulse, angularImpulse);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulation_GetConcreteTypeName(self);
        }
    }
    public partial struct PxArticulationLink {
        internal readonly IntPtr self;
        internal PxArticulationLink (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxArticulationLink value) { return value.self; }
        public static explicit operator PxArticulationLink(IntPtr value) { return new PxArticulationLink(value); }
        public static implicit operator Boolean(PxArticulationLink value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxArticulationLink@NULL}" : "{PxArticulationLink@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxArticulationLink_UserData_Get(self); }
            set { PInvoke.PxArticulationLink_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_Release(self);
        }
        public PxActorType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetType(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetScene(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetWorldBounds(self, inflation);
        }
        public void SetActorFlag (PxActorFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetActorFlag(self, flag, value);
        }
        public void SetActorFlags (PxActorFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetActorFlags(self, inFlags);
        }
        public PxActorFlag GetActorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetActorFlags(self);
        }
        public void SetDominanceGroup (PxDominanceGroup dominanceGroup) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetDominanceGroup(self, dominanceGroup);
        }
        public PxDominanceGroup GetDominanceGroup () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetDominanceGroup(self);
        }
        public void SetOwnerClient (PxClientID inClient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetOwnerClient(self, inClient);
        }
        public PxClientID GetOwnerClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetOwnerClient(self);
        }
        public void SetClientBehaviorFlags (PxActorClientBehaviorFlag arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetClientBehaviorFlags(self, arg0);
        }
        public PxActorClientBehaviorFlag GetClientBehaviorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetClientBehaviorFlags(self);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetAggregate(self);
        }
        public PxTransform GetGlobalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetGlobalPose(self);
        }
        public void SetGlobalPose (PxTransform pose, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetGlobalPose(self, pose, autowake);
        }
        public void AttachShape (PxShape shape) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_AttachShape(self, shape);
        }
        public void DetachShape (PxShape shape, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_DetachShape(self, shape, wakeOnLostTouch);
        }
        public PxU32 GetNbShapes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetNbShapes(self);
        }
        public PxU32 GetShapes (PxShape[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxArticulationLink_GetShapes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbConstraints () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetNbConstraints(self);
        }
        public PxU32 GetConstraints (PxConstraint[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxArticulationLink_GetConstraints(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public void SetCMassLocalPose (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetCMassLocalPose(self, pose);
        }
        public PxTransform GetCMassLocalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetCMassLocalPose(self);
        }
        public void SetMass (PxReal mass) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetMass(self, mass);
        }
        public PxReal GetMass () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetMass(self);
        }
        public PxReal GetInvMass () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetInvMass(self);
        }
        public void SetMassSpaceInertiaTensor (PxVec3 m) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetMassSpaceInertiaTensor(self, m);
        }
        public PxVec3 GetMassSpaceInertiaTensor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetMassSpaceInertiaTensor(self);
        }
        public PxVec3 GetMassSpaceInvInertiaTensor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetMassSpaceInvInertiaTensor(self);
        }
        public PxVec3 GetLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetLinearVelocity(self);
        }
        public void SetLinearVelocity (PxVec3 linVel, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetLinearVelocity(self, linVel, autowake);
        }
        public PxVec3 GetAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetAngularVelocity(self);
        }
        public void SetAngularVelocity (PxVec3 angVel, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetAngularVelocity(self, angVel, autowake);
        }
        public void AddForce (PxVec3 force, PxForceMode mode, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_AddForce(self, force, mode, autowake);
        }
        public void AddTorque (PxVec3 torque, PxForceMode mode, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_AddTorque(self, torque, mode, autowake);
        }
        public void ClearForce (PxForceMode mode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_ClearForce(self, mode);
        }
        public void ClearTorque (PxForceMode mode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_ClearTorque(self, mode);
        }
        public void SetRigidBodyFlag (PxRigidBodyFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetRigidBodyFlag(self, flag, value);
        }
        public void SetRigidBodyFlags (PxRigidBodyFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetRigidBodyFlags(self, inFlags);
        }
        public PxRigidBodyFlag GetRigidBodyFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetRigidBodyFlags(self);
        }
        public void SetMinCCDAdvanceCoefficient (PxReal advanceCoefficient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxArticulationLink_SetMinCCDAdvanceCoefficient(self, advanceCoefficient);
        }
        public PxReal GetMinCCDAdvanceCoefficient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetMinCCDAdvanceCoefficient(self);
        }
        public PxArticulation GetArticulation () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetArticulation(self);
        }
        public IntPtr GetInboundJoint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetInboundJoint(self);
        }
        public PxU32 GetNbChildren () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetNbChildren(self);
        }
        public PxU32 GetChildren (PxArticulationLink[] userBuffer) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxArticulationLink_GetChildren(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length);
                }
            }
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxArticulationLink_GetConcreteTypeName(self);
        }
        public static implicit operator PxRigidBody (PxArticulationLink value) { return new PxRigidBody(PInvoke.CAST_PxArticulationLink_TO_PxRigidBody(value.self)); }
        public static explicit operator PxArticulationLink (PxRigidBody value) { return new PxArticulationLink(PInvoke.CAST_PxRigidBody_TO_PxArticulationLink(value.self)); }
        public static implicit operator PxRigidActor (PxArticulationLink value) { return new PxRigidActor(PInvoke.CAST_PxArticulationLink_TO_PxRigidActor(value.self)); }
        public static explicit operator PxArticulationLink (PxRigidActor value) { return new PxArticulationLink(PInvoke.CAST_PxRigidActor_TO_PxArticulationLink(value.self)); }
        public static implicit operator PxActor (PxArticulationLink value) { return new PxActor(PInvoke.CAST_PxArticulationLink_TO_PxActor(value.self)); }
        public static explicit operator PxArticulationLink (PxActor value) { return new PxArticulationLink(PInvoke.CAST_PxActor_TO_PxArticulationLink(value.self)); }
    }
    public partial struct PxConstraint {
        // Ignored Methods
        // setConstraintFunctions
        
        internal readonly IntPtr self;
        internal PxConstraint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxConstraint value) { return value.self; }
        public static explicit operator PxConstraint(IntPtr value) { return new PxConstraint(value); }
        public static implicit operator Boolean(PxConstraint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxConstraint@NULL}" : "{PxConstraint@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConstraint_GetScene(self);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_SetActors(self, actor0, actor1);
        }
        public void MarkDirty () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_MarkDirty(self);
        }
        public void SetFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_SetFlags(self, flags);
        }
        public PxConstraintFlag GetFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConstraint_GetFlags(self);
        }
        public void SetFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_SetFlag(self, flag, value);
        }
        public void GetForce (ref PxVec3 linear, ref PxVec3 angular) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_GetForce(self, ref linear, ref angular);
        }
        public void SetBreakForce (PxReal linear, PxReal angular) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_SetBreakForce(self, linear, angular);
        }
        public void GetBreakForce (ref PxReal linear, ref PxReal angular) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConstraint_GetBreakForce(self, ref linear, ref angular);
        }
        public IntPtr GetExternalReference (ref PxU32 typeID) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConstraint_GetExternalReference(self, ref typeID);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConstraint_GetConcreteTypeName(self);
        }
    }
    public partial struct PxMaterial {
        internal readonly IntPtr self;
        internal PxMaterial (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxMaterial value) { return value.self; }
        public static explicit operator PxMaterial(IntPtr value) { return new PxMaterial(value); }
        public static implicit operator Boolean(PxMaterial value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxMaterial@NULL}" : "{PxMaterial@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxMaterial_UserData_Get(self); }
            set { PInvoke.PxMaterial_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_Release(self);
        }
        public PxU32 GetReferenceCount () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetReferenceCount(self);
        }
        public void SetDynamicFriction (PxReal coef) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetDynamicFriction(self, coef);
        }
        public PxReal GetDynamicFriction () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetDynamicFriction(self);
        }
        public void SetStaticFriction (PxReal coef) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetStaticFriction(self, coef);
        }
        public PxReal GetStaticFriction () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetStaticFriction(self);
        }
        public void SetRestitution (PxReal rest) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetRestitution(self, rest);
        }
        public PxReal GetRestitution () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetRestitution(self);
        }
        public void SetFlag (PxMaterialFlag flag, bool arg1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetFlag(self, flag, arg1);
        }
        public void SetFlags (PxMaterialFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetFlags(self, inFlags);
        }
        public PxMaterialFlag GetFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetFlags(self);
        }
        public void SetFrictionCombineMode (PxCombineMode combMode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetFrictionCombineMode(self, combMode);
        }
        public PxCombineMode GetFrictionCombineMode () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetFrictionCombineMode(self);
        }
        public void SetRestitutionCombineMode (PxCombineMode combMode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxMaterial_SetRestitutionCombineMode(self, combMode);
        }
        public PxCombineMode GetRestitutionCombineMode () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetRestitutionCombineMode(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxMaterial_GetConcreteTypeName(self);
        }
    }
    public partial struct PxPhysics {
        // Ignored Methods
        // getProfileZoneManager
        // createHeightField
        // createHeightField
        // createClothFabric
        // createClothFabric
        // getClothFabrics
        // createParticleSystem
        // createParticleFluid
        // createCloth
        // createConstraint
        // registerDeletionListener
        // unregisterDeletionListener
        // registerDeletionListenerObjects
        // unregisterDeletionListenerObjects
        
        internal readonly IntPtr self;
        internal PxPhysics (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxPhysics value) { return value.self; }
        public static explicit operator PxPhysics(IntPtr value) { return new PxPhysics(value); }
        public static implicit operator Boolean(PxPhysics value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxPhysics@NULL}" : "{PxPhysics@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPhysics_Release(self);
        }
        public PxFoundation GetFoundation () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetFoundation(self);
        }
        public IntPtr GetVisualDebugger () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetVisualDebugger(self);
        }
        public IntPtr GetPvdConnectionManager () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetPvdConnectionManager(self);
        }
        public PxAggregate CreateAggregate (PxU32 maxSize, bool enableSelfCollision) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateAggregate(self, maxSize, enableSelfCollision);
        }
        public PxTolerancesScale GetTolerancesScale () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetTolerancesScale(self);
        }
        public PxTriangleMesh CreateTriangleMesh (PxInputStream stream) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateTriangleMesh(self, stream);
        }
        public PxU32 GetNbTriangleMeshes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbTriangleMeshes(self);
        }
        public PxU32 GetTriangleMeshes (PxTriangleMesh[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxPhysics_GetTriangleMeshes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbHeightFields () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbHeightFields(self);
        }
        public PxU32 GetHeightFields (PxHeightField[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxPhysics_GetHeightFields(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxConvexMesh CreateConvexMesh (PxInputStream stream) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateConvexMesh(self, stream);
        }
        public PxU32 GetNbConvexMeshes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbConvexMeshes(self);
        }
        public PxU32 GetConvexMeshes (PxConvexMesh[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxPhysics_GetConvexMeshes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbClothFabrics () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbClothFabrics(self);
        }
        public PxScene CreateScene (PxSceneDesc sceneDesc) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateScene(self, sceneDesc);
        }
        public PxU32 GetNbScenes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbScenes(self);
        }
        public PxU32 GetScenes (PxScene[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxPhysics_GetScenes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxRigidStatic CreateRigidStatic (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateRigidStatic(self, pose);
        }
        public PxRigidDynamic CreateRigidDynamic (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateRigidDynamic(self, pose);
        }
        public PxShape CreateShape (PxGeometry geometry, PxMaterial material, bool isExclusive, PxShapeFlag shapeFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateShape_0(self, geometry, material, isExclusive, shapeFlags);
        }
        public PxShape CreateShape (PxGeometry geometry, PxMaterial[] materials, bool isExclusive, PxShapeFlag shapeFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* materials_tmp = materials) {
                    return PInvoke.PxPhysics_CreateShape_1(self, geometry, new IntPtr(materials_tmp), (PxU16) materials.Length, isExclusive, shapeFlags);
                }
            }
        }
        public PxU32 GetNbShapes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbShapes(self);
        }
        public PxU32 GetShapes (PxShape[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxPhysics_GetShapes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxArticulation CreateArticulation () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateArticulation(self);
        }
        public PxMaterial CreateMaterial (PxReal staticFriction, PxReal dynamicFriction, PxReal restitution) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_CreateMaterial(self, staticFriction, dynamicFriction, restitution);
        }
        public PxU32 GetNbMaterials () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPhysics_GetNbMaterials(self);
        }
        public PxU32 GetMaterials (PxMaterial[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxPhysics_GetMaterials(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
    }
    public partial struct PxRigidActor {
        internal readonly IntPtr self;
        internal PxRigidActor (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxRigidActor value) { return value.self; }
        public static explicit operator PxRigidActor(IntPtr value) { return new PxRigidActor(value); }
        public static implicit operator Boolean(PxRigidActor value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxRigidActor@NULL}" : "{PxRigidActor@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxRigidActor_UserData_Get(self); }
            set { PInvoke.PxRigidActor_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_Release(self);
        }
        public PxActorType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetType(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetScene(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetWorldBounds(self, inflation);
        }
        public void SetActorFlag (PxActorFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetActorFlag(self, flag, value);
        }
        public void SetActorFlags (PxActorFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetActorFlags(self, inFlags);
        }
        public PxActorFlag GetActorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetActorFlags(self);
        }
        public void SetDominanceGroup (PxDominanceGroup dominanceGroup) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetDominanceGroup(self, dominanceGroup);
        }
        public PxDominanceGroup GetDominanceGroup () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetDominanceGroup(self);
        }
        public void SetOwnerClient (PxClientID inClient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetOwnerClient(self, inClient);
        }
        public PxClientID GetOwnerClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetOwnerClient(self);
        }
        public void SetClientBehaviorFlags (PxActorClientBehaviorFlag arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetClientBehaviorFlags(self, arg0);
        }
        public PxActorClientBehaviorFlag GetClientBehaviorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetClientBehaviorFlags(self);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetAggregate(self);
        }
        public PxTransform GetGlobalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetGlobalPose(self);
        }
        public void SetGlobalPose (PxTransform pose, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_SetGlobalPose(self, pose, autowake);
        }
        public PxShape CreateShape (PxGeometry geometry, PxMaterial[] materials, PxShapeFlag shapeFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* materials_tmp = materials) {
                    return PInvoke.PxRigidActor_CreateShape_1(self, geometry, new IntPtr(materials_tmp), (PxU16) materials.Length, shapeFlags);
                }
            }
        }
        public PxShape CreateShape (PxGeometry geometry, PxMaterial material, PxShapeFlag shapeFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_CreateShape_0(self, geometry, material, shapeFlags);
        }
        public void AttachShape (PxShape shape) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_AttachShape(self, shape);
        }
        public void DetachShape (PxShape shape, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidActor_DetachShape(self, shape, wakeOnLostTouch);
        }
        public PxU32 GetNbShapes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetNbShapes(self);
        }
        public PxU32 GetShapes (PxShape[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidActor_GetShapes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbConstraints () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidActor_GetNbConstraints(self);
        }
        public PxU32 GetConstraints (PxConstraint[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidActor_GetConstraints(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public static implicit operator PxActor (PxRigidActor value) { return new PxActor(PInvoke.CAST_PxRigidActor_TO_PxActor(value.self)); }
        public static explicit operator PxRigidActor (PxActor value) { return new PxRigidActor(PInvoke.CAST_PxActor_TO_PxRigidActor(value.self)); }
    }
    public partial struct PxRigidBody {
        internal readonly IntPtr self;
        internal PxRigidBody (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxRigidBody value) { return value.self; }
        public static explicit operator PxRigidBody(IntPtr value) { return new PxRigidBody(value); }
        public static implicit operator Boolean(PxRigidBody value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxRigidBody@NULL}" : "{PxRigidBody@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxRigidBody_UserData_Get(self); }
            set { PInvoke.PxRigidBody_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_Release(self);
        }
        public PxActorType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetType(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetScene(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetWorldBounds(self, inflation);
        }
        public void SetActorFlag (PxActorFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetActorFlag(self, flag, value);
        }
        public void SetActorFlags (PxActorFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetActorFlags(self, inFlags);
        }
        public PxActorFlag GetActorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetActorFlags(self);
        }
        public void SetDominanceGroup (PxDominanceGroup dominanceGroup) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetDominanceGroup(self, dominanceGroup);
        }
        public PxDominanceGroup GetDominanceGroup () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetDominanceGroup(self);
        }
        public void SetOwnerClient (PxClientID inClient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetOwnerClient(self, inClient);
        }
        public PxClientID GetOwnerClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetOwnerClient(self);
        }
        public void SetClientBehaviorFlags (PxActorClientBehaviorFlag arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetClientBehaviorFlags(self, arg0);
        }
        public PxActorClientBehaviorFlag GetClientBehaviorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetClientBehaviorFlags(self);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetAggregate(self);
        }
        public PxTransform GetGlobalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetGlobalPose(self);
        }
        public void SetGlobalPose (PxTransform pose, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetGlobalPose(self, pose, autowake);
        }
        public void AttachShape (PxShape shape) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_AttachShape(self, shape);
        }
        public void DetachShape (PxShape shape, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_DetachShape(self, shape, wakeOnLostTouch);
        }
        public PxU32 GetNbShapes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetNbShapes(self);
        }
        public PxU32 GetShapes (PxShape[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidBody_GetShapes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbConstraints () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetNbConstraints(self);
        }
        public PxU32 GetConstraints (PxConstraint[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidBody_GetConstraints(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public void SetCMassLocalPose (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetCMassLocalPose(self, pose);
        }
        public PxTransform GetCMassLocalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetCMassLocalPose(self);
        }
        public void SetMass (PxReal mass) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetMass(self, mass);
        }
        public PxReal GetMass () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetMass(self);
        }
        public PxReal GetInvMass () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetInvMass(self);
        }
        public void SetMassSpaceInertiaTensor (PxVec3 m) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetMassSpaceInertiaTensor(self, m);
        }
        public PxVec3 GetMassSpaceInertiaTensor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetMassSpaceInertiaTensor(self);
        }
        public PxVec3 GetMassSpaceInvInertiaTensor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetMassSpaceInvInertiaTensor(self);
        }
        public PxVec3 GetLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetLinearVelocity(self);
        }
        public void SetLinearVelocity (PxVec3 linVel, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetLinearVelocity(self, linVel, autowake);
        }
        public PxVec3 GetAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetAngularVelocity(self);
        }
        public void SetAngularVelocity (PxVec3 angVel, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetAngularVelocity(self, angVel, autowake);
        }
        public void AddForce (PxVec3 force, PxForceMode mode, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_AddForce(self, force, mode, autowake);
        }
        public void AddTorque (PxVec3 torque, PxForceMode mode, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_AddTorque(self, torque, mode, autowake);
        }
        public void ClearForce (PxForceMode mode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_ClearForce(self, mode);
        }
        public void ClearTorque (PxForceMode mode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_ClearTorque(self, mode);
        }
        public void SetRigidBodyFlag (PxRigidBodyFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetRigidBodyFlag(self, flag, value);
        }
        public void SetRigidBodyFlags (PxRigidBodyFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetRigidBodyFlags(self, inFlags);
        }
        public PxRigidBodyFlag GetRigidBodyFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetRigidBodyFlags(self);
        }
        public void SetMinCCDAdvanceCoefficient (PxReal advanceCoefficient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidBody_SetMinCCDAdvanceCoefficient(self, advanceCoefficient);
        }
        public PxReal GetMinCCDAdvanceCoefficient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidBody_GetMinCCDAdvanceCoefficient(self);
        }
        public static implicit operator PxRigidActor (PxRigidBody value) { return new PxRigidActor(PInvoke.CAST_PxRigidBody_TO_PxRigidActor(value.self)); }
        public static explicit operator PxRigidBody (PxRigidActor value) { return new PxRigidBody(PInvoke.CAST_PxRigidActor_TO_PxRigidBody(value.self)); }
        public static implicit operator PxActor (PxRigidBody value) { return new PxActor(PInvoke.CAST_PxRigidBody_TO_PxActor(value.self)); }
        public static explicit operator PxRigidBody (PxActor value) { return new PxRigidBody(PInvoke.CAST_PxActor_TO_PxRigidBody(value.self)); }
    }
    public partial struct PxRigidDynamic {
        internal readonly IntPtr self;
        internal PxRigidDynamic (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxRigidDynamic value) { return value.self; }
        public static explicit operator PxRigidDynamic(IntPtr value) { return new PxRigidDynamic(value); }
        public static implicit operator Boolean(PxRigidDynamic value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxRigidDynamic@NULL}" : "{PxRigidDynamic@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxRigidDynamic_UserData_Get(self); }
            set { PInvoke.PxRigidDynamic_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_Release(self);
        }
        public PxActorType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetType(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetScene(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetWorldBounds(self, inflation);
        }
        public void SetActorFlag (PxActorFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetActorFlag(self, flag, value);
        }
        public void SetActorFlags (PxActorFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetActorFlags(self, inFlags);
        }
        public PxActorFlag GetActorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetActorFlags(self);
        }
        public void SetDominanceGroup (PxDominanceGroup dominanceGroup) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetDominanceGroup(self, dominanceGroup);
        }
        public PxDominanceGroup GetDominanceGroup () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetDominanceGroup(self);
        }
        public void SetOwnerClient (PxClientID inClient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetOwnerClient(self, inClient);
        }
        public PxClientID GetOwnerClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetOwnerClient(self);
        }
        public void SetClientBehaviorFlags (PxActorClientBehaviorFlag arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetClientBehaviorFlags(self, arg0);
        }
        public PxActorClientBehaviorFlag GetClientBehaviorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetClientBehaviorFlags(self);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetAggregate(self);
        }
        public PxTransform GetGlobalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetGlobalPose(self);
        }
        public void SetGlobalPose (PxTransform pose, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetGlobalPose(self, pose, autowake);
        }
        public void AttachShape (PxShape shape) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_AttachShape(self, shape);
        }
        public void DetachShape (PxShape shape, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_DetachShape(self, shape, wakeOnLostTouch);
        }
        public PxU32 GetNbShapes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetNbShapes(self);
        }
        public PxU32 GetShapes (PxShape[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidDynamic_GetShapes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbConstraints () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetNbConstraints(self);
        }
        public PxU32 GetConstraints (PxConstraint[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidDynamic_GetConstraints(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public void SetCMassLocalPose (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetCMassLocalPose(self, pose);
        }
        public PxTransform GetCMassLocalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetCMassLocalPose(self);
        }
        public void SetMass (PxReal mass) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetMass(self, mass);
        }
        public PxReal GetMass () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetMass(self);
        }
        public PxReal GetInvMass () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetInvMass(self);
        }
        public void SetMassSpaceInertiaTensor (PxVec3 m) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetMassSpaceInertiaTensor(self, m);
        }
        public PxVec3 GetMassSpaceInertiaTensor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetMassSpaceInertiaTensor(self);
        }
        public PxVec3 GetMassSpaceInvInertiaTensor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetMassSpaceInvInertiaTensor(self);
        }
        public PxVec3 GetLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetLinearVelocity(self);
        }
        public void SetLinearVelocity (PxVec3 linVel, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetLinearVelocity(self, linVel, autowake);
        }
        public PxVec3 GetAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetAngularVelocity(self);
        }
        public void SetAngularVelocity (PxVec3 angVel, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetAngularVelocity(self, angVel, autowake);
        }
        public void AddForce (PxVec3 force, PxForceMode mode, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_AddForce(self, force, mode, autowake);
        }
        public void AddTorque (PxVec3 torque, PxForceMode mode, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_AddTorque(self, torque, mode, autowake);
        }
        public void ClearForce (PxForceMode mode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_ClearForce(self, mode);
        }
        public void ClearTorque (PxForceMode mode) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_ClearTorque(self, mode);
        }
        public void SetRigidBodyFlag (PxRigidBodyFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetRigidBodyFlag(self, flag, value);
        }
        public void SetRigidBodyFlags (PxRigidBodyFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetRigidBodyFlags(self, inFlags);
        }
        public PxRigidBodyFlag GetRigidBodyFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetRigidBodyFlags(self);
        }
        public void SetMinCCDAdvanceCoefficient (PxReal advanceCoefficient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetMinCCDAdvanceCoefficient(self, advanceCoefficient);
        }
        public PxReal GetMinCCDAdvanceCoefficient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetMinCCDAdvanceCoefficient(self);
        }
        public void SetKinematicTarget (PxTransform destination) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetKinematicTarget(self, destination);
        }
        public bool GetKinematicTarget (ref PxTransform target) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetKinematicTarget(self, ref target);
        }
        public void SetLinearDamping (PxReal linDamp) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetLinearDamping(self, linDamp);
        }
        public PxReal GetLinearDamping () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetLinearDamping(self);
        }
        public void SetAngularDamping (PxReal angDamp) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetAngularDamping(self, angDamp);
        }
        public PxReal GetAngularDamping () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetAngularDamping(self);
        }
        public void SetMaxAngularVelocity (PxReal maxAngVel) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetMaxAngularVelocity(self, maxAngVel);
        }
        public PxReal GetMaxAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetMaxAngularVelocity(self);
        }
        public bool IsSleeping () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_IsSleeping(self);
        }
        public void SetSleepThreshold (PxReal threshold) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetSleepThreshold(self, threshold);
        }
        public PxReal GetSleepThreshold () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetSleepThreshold(self);
        }
        public void SetWakeCounter (PxReal wakeCounterValue) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetWakeCounter(self, wakeCounterValue);
        }
        public PxReal GetWakeCounter () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetWakeCounter(self);
        }
        public void WakeUp () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_WakeUp(self);
        }
        public void PutToSleep () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_PutToSleep(self);
        }
        public void SetSolverIterationCounts (PxU32 minPositionIters, PxU32 minVelocityIters) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetSolverIterationCounts(self, minPositionIters, minVelocityIters);
        }
        public void GetSolverIterationCounts (ref PxU32 minPositionIters, ref PxU32 minVelocityIters) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_GetSolverIterationCounts(self, ref minPositionIters, ref minVelocityIters);
        }
        public PxReal GetContactReportThreshold () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetContactReportThreshold(self);
        }
        public void SetContactReportThreshold (PxReal threshold) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidDynamic_SetContactReportThreshold(self, threshold);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidDynamic_GetConcreteTypeName(self);
        }
        public static implicit operator PxRigidBody (PxRigidDynamic value) { return new PxRigidBody(PInvoke.CAST_PxRigidDynamic_TO_PxRigidBody(value.self)); }
        public static explicit operator PxRigidDynamic (PxRigidBody value) { return new PxRigidDynamic(PInvoke.CAST_PxRigidBody_TO_PxRigidDynamic(value.self)); }
        public static implicit operator PxRigidActor (PxRigidDynamic value) { return new PxRigidActor(PInvoke.CAST_PxRigidDynamic_TO_PxRigidActor(value.self)); }
        public static explicit operator PxRigidDynamic (PxRigidActor value) { return new PxRigidDynamic(PInvoke.CAST_PxRigidActor_TO_PxRigidDynamic(value.self)); }
        public static implicit operator PxActor (PxRigidDynamic value) { return new PxActor(PInvoke.CAST_PxRigidDynamic_TO_PxActor(value.self)); }
        public static explicit operator PxRigidDynamic (PxActor value) { return new PxRigidDynamic(PInvoke.CAST_PxActor_TO_PxRigidDynamic(value.self)); }
    }
    public partial struct PxRigidStatic {
        internal readonly IntPtr self;
        internal PxRigidStatic (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxRigidStatic value) { return value.self; }
        public static explicit operator PxRigidStatic(IntPtr value) { return new PxRigidStatic(value); }
        public static implicit operator Boolean(PxRigidStatic value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxRigidStatic@NULL}" : "{PxRigidStatic@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxRigidStatic_UserData_Get(self); }
            set { PInvoke.PxRigidStatic_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_Release(self);
        }
        public PxActorType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetType(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetScene(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetName(self);
        }
        public PxBounds3 GetWorldBounds (float inflation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetWorldBounds(self, inflation);
        }
        public void SetActorFlag (PxActorFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetActorFlag(self, flag, value);
        }
        public void SetActorFlags (PxActorFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetActorFlags(self, inFlags);
        }
        public PxActorFlag GetActorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetActorFlags(self);
        }
        public void SetDominanceGroup (PxDominanceGroup dominanceGroup) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetDominanceGroup(self, dominanceGroup);
        }
        public PxDominanceGroup GetDominanceGroup () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetDominanceGroup(self);
        }
        public void SetOwnerClient (PxClientID inClient) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetOwnerClient(self, inClient);
        }
        public PxClientID GetOwnerClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetOwnerClient(self);
        }
        public void SetClientBehaviorFlags (PxActorClientBehaviorFlag arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetClientBehaviorFlags(self, arg0);
        }
        public PxActorClientBehaviorFlag GetClientBehaviorFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetClientBehaviorFlags(self);
        }
        public PxAggregate GetAggregate () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetAggregate(self);
        }
        public PxTransform GetGlobalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetGlobalPose(self);
        }
        public void SetGlobalPose (PxTransform pose, bool autowake) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_SetGlobalPose(self, pose, autowake);
        }
        public void AttachShape (PxShape shape) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_AttachShape(self, shape);
        }
        public void DetachShape (PxShape shape, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRigidStatic_DetachShape(self, shape, wakeOnLostTouch);
        }
        public PxU32 GetNbShapes () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetNbShapes(self);
        }
        public PxU32 GetShapes (PxShape[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidStatic_GetShapes(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbConstraints () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetNbConstraints(self);
        }
        public PxU32 GetConstraints (PxConstraint[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxRigidStatic_GetConstraints(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRigidStatic_GetConcreteTypeName(self);
        }
        public static implicit operator PxRigidActor (PxRigidStatic value) { return new PxRigidActor(PInvoke.CAST_PxRigidStatic_TO_PxRigidActor(value.self)); }
        public static explicit operator PxRigidStatic (PxRigidActor value) { return new PxRigidStatic(PInvoke.CAST_PxRigidActor_TO_PxRigidStatic(value.self)); }
        public static implicit operator PxActor (PxRigidStatic value) { return new PxActor(PInvoke.CAST_PxRigidStatic_TO_PxActor(value.self)); }
        public static explicit operator PxRigidStatic (PxActor value) { return new PxRigidStatic(PInvoke.CAST_PxActor_TO_PxRigidStatic(value.self)); }
    }
    public partial struct PxScene {
        // Ignored Fields
        // buf
        // buf
        // buf
        // buf
        // buf
        
        // Ignored Methods
        // addCollection
        // getActiveTransforms
        // getFilterShaderData
        // getFilterShaderDataSize
        // getFilterShader
        // simulate
        // solve
        // collide
        // getRenderBuffer
        // getSimulationStatistics
        // createBatchQuery
        // raycast
        // sweep
        // overlap
        // getBroadPhaseRegions
        // getTaskManager
        // setSolverBatchSize
        // getSolverBatchSize
        
        internal readonly IntPtr self;
        internal PxScene (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxScene value) { return value.self; }
        public static explicit operator PxScene(IntPtr value) { return new PxScene(value); }
        public static implicit operator Boolean(PxScene value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxScene@NULL}" : "{PxScene@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxScene_UserData_Get(self); }
            set { PInvoke.PxScene_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_Release(self);
        }
        public void SetFlag (PxSceneFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetFlag(self, flag, value);
        }
        public PxSceneFlag GetFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetFlags(self);
        }
        public void SetLimits (PxSceneLimits limits) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetLimits(self, limits);
        }
        public PxSceneLimits GetLimits () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetLimits(self);
        }
        public PxPhysics GetPhysics () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetPhysics(self);
        }
        public PxU32 GetTimestamp () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetTimestamp(self);
        }
        public void AddArticulation (PxArticulation articulation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_AddArticulation(self, articulation);
        }
        public void RemoveArticulation (PxArticulation articulation, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_RemoveArticulation(self, articulation, wakeOnLostTouch);
        }
        public void AddActor (PxActor actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_AddActor(self, actor);
        }
        public void AddActors (PxActor[] actors) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* actors_tmp = actors) {
                    PInvoke.PxScene_AddActors(self, new IntPtr(actors_tmp), (PxU32) actors.Length);
                }
            }
        }
        public void RemoveActor (PxActor actor, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_RemoveActor(self, actor, wakeOnLostTouch);
        }
        public void RemoveActors (PxActor[] actors, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* actors_tmp = actors) {
                    PInvoke.PxScene_RemoveActors(self, new IntPtr(actors_tmp), (PxU32) actors.Length, wakeOnLostTouch);
                }
            }
        }
        public void AddAggregate (PxAggregate aggregate) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_AddAggregate(self, aggregate);
        }
        public void RemoveAggregate (PxAggregate aggregate, bool wakeOnLostTouch) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_RemoveAggregate(self, aggregate, wakeOnLostTouch);
        }
        public PxU32 GetNbActors (PxActorTypeFlag types) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetNbActors(self, types);
        }
        public PxU32 GetActors (PxActorTypeFlag types, PxActor[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxScene_GetActors(self, types, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbArticulations () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetNbArticulations(self);
        }
        public PxU32 GetArticulations (PxArticulation[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxScene_GetArticulations(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbConstraints () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetNbConstraints(self);
        }
        public PxU32 GetConstraints (PxConstraint[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxScene_GetConstraints(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public PxU32 GetNbAggregates () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetNbAggregates(self);
        }
        public PxU32 GetAggregates (PxAggregate[] userBuffer, PxU32 startIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxScene_GetAggregates(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length, startIndex);
                }
            }
        }
        public void SetDominanceGroupPair (PxDominanceGroup group1, PxDominanceGroup group2, PxDominanceGroupPair dominance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetDominanceGroupPair(self, group1, group2, dominance);
        }
        public PxDominanceGroupPair GetDominanceGroupPair (PxDominanceGroup group1, PxDominanceGroup group2) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetDominanceGroupPair(self, group1, group2);
        }
        public IntPtr GetCpuDispatcher () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetCpuDispatcher(self);
        }
        public IntPtr GetGpuDispatcher () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetGpuDispatcher(self);
        }
        public IntPtr GetSpuDispatcher () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetSpuDispatcher(self);
        }
        public PxClientID CreateClient () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_CreateClient(self);
        }
        public void SetClientBehaviorFlags (PxClientID client, PxClientBehaviorFlag clientBehaviorFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetClientBehaviorFlags(self, client, clientBehaviorFlags);
        }
        public PxClientBehaviorFlag GetClientBehaviorFlags (PxClientID client) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetClientBehaviorFlags(self, client);
        }
        public void SetClothInterCollisionDistance (PxF32 distance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetClothInterCollisionDistance(self, distance);
        }
        public PxF32 GetClothInterCollisionDistance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetClothInterCollisionDistance(self);
        }
        public void SetClothInterCollisionStiffness (PxF32 stiffness) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetClothInterCollisionStiffness(self, stiffness);
        }
        public PxF32 GetClothInterCollisionStiffness () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetClothInterCollisionStiffness(self);
        }
        public void SetClothInterCollisionNbIterations (PxU32 nbIterations) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetClothInterCollisionNbIterations(self, nbIterations);
        }
        public PxU32 GetClothInterCollisionNbIterations () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetClothInterCollisionNbIterations(self);
        }
        public void SetSimulationEventCallback (PxSimulationEventCallback callback, PxClientID client) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetSimulationEventCallback(self, callback, client);
        }
        public PxSimulationEventCallback GetSimulationEventCallback (PxClientID client) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetSimulationEventCallback(self, client);
        }
        public void SetContactModifyCallback (IntPtr callback) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetContactModifyCallback(self, callback);
        }
        public void SetCCDContactModifyCallback (IntPtr callback) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetCCDContactModifyCallback(self, callback);
        }
        public IntPtr GetContactModifyCallback () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetContactModifyCallback(self);
        }
        public IntPtr GetCCDContactModifyCallback () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetCCDContactModifyCallback(self);
        }
        public void SetBroadPhaseCallback (PxBroadPhaseCallback callback, PxClientID client) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetBroadPhaseCallback(self, callback, client);
        }
        public PxBroadPhaseCallback GetBroadPhaseCallback (PxClientID client) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetBroadPhaseCallback(self, client);
        }
        public IntPtr GetFilterCallback () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetFilterCallback(self);
        }
        public void ResetFiltering (PxActor actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_ResetFiltering_0(self, actor);
        }
        public void ResetFiltering (PxRigidActor actor, PxShape[] shapes) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* shapes_tmp = shapes) {
                    PInvoke.PxScene_ResetFiltering_1(self, actor, new IntPtr(shapes_tmp), (PxU32) shapes.Length);
                }
            }
        }
        public bool CheckResults (bool block) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_CheckResults(self, block);
        }
        public bool FetchResults (bool block, ref PxU32 errorState) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_FetchResults(self, block, ref errorState);
        }
        public void FlushSimulation (bool sendPendingReports) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_FlushSimulation(self, sendPendingReports);
        }
        public void SetGravity (PxVec3 vec) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetGravity(self, vec);
        }
        public PxVec3 GetGravity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetGravity(self);
        }
        public void SetBounceThresholdVelocity (PxReal t) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetBounceThresholdVelocity(self, t);
        }
        public PxReal GetBounceThresholdVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetBounceThresholdVelocity(self);
        }
        public void SetCCDMaxPasses (PxU32 ccdMaxPasses) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetCCDMaxPasses(self, ccdMaxPasses);
        }
        public PxU32 GetCCDMaxPasses () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetCCDMaxPasses(self);
        }
        public PxReal GetContactCorrelationDistance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetContactCorrelationDistance(self);
        }
        public PxReal GetFrictionOffsetThreshold () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetFrictionOffsetThreshold(self);
        }
        public bool SetVisualizationParameter (PxVisualizationParameter param, PxReal value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_SetVisualizationParameter(self, param, value);
        }
        public PxReal GetVisualizationParameter (PxVisualizationParameter paramEnum) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetVisualizationParameter(self, paramEnum);
        }
        public void SetVisualizationCullingBox (PxBounds3 box) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetVisualizationCullingBox(self, box);
        }
        public PxBounds3 GetVisualizationCullingBox () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetVisualizationCullingBox(self);
        }
        public PxPruningStructure GetStaticStructure () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetStaticStructure(self);
        }
        public PxPruningStructure GetDynamicStructure () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetDynamicStructure(self);
        }
        public void FlushQueryUpdates () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_FlushQueryUpdates(self);
        }
        public IntPtr CreateVolumeCache (PxU32 maxStaticShapes, PxU32 maxDynamicShapes) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_CreateVolumeCache(self, maxStaticShapes, maxDynamicShapes);
        }
        public void SetDynamicTreeRebuildRateHint (PxU32 dynamicTreeRebuildRateHint) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetDynamicTreeRebuildRateHint(self, dynamicTreeRebuildRateHint);
        }
        public PxU32 GetDynamicTreeRebuildRateHint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetDynamicTreeRebuildRateHint(self);
        }
        public void ForceDynamicTreeRebuild (bool rebuildStaticStructure, bool rebuildDynamicStructure) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_ForceDynamicTreeRebuild(self, rebuildStaticStructure, rebuildDynamicStructure);
        }
        public PxU32 GetSceneQueryStaticTimestamp () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetSceneQueryStaticTimestamp(self);
        }
        public PxBroadPhaseType GetBroadPhaseType () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetBroadPhaseType(self);
        }
        public bool GetBroadPhaseCaps (ref PxBroadPhaseCaps caps) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetBroadPhaseCaps(self, ref caps);
        }
        public PxU32 GetNbBroadPhaseRegions () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetNbBroadPhaseRegions(self);
        }
        public PxU32 AddBroadPhaseRegion (PxBroadPhaseRegion region, bool populateRegion) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_AddBroadPhaseRegion(self, region, populateRegion);
        }
        public bool RemoveBroadPhaseRegion (PxU32 handle) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_RemoveBroadPhaseRegion(self, handle);
        }
        public void LockRead (string file, PxU32 line) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_LockRead(self, file, line);
        }
        public void UnlockRead () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_UnlockRead(self);
        }
        public void LockWrite (string file, PxU32 line) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_LockWrite(self, file, line);
        }
        public void UnlockWrite () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_UnlockWrite(self);
        }
        public void SetNbContactDataBlocks (PxU32 numBlocks) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_SetNbContactDataBlocks(self, numBlocks);
        }
        public PxU32 GetNbContactDataBlocksUsed () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetNbContactDataBlocksUsed(self);
        }
        public PxU32 GetMaxNbContactDataBlocksUsed () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetMaxNbContactDataBlocksUsed(self);
        }
        public PxU32 GetContactReportStreamBufferSize () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetContactReportStreamBufferSize(self);
        }
        public PxReal GetWakeCounterResetValue () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetWakeCounterResetValue(self);
        }
        public void ShiftOrigin (PxVec3 shift) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_ShiftOrigin(self, shift);
        }
        public PxU32 GetActiveTransforms (IntPtr buffer, PxU32 bufferSize) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetActiveTransforms(self, buffer, bufferSize);
        }
        public PxU32 GetBroadPhaseRegions (ref PxBroadPhaseRegionInfo userBuffer, PxU32 bufferSize) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_GetBroadPhaseRegions(self, ref userBuffer, bufferSize);
        }
        public void Simulate (PxReal elapsedTime) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_Simulate_0(self, elapsedTime);
        }
        public void Simulate (PxReal elapsedTime, PxsScratchBlock block) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_Simulate_1(self, elapsedTime, block);
        }
        public void Simulate (PxReal elapsedTime, PxsScratchBlock block, bool controlSimulation) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxScene_Simulate_2(self, elapsedTime, block, controlSimulation);
        }
        public bool Raycast (PxVec3 origin, PxVec3 direction, PxReal distance, IntPtr buffer, PxHitFlag flags, PxQueryFilterData filterData, PxQueryFilterCallback callback) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxScene_Raycast(self, origin, direction, distance, buffer, flags, filterData, callback);
        }
    }
    public partial struct PxSceneDesc {
        // Ignored Fields
        // filterShaderData
        // filterShaderDataSize
        // filterShader
        // contactReportStreamBufferSize
        
        internal readonly IntPtr self;
        internal PxSceneDesc (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxSceneDesc value) { return value.self; }
        public static explicit operator PxSceneDesc(IntPtr value) { return new PxSceneDesc(value); }
        public static implicit operator Boolean(PxSceneDesc value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxSceneDesc@NULL}" : "{PxSceneDesc@" + NativePtr + "}"; }
        public PxVec3 Gravity {
            get { return PInvoke.PxSceneDesc_Gravity_Get(self); }
            set { PInvoke.PxSceneDesc_Gravity_Set(self, value); }
        }
        public PxSimulationEventCallback SimulationEventCallback {
            get { return PInvoke.PxSceneDesc_SimulationEventCallback_Get(self); }
            set { PInvoke.PxSceneDesc_SimulationEventCallback_Set(self, value); }
        }
        public IntPtr ContactModifyCallback {
            get { return PInvoke.PxSceneDesc_ContactModifyCallback_Get(self); }
            set { PInvoke.PxSceneDesc_ContactModifyCallback_Set(self, value); }
        }
        public IntPtr CcdContactModifyCallback {
            get { return PInvoke.PxSceneDesc_CcdContactModifyCallback_Get(self); }
            set { PInvoke.PxSceneDesc_CcdContactModifyCallback_Set(self, value); }
        }
        public IntPtr FilterCallback {
            get { return PInvoke.PxSceneDesc_FilterCallback_Get(self); }
            set { PInvoke.PxSceneDesc_FilterCallback_Set(self, value); }
        }
        public PxBroadPhaseType BroadPhaseType {
            get { return PInvoke.PxSceneDesc_BroadPhaseType_Get(self); }
            set { PInvoke.PxSceneDesc_BroadPhaseType_Set(self, value); }
        }
        public PxBroadPhaseCallback BroadPhaseCallback {
            get { return PInvoke.PxSceneDesc_BroadPhaseCallback_Get(self); }
            set { PInvoke.PxSceneDesc_BroadPhaseCallback_Set(self, value); }
        }
        public PxSceneLimits Limits {
            get { return PInvoke.PxSceneDesc_Limits_Get(self); }
            set { PInvoke.PxSceneDesc_Limits_Set(self, value); }
        }
        public PxFrictionType FrictionType {
            get { return PInvoke.PxSceneDesc_FrictionType_Get(self); }
            set { PInvoke.PxSceneDesc_FrictionType_Set(self, value); }
        }
        public PxReal BounceThresholdVelocity {
            get { return PInvoke.PxSceneDesc_BounceThresholdVelocity_Get(self); }
            set { PInvoke.PxSceneDesc_BounceThresholdVelocity_Set(self, value); }
        }
        public PxReal FrictionOffsetThreshold {
            get { return PInvoke.PxSceneDesc_FrictionOffsetThreshold_Get(self); }
            set { PInvoke.PxSceneDesc_FrictionOffsetThreshold_Set(self, value); }
        }
        public PxSceneFlag Flags {
            get { return PInvoke.PxSceneDesc_Flags_Get(self); }
            set { PInvoke.PxSceneDesc_Flags_Set(self, value); }
        }
        public IntPtr CpuDispatcher {
            get { return PInvoke.PxSceneDesc_CpuDispatcher_Get(self); }
            set { PInvoke.PxSceneDesc_CpuDispatcher_Set(self, value); }
        }
        public IntPtr GpuDispatcher {
            get { return PInvoke.PxSceneDesc_GpuDispatcher_Get(self); }
            set { PInvoke.PxSceneDesc_GpuDispatcher_Set(self, value); }
        }
        public IntPtr SpuDispatcher {
            get { return PInvoke.PxSceneDesc_SpuDispatcher_Get(self); }
            set { PInvoke.PxSceneDesc_SpuDispatcher_Set(self, value); }
        }
        public PxPruningStructure StaticStructure {
            get { return PInvoke.PxSceneDesc_StaticStructure_Get(self); }
            set { PInvoke.PxSceneDesc_StaticStructure_Set(self, value); }
        }
        public PxPruningStructure DynamicStructure {
            get { return PInvoke.PxSceneDesc_DynamicStructure_Get(self); }
            set { PInvoke.PxSceneDesc_DynamicStructure_Set(self, value); }
        }
        public PxU32 DynamicTreeRebuildRateHint {
            get { return PInvoke.PxSceneDesc_DynamicTreeRebuildRateHint_Get(self); }
            set { PInvoke.PxSceneDesc_DynamicTreeRebuildRateHint_Set(self, value); }
        }
        public IntPtr UserData {
            get { return PInvoke.PxSceneDesc_UserData_Get(self); }
            set { PInvoke.PxSceneDesc_UserData_Set(self, value); }
        }
        public PxU32 SolverBatchSize {
            get { return PInvoke.PxSceneDesc_SolverBatchSize_Get(self); }
            set { PInvoke.PxSceneDesc_SolverBatchSize_Set(self, value); }
        }
        public PxU32 NbContactDataBlocks {
            get { return PInvoke.PxSceneDesc_NbContactDataBlocks_Get(self); }
            set { PInvoke.PxSceneDesc_NbContactDataBlocks_Set(self, value); }
        }
        public PxU32 MaxNbContactDataBlocks {
            get { return PInvoke.PxSceneDesc_MaxNbContactDataBlocks_Get(self); }
            set { PInvoke.PxSceneDesc_MaxNbContactDataBlocks_Set(self, value); }
        }
        public PxU32 CcdMaxPasses {
            get { return PInvoke.PxSceneDesc_CcdMaxPasses_Get(self); }
            set { PInvoke.PxSceneDesc_CcdMaxPasses_Set(self, value); }
        }
        public PxSimulationOrder SimulationOrder {
            get { return PInvoke.PxSceneDesc_SimulationOrder_Get(self); }
            set { PInvoke.PxSceneDesc_SimulationOrder_Set(self, value); }
        }
        public PxReal WakeCounterResetValue {
            get { return PInvoke.PxSceneDesc_WakeCounterResetValue_Get(self); }
            set { PInvoke.PxSceneDesc_WakeCounterResetValue_Set(self, value); }
        }
        public void SetToDefault (PxTolerancesScale scale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSceneDesc_SetToDefault(self, scale);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSceneDesc_IsValid(self);
        }
        public static PxSceneDesc New (PxTolerancesScale ts) { 
            return PInvoke.PxSceneDesc_New(ts);
        }
    }
    public partial struct PxShape {
        // Ignored Methods
        // getGeometryType
        // getGeometry
        
        internal readonly IntPtr self;
        internal PxShape (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxShape value) { return value.self; }
        public static explicit operator PxShape(IntPtr value) { return new PxShape(value); }
        public static implicit operator Boolean(PxShape value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxShape@NULL}" : "{PxShape@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxShape_UserData_Get(self); }
            set { PInvoke.PxShape_UserData_Set(self, value); }
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_Release(self);
        }
        public void SetGeometry (PxGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetGeometry(self, geometry);
        }
        public bool GetBoxGeometry (PxBoxGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetBoxGeometry(self, geometry);
        }
        public bool GetSphereGeometry (PxSphereGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetSphereGeometry(self, geometry);
        }
        public bool GetCapsuleGeometry (PxCapsuleGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetCapsuleGeometry(self, geometry);
        }
        public bool GetPlaneGeometry (PxPlaneGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetPlaneGeometry(self, geometry);
        }
        public bool GetConvexMeshGeometry (PxConvexMeshGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetConvexMeshGeometry(self, geometry);
        }
        public bool GetTriangleMeshGeometry (PxTriangleMeshGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetTriangleMeshGeometry(self, geometry);
        }
        public bool GetHeightFieldGeometry (PxHeightFieldGeometry geometry) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetHeightFieldGeometry(self, geometry);
        }
        public PxRigidActor GetActor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetActor(self);
        }
        public void SetLocalPose (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetLocalPose(self, pose);
        }
        public PxTransform GetLocalPose () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetLocalPose(self);
        }
        public void SetSimulationFilterData (PxFilterData data) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetSimulationFilterData(self, data);
        }
        public PxFilterData GetSimulationFilterData () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetSimulationFilterData(self);
        }
        public void SetQueryFilterData (PxFilterData data) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetQueryFilterData(self, data);
        }
        public PxFilterData GetQueryFilterData () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetQueryFilterData(self);
        }
        public void SetMaterials (PxMaterial[] materials) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* materials_tmp = materials) {
                    PInvoke.PxShape_SetMaterials(self, new IntPtr(materials_tmp), (PxU16) materials.Length);
                }
            }
        }
        public PxU16 GetNbMaterials () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetNbMaterials(self);
        }
        public PxU32 GetMaterials (PxMaterial[] userBuffer) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            unsafe {
                fixed(void* userBuffer_tmp = userBuffer) {
                    return PInvoke.PxShape_GetMaterials(self, new IntPtr(userBuffer_tmp), (PxU32) userBuffer.Length);
                }
            }
        }
        public PxMaterial GetMaterialFromInternalFaceIndex (PxU32 faceIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetMaterialFromInternalFaceIndex(self, faceIndex);
        }
        public void SetContactOffset (PxReal contactOffset) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetContactOffset(self, contactOffset);
        }
        public PxReal GetContactOffset () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetContactOffset(self);
        }
        public void SetRestOffset (PxReal restOffset) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetRestOffset(self, restOffset);
        }
        public PxReal GetRestOffset () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetRestOffset(self);
        }
        public void SetFlag (PxShapeFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetFlag(self, flag, value);
        }
        public void SetFlags (PxShapeFlag inFlags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetFlags(self, inFlags);
        }
        public PxShapeFlag GetFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetFlags(self);
        }
        public bool IsExclusive () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_IsExclusive(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxShape_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetName(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxShape_GetConcreteTypeName(self);
        }
    }
    public partial struct PxBoxControllerDesc {
        internal readonly IntPtr self;
        internal PxBoxControllerDesc (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxBoxControllerDesc value) { return value.self; }
        public static explicit operator PxBoxControllerDesc(IntPtr value) { return new PxBoxControllerDesc(value); }
        public static implicit operator Boolean(PxBoxControllerDesc value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxBoxControllerDesc@NULL}" : "{PxBoxControllerDesc@" + NativePtr + "}"; }
        public PxExtendedVec3 Position {
            get { return PInvoke.PxBoxControllerDesc_Position_Get(self); }
            set { PInvoke.PxBoxControllerDesc_Position_Set(self, value); }
        }
        public PxVec3 UpDirection {
            get { return PInvoke.PxBoxControllerDesc_UpDirection_Get(self); }
            set { PInvoke.PxBoxControllerDesc_UpDirection_Set(self, value); }
        }
        public PxF32 SlopeLimit {
            get { return PInvoke.PxBoxControllerDesc_SlopeLimit_Get(self); }
            set { PInvoke.PxBoxControllerDesc_SlopeLimit_Set(self, value); }
        }
        public PxF32 InvisibleWallHeight {
            get { return PInvoke.PxBoxControllerDesc_InvisibleWallHeight_Get(self); }
            set { PInvoke.PxBoxControllerDesc_InvisibleWallHeight_Set(self, value); }
        }
        public PxF32 MaxJumpHeight {
            get { return PInvoke.PxBoxControllerDesc_MaxJumpHeight_Get(self); }
            set { PInvoke.PxBoxControllerDesc_MaxJumpHeight_Set(self, value); }
        }
        public PxF32 ContactOffset {
            get { return PInvoke.PxBoxControllerDesc_ContactOffset_Get(self); }
            set { PInvoke.PxBoxControllerDesc_ContactOffset_Set(self, value); }
        }
        public PxF32 StepOffset {
            get { return PInvoke.PxBoxControllerDesc_StepOffset_Get(self); }
            set { PInvoke.PxBoxControllerDesc_StepOffset_Set(self, value); }
        }
        public PxF32 Density {
            get { return PInvoke.PxBoxControllerDesc_Density_Get(self); }
            set { PInvoke.PxBoxControllerDesc_Density_Set(self, value); }
        }
        public PxF32 ScaleCoeff {
            get { return PInvoke.PxBoxControllerDesc_ScaleCoeff_Get(self); }
            set { PInvoke.PxBoxControllerDesc_ScaleCoeff_Set(self, value); }
        }
        public PxF32 VolumeGrowth {
            get { return PInvoke.PxBoxControllerDesc_VolumeGrowth_Get(self); }
            set { PInvoke.PxBoxControllerDesc_VolumeGrowth_Set(self, value); }
        }
        public IntPtr ReportCallback {
            get { return PInvoke.PxBoxControllerDesc_ReportCallback_Get(self); }
            set { PInvoke.PxBoxControllerDesc_ReportCallback_Set(self, value); }
        }
        public IntPtr BehaviorCallback {
            get { return PInvoke.PxBoxControllerDesc_BehaviorCallback_Get(self); }
            set { PInvoke.PxBoxControllerDesc_BehaviorCallback_Set(self, value); }
        }
        public PxControllerNonWalkableMode NonWalkableMode {
            get { return PInvoke.PxBoxControllerDesc_NonWalkableMode_Get(self); }
            set { PInvoke.PxBoxControllerDesc_NonWalkableMode_Set(self, value); }
        }
        public PxMaterial Material {
            get { return PInvoke.PxBoxControllerDesc_Material_Get(self); }
            set { PInvoke.PxBoxControllerDesc_Material_Set(self, value); }
        }
        public IntPtr UserData {
            get { return PInvoke.PxBoxControllerDesc_UserData_Get(self); }
            set { PInvoke.PxBoxControllerDesc_UserData_Set(self, value); }
        }
        public PxF32 HalfHeight {
            get { return PInvoke.PxBoxControllerDesc_HalfHeight_Get(self); }
            set { PInvoke.PxBoxControllerDesc_HalfHeight_Set(self, value); }
        }
        public PxF32 HalfSideExtent {
            get { return PInvoke.PxBoxControllerDesc_HalfSideExtent_Get(self); }
            set { PInvoke.PxBoxControllerDesc_HalfSideExtent_Set(self, value); }
        }
        public PxF32 HalfForwardExtent {
            get { return PInvoke.PxBoxControllerDesc_HalfForwardExtent_Get(self); }
            set { PInvoke.PxBoxControllerDesc_HalfForwardExtent_Set(self, value); }
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxBoxControllerDesc_IsValid(self);
        }
        public PxControllerShapeType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxBoxControllerDesc_GetType(self);
        }
        public void SetToDefault () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxBoxControllerDesc_SetToDefault(self);
        }
        public static implicit operator PxControllerDesc (PxBoxControllerDesc value) { return new PxControllerDesc(PInvoke.CAST_PxBoxControllerDesc_TO_PxControllerDesc(value.self)); }
        public static explicit operator PxBoxControllerDesc (PxControllerDesc value) { return new PxBoxControllerDesc(PInvoke.CAST_PxControllerDesc_TO_PxBoxControllerDesc(value.self)); }
    }
    public partial struct PxCapsuleControllerDesc {
        internal readonly IntPtr self;
        internal PxCapsuleControllerDesc (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxCapsuleControllerDesc value) { return value.self; }
        public static explicit operator PxCapsuleControllerDesc(IntPtr value) { return new PxCapsuleControllerDesc(value); }
        public static implicit operator Boolean(PxCapsuleControllerDesc value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxCapsuleControllerDesc@NULL}" : "{PxCapsuleControllerDesc@" + NativePtr + "}"; }
        public PxExtendedVec3 Position {
            get { return PInvoke.PxCapsuleControllerDesc_Position_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_Position_Set(self, value); }
        }
        public PxVec3 UpDirection {
            get { return PInvoke.PxCapsuleControllerDesc_UpDirection_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_UpDirection_Set(self, value); }
        }
        public PxF32 SlopeLimit {
            get { return PInvoke.PxCapsuleControllerDesc_SlopeLimit_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_SlopeLimit_Set(self, value); }
        }
        public PxF32 InvisibleWallHeight {
            get { return PInvoke.PxCapsuleControllerDesc_InvisibleWallHeight_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_InvisibleWallHeight_Set(self, value); }
        }
        public PxF32 MaxJumpHeight {
            get { return PInvoke.PxCapsuleControllerDesc_MaxJumpHeight_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_MaxJumpHeight_Set(self, value); }
        }
        public PxF32 ContactOffset {
            get { return PInvoke.PxCapsuleControllerDesc_ContactOffset_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_ContactOffset_Set(self, value); }
        }
        public PxF32 StepOffset {
            get { return PInvoke.PxCapsuleControllerDesc_StepOffset_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_StepOffset_Set(self, value); }
        }
        public PxF32 Density {
            get { return PInvoke.PxCapsuleControllerDesc_Density_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_Density_Set(self, value); }
        }
        public PxF32 ScaleCoeff {
            get { return PInvoke.PxCapsuleControllerDesc_ScaleCoeff_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_ScaleCoeff_Set(self, value); }
        }
        public PxF32 VolumeGrowth {
            get { return PInvoke.PxCapsuleControllerDesc_VolumeGrowth_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_VolumeGrowth_Set(self, value); }
        }
        public IntPtr ReportCallback {
            get { return PInvoke.PxCapsuleControllerDesc_ReportCallback_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_ReportCallback_Set(self, value); }
        }
        public IntPtr BehaviorCallback {
            get { return PInvoke.PxCapsuleControllerDesc_BehaviorCallback_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_BehaviorCallback_Set(self, value); }
        }
        public PxControllerNonWalkableMode NonWalkableMode {
            get { return PInvoke.PxCapsuleControllerDesc_NonWalkableMode_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_NonWalkableMode_Set(self, value); }
        }
        public PxMaterial Material {
            get { return PInvoke.PxCapsuleControllerDesc_Material_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_Material_Set(self, value); }
        }
        public IntPtr UserData {
            get { return PInvoke.PxCapsuleControllerDesc_UserData_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_UserData_Set(self, value); }
        }
        public PxF32 Radius {
            get { return PInvoke.PxCapsuleControllerDesc_Radius_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_Radius_Set(self, value); }
        }
        public PxF32 Height {
            get { return PInvoke.PxCapsuleControllerDesc_Height_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_Height_Set(self, value); }
        }
        public PxCapsuleClimbingMode ClimbingMode {
            get { return PInvoke.PxCapsuleControllerDesc_ClimbingMode_Get(self); }
            set { PInvoke.PxCapsuleControllerDesc_ClimbingMode_Set(self, value); }
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxCapsuleControllerDesc_IsValid(self);
        }
        public PxControllerShapeType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxCapsuleControllerDesc_GetType(self);
        }
        public void SetToDefault () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxCapsuleControllerDesc_SetToDefault(self);
        }
        public static implicit operator PxControllerDesc (PxCapsuleControllerDesc value) { return new PxControllerDesc(PInvoke.CAST_PxCapsuleControllerDesc_TO_PxControllerDesc(value.self)); }
        public static explicit operator PxCapsuleControllerDesc (PxControllerDesc value) { return new PxCapsuleControllerDesc(PInvoke.CAST_PxControllerDesc_TO_PxCapsuleControllerDesc(value.self)); }
    }
    public partial struct PxControllerDesc {
        internal readonly IntPtr self;
        internal PxControllerDesc (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxControllerDesc value) { return value.self; }
        public static explicit operator PxControllerDesc(IntPtr value) { return new PxControllerDesc(value); }
        public static implicit operator Boolean(PxControllerDesc value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxControllerDesc@NULL}" : "{PxControllerDesc@" + NativePtr + "}"; }
        public PxExtendedVec3 Position {
            get { return PInvoke.PxControllerDesc_Position_Get(self); }
            set { PInvoke.PxControllerDesc_Position_Set(self, value); }
        }
        public PxVec3 UpDirection {
            get { return PInvoke.PxControllerDesc_UpDirection_Get(self); }
            set { PInvoke.PxControllerDesc_UpDirection_Set(self, value); }
        }
        public PxF32 SlopeLimit {
            get { return PInvoke.PxControllerDesc_SlopeLimit_Get(self); }
            set { PInvoke.PxControllerDesc_SlopeLimit_Set(self, value); }
        }
        public PxF32 InvisibleWallHeight {
            get { return PInvoke.PxControllerDesc_InvisibleWallHeight_Get(self); }
            set { PInvoke.PxControllerDesc_InvisibleWallHeight_Set(self, value); }
        }
        public PxF32 MaxJumpHeight {
            get { return PInvoke.PxControllerDesc_MaxJumpHeight_Get(self); }
            set { PInvoke.PxControllerDesc_MaxJumpHeight_Set(self, value); }
        }
        public PxF32 ContactOffset {
            get { return PInvoke.PxControllerDesc_ContactOffset_Get(self); }
            set { PInvoke.PxControllerDesc_ContactOffset_Set(self, value); }
        }
        public PxF32 StepOffset {
            get { return PInvoke.PxControllerDesc_StepOffset_Get(self); }
            set { PInvoke.PxControllerDesc_StepOffset_Set(self, value); }
        }
        public PxF32 Density {
            get { return PInvoke.PxControllerDesc_Density_Get(self); }
            set { PInvoke.PxControllerDesc_Density_Set(self, value); }
        }
        public PxF32 ScaleCoeff {
            get { return PInvoke.PxControllerDesc_ScaleCoeff_Get(self); }
            set { PInvoke.PxControllerDesc_ScaleCoeff_Set(self, value); }
        }
        public PxF32 VolumeGrowth {
            get { return PInvoke.PxControllerDesc_VolumeGrowth_Get(self); }
            set { PInvoke.PxControllerDesc_VolumeGrowth_Set(self, value); }
        }
        public IntPtr ReportCallback {
            get { return PInvoke.PxControllerDesc_ReportCallback_Get(self); }
            set { PInvoke.PxControllerDesc_ReportCallback_Set(self, value); }
        }
        public IntPtr BehaviorCallback {
            get { return PInvoke.PxControllerDesc_BehaviorCallback_Get(self); }
            set { PInvoke.PxControllerDesc_BehaviorCallback_Set(self, value); }
        }
        public PxControllerNonWalkableMode NonWalkableMode {
            get { return PInvoke.PxControllerDesc_NonWalkableMode_Get(self); }
            set { PInvoke.PxControllerDesc_NonWalkableMode_Set(self, value); }
        }
        public PxMaterial Material {
            get { return PInvoke.PxControllerDesc_Material_Get(self); }
            set { PInvoke.PxControllerDesc_Material_Set(self, value); }
        }
        public IntPtr UserData {
            get { return PInvoke.PxControllerDesc_UserData_Get(self); }
            set { PInvoke.PxControllerDesc_UserData_Set(self, value); }
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerDesc_IsValid(self);
        }
        public PxControllerShapeType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerDesc_GetType(self);
        }
    }
    public partial struct PxController {
        // Ignored Methods
        // move
        
        internal readonly IntPtr self;
        internal PxController (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxController value) { return value.self; }
        public static explicit operator PxController(IntPtr value) { return new PxController(value); }
        public static implicit operator Boolean(PxController value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxController@NULL}" : "{PxController@" + NativePtr + "}"; }
        public PxControllerShapeType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetType(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_Release(self);
        }
        public bool SetPosition (PxExtendedVec3 position) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_SetPosition(self, position);
        }
        public PxExtendedVec3 GetPosition () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetPosition(self);
        }
        public bool SetFootPosition (PxExtendedVec3 position) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_SetFootPosition(self, position);
        }
        public PxExtendedVec3 GetFootPosition () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetFootPosition(self);
        }
        public PxRigidDynamic GetActor () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetActor(self);
        }
        public void SetStepOffset (PxF32 offset) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_SetStepOffset(self, offset);
        }
        public PxF32 GetStepOffset () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetStepOffset(self);
        }
        public void SetNonWalkableMode (PxControllerNonWalkableMode flag) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_SetNonWalkableMode(self, flag);
        }
        public PxControllerNonWalkableMode GetNonWalkableMode () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetNonWalkableMode(self);
        }
        public PxF32 GetContactOffset () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetContactOffset(self);
        }
        public void SetContactOffset (PxF32 offset) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_SetContactOffset(self, offset);
        }
        public PxVec3 GetUpDirection () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetUpDirection(self);
        }
        public void SetUpDirection (PxVec3 up) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_SetUpDirection(self, up);
        }
        public PxF32 GetSlopeLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetSlopeLimit(self);
        }
        public void SetSlopeLimit (PxF32 slopeLimit) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_SetSlopeLimit(self, slopeLimit);
        }
        public void InvalidateCache () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_InvalidateCache(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetScene(self);
        }
        public IntPtr GetUserData () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxController_GetUserData(self);
        }
        public void SetUserData (IntPtr userData) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_SetUserData(self, userData);
        }
        public void GetState (ref PxControllerState state) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_GetState(self, ref state);
        }
        public void GetStats (ref PxControllerStats stats) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_GetStats(self, ref stats);
        }
        public void Resize (PxReal height) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxController_Resize(self, height);
        }
    }
    public partial struct PxControllerManager {
        // Ignored Methods
        // getRenderBuffer
        // computeInteractions
        // setOverlapRecoveryModule
        // setPreciseSweeps
        
        internal readonly IntPtr self;
        internal PxControllerManager (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxControllerManager value) { return value.self; }
        public static explicit operator PxControllerManager(IntPtr value) { return new PxControllerManager(value); }
        public static implicit operator Boolean(PxControllerManager value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxControllerManager@NULL}" : "{PxControllerManager@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxControllerManager_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_GetScene(self);
        }
        public PxU32 GetNbControllers () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_GetNbControllers(self);
        }
        public PxController GetController (PxU32 index) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_GetController(self, index);
        }
        public PxController CreateController (PxControllerDesc desc) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_CreateController(self, desc);
        }
        public void PurgeControllers () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxControllerManager_PurgeControllers(self);
        }
        public void SetDebugRenderingFlags (PxControllerDebugRenderFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxControllerManager_SetDebugRenderingFlags(self, flags);
        }
        public PxU32 GetNbObstacleContexts () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_GetNbObstacleContexts(self);
        }
        public PxObstacleContext GetObstacleContext (PxU32 index) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_GetObstacleContext(self, index);
        }
        public PxObstacleContext CreateObstacleContext () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxControllerManager_CreateObstacleContext(self);
        }
        public void SetTessellation (bool flag, float maxEdgeLength) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxControllerManager_SetTessellation(self, flag, maxEdgeLength);
        }
        public void ShiftOrigin (PxVec3 shift) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxControllerManager_ShiftOrigin(self, shift);
        }
    }
    public partial struct PxObstacle {
        internal readonly IntPtr self;
        internal PxObstacle (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxObstacle value) { return value.self; }
        public static explicit operator PxObstacle(IntPtr value) { return new PxObstacle(value); }
        public static implicit operator Boolean(PxObstacle value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxObstacle@NULL}" : "{PxObstacle@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxObstacle_MUserData_Get(self); }
            set { PInvoke.PxObstacle_MUserData_Set(self, value); }
        }
        public PxExtendedVec3 Pos {
            get { return PInvoke.PxObstacle_MPos_Get(self); }
            set { PInvoke.PxObstacle_MPos_Set(self, value); }
        }
        public PxQuat Rot {
            get { return PInvoke.PxObstacle_MRot_Get(self); }
            set { PInvoke.PxObstacle_MRot_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacle_GetType(self);
        }
    }
    public partial struct PxBoxObstacle {
        internal readonly IntPtr self;
        internal PxBoxObstacle (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxBoxObstacle value) { return value.self; }
        public static explicit operator PxBoxObstacle(IntPtr value) { return new PxBoxObstacle(value); }
        public static implicit operator Boolean(PxBoxObstacle value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxBoxObstacle@NULL}" : "{PxBoxObstacle@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxBoxObstacle_MUserData_Get(self); }
            set { PInvoke.PxBoxObstacle_MUserData_Set(self, value); }
        }
        public PxExtendedVec3 Pos {
            get { return PInvoke.PxBoxObstacle_MPos_Get(self); }
            set { PInvoke.PxBoxObstacle_MPos_Set(self, value); }
        }
        public PxQuat Rot {
            get { return PInvoke.PxBoxObstacle_MRot_Get(self); }
            set { PInvoke.PxBoxObstacle_MRot_Set(self, value); }
        }
        public PxVec3 HalfExtents {
            get { return PInvoke.PxBoxObstacle_MHalfExtents_Get(self); }
            set { PInvoke.PxBoxObstacle_MHalfExtents_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxBoxObstacle_GetType(self);
        }
        public static implicit operator PxObstacle (PxBoxObstacle value) { return new PxObstacle(PInvoke.CAST_PxBoxObstacle_TO_PxObstacle(value.self)); }
        public static explicit operator PxBoxObstacle (PxObstacle value) { return new PxBoxObstacle(PInvoke.CAST_PxObstacle_TO_PxBoxObstacle(value.self)); }
    }
    public partial struct PxCapsuleObstacle {
        internal readonly IntPtr self;
        internal PxCapsuleObstacle (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxCapsuleObstacle value) { return value.self; }
        public static explicit operator PxCapsuleObstacle(IntPtr value) { return new PxCapsuleObstacle(value); }
        public static implicit operator Boolean(PxCapsuleObstacle value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxCapsuleObstacle@NULL}" : "{PxCapsuleObstacle@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxCapsuleObstacle_MUserData_Get(self); }
            set { PInvoke.PxCapsuleObstacle_MUserData_Set(self, value); }
        }
        public PxExtendedVec3 Pos {
            get { return PInvoke.PxCapsuleObstacle_MPos_Get(self); }
            set { PInvoke.PxCapsuleObstacle_MPos_Set(self, value); }
        }
        public PxQuat Rot {
            get { return PInvoke.PxCapsuleObstacle_MRot_Get(self); }
            set { PInvoke.PxCapsuleObstacle_MRot_Set(self, value); }
        }
        public PxReal HalfHeight {
            get { return PInvoke.PxCapsuleObstacle_MHalfHeight_Get(self); }
            set { PInvoke.PxCapsuleObstacle_MHalfHeight_Set(self, value); }
        }
        public PxReal Radius {
            get { return PInvoke.PxCapsuleObstacle_MRadius_Get(self); }
            set { PInvoke.PxCapsuleObstacle_MRadius_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxCapsuleObstacle_GetType(self);
        }
        public static implicit operator PxObstacle (PxCapsuleObstacle value) { return new PxObstacle(PInvoke.CAST_PxCapsuleObstacle_TO_PxObstacle(value.self)); }
        public static explicit operator PxCapsuleObstacle (PxObstacle value) { return new PxCapsuleObstacle(PInvoke.CAST_PxObstacle_TO_PxCapsuleObstacle(value.self)); }
    }
    public partial struct PxObstacleContext {
        internal readonly IntPtr self;
        internal PxObstacleContext (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxObstacleContext value) { return value.self; }
        public static explicit operator PxObstacleContext(IntPtr value) { return new PxObstacleContext(value); }
        public static implicit operator Boolean(PxObstacleContext value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxObstacleContext@NULL}" : "{PxObstacleContext@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxObstacleContext_Release(self);
        }
        public PxControllerManager GetControllerManager () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_GetControllerManager(self);
        }
        public ObstacleHandle AddObstacle (PxObstacle obstacle) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_AddObstacle(self, obstacle);
        }
        public bool RemoveObstacle (ObstacleHandle handle) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_RemoveObstacle(self, handle);
        }
        public bool UpdateObstacle (ObstacleHandle handle, PxObstacle obstacle) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_UpdateObstacle(self, handle, obstacle);
        }
        public PxU32 GetNbObstacles () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_GetNbObstacles(self);
        }
        public PxObstacle GetObstacle (PxU32 i) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_GetObstacle(self, i);
        }
        public PxObstacle GetObstacleByHandle (ObstacleHandle handle) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxObstacleContext_GetObstacleByHandle(self, handle);
        }
    }
    public partial struct PxInputStream {
        internal readonly IntPtr self;
        internal PxInputStream (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxInputStream value) { return value.self; }
        public static explicit operator PxInputStream(IntPtr value) { return new PxInputStream(value); }
        public static implicit operator Boolean(PxInputStream value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxInputStream@NULL}" : "{PxInputStream@" + NativePtr + "}"; }
        public PxU32 Read (IntPtr dest, PxU32 count) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxInputStream_Read(self, dest, count);
        }
    }
    public partial struct PxOutputStream {
        internal readonly IntPtr self;
        internal PxOutputStream (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxOutputStream value) { return value.self; }
        public static explicit operator PxOutputStream(IntPtr value) { return new PxOutputStream(value); }
        public static implicit operator Boolean(PxOutputStream value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxOutputStream@NULL}" : "{PxOutputStream@" + NativePtr + "}"; }
        public PxU32 Write (IntPtr src, PxU32 count) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxOutputStream_Write(self, src, count);
        }
    }
    public partial struct PxD6Joint {
        internal readonly IntPtr self;
        internal PxD6Joint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxD6Joint value) { return value.self; }
        public static explicit operator PxD6Joint(IntPtr value) { return new PxD6Joint(value); }
        public static implicit operator Boolean(PxD6Joint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxD6Joint@NULL}" : "{PxD6Joint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxD6Joint_UserData_Get(self); }
            set { PInvoke.PxD6Joint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetScene(self);
        }
        public void SetMotion (PxD6Axis axis, PxD6Motion type) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetMotion(self, axis, type);
        }
        public PxD6Motion GetMotion (PxD6Axis axis) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetMotion(self, axis);
        }
        public PxReal GetTwist () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetTwist(self);
        }
        public PxReal GetSwingYAngle () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetSwingYAngle(self);
        }
        public PxReal GetSwingZAngle () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetSwingZAngle(self);
        }
        public void SetLinearLimit (PxJointLinearLimit limit) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetLinearLimit(self, limit);
        }
        public PxJointLinearLimit GetLinearLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetLinearLimit(self);
        }
        public void SetTwistLimit (PxJointAngularLimitPair limit) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetTwistLimit(self, limit);
        }
        public PxJointAngularLimitPair GetTwistLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetTwistLimit(self);
        }
        public void SetSwingLimit (PxJointLimitCone limit) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetSwingLimit(self, limit);
        }
        public PxJointLimitCone GetSwingLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetSwingLimit(self);
        }
        public void SetDrive (PxD6Drive index, PxD6JointDrive drive) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetDrive(self, index, drive);
        }
        public PxD6JointDrive GetDrive (PxD6Drive index) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetDrive(self, index);
        }
        public void SetDrivePosition (PxTransform pose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetDrivePosition(self, pose);
        }
        public PxTransform GetDrivePosition () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetDrivePosition(self);
        }
        public void SetDriveVelocity (PxVec3 linear, PxVec3 angular) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetDriveVelocity(self, linear, angular);
        }
        public void GetDriveVelocity (ref PxVec3 linear, ref PxVec3 angular) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_GetDriveVelocity(self, ref linear, ref angular);
        }
        public void SetProjectionLinearTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetProjectionLinearTolerance(self, tolerance);
        }
        public PxReal GetProjectionLinearTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetProjectionLinearTolerance(self);
        }
        public void SetProjectionAngularTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxD6Joint_SetProjectionAngularTolerance(self, tolerance);
        }
        public PxReal GetProjectionAngularTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetProjectionAngularTolerance(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxD6Joint_GetConcreteTypeName(self);
        }
        public static implicit operator PxJoint (PxD6Joint value) { return new PxJoint(PInvoke.CAST_PxD6Joint_TO_PxJoint(value.self)); }
        public static explicit operator PxD6Joint (PxJoint value) { return new PxD6Joint(PInvoke.CAST_PxJoint_TO_PxD6Joint(value.self)); }
    }
    public partial struct PxDistanceJoint {
        internal readonly IntPtr self;
        internal PxDistanceJoint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxDistanceJoint value) { return value.self; }
        public static explicit operator PxDistanceJoint(IntPtr value) { return new PxDistanceJoint(value); }
        public static implicit operator Boolean(PxDistanceJoint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxDistanceJoint@NULL}" : "{PxDistanceJoint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxDistanceJoint_UserData_Get(self); }
            set { PInvoke.PxDistanceJoint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetScene(self);
        }
        public PxReal GetDistance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetDistance(self);
        }
        public void SetMinDistance (PxReal distance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetMinDistance(self, distance);
        }
        public PxReal GetMinDistance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetMinDistance(self);
        }
        public void SetMaxDistance (PxReal distance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetMaxDistance(self, distance);
        }
        public PxReal GetMaxDistance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetMaxDistance(self);
        }
        public void SetTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetTolerance(self, tolerance);
        }
        public PxReal GetTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetTolerance(self);
        }
        public void SetStiffness (PxReal stiffness) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetStiffness(self, stiffness);
        }
        public PxReal GetStiffness () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetStiffness(self);
        }
        public void SetDamping (PxReal damping) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetDamping(self, damping);
        }
        public PxReal GetDamping () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetDamping(self);
        }
        public void SetDistanceJointFlags (PxDistanceJointFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetDistanceJointFlags(self, flags);
        }
        public void SetDistanceJointFlag (PxDistanceJointFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxDistanceJoint_SetDistanceJointFlag(self, flag, value);
        }
        public PxDistanceJointFlag GetDistanceJointFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetDistanceJointFlags(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxDistanceJoint_GetConcreteTypeName(self);
        }
        public static implicit operator PxJoint (PxDistanceJoint value) { return new PxJoint(PInvoke.CAST_PxDistanceJoint_TO_PxJoint(value.self)); }
        public static explicit operator PxDistanceJoint (PxJoint value) { return new PxDistanceJoint(PInvoke.CAST_PxJoint_TO_PxDistanceJoint(value.self)); }
    }
    public partial struct PxFixedJoint {
        internal readonly IntPtr self;
        internal PxFixedJoint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxFixedJoint value) { return value.self; }
        public static explicit operator PxFixedJoint(IntPtr value) { return new PxFixedJoint(value); }
        public static implicit operator Boolean(PxFixedJoint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxFixedJoint@NULL}" : "{PxFixedJoint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxFixedJoint_UserData_Get(self); }
            set { PInvoke.PxFixedJoint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetScene(self);
        }
        public void SetProjectionLinearTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetProjectionLinearTolerance(self, tolerance);
        }
        public PxReal GetProjectionLinearTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetProjectionLinearTolerance(self);
        }
        public void SetProjectionAngularTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFixedJoint_SetProjectionAngularTolerance(self, tolerance);
        }
        public PxReal GetProjectionAngularTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetProjectionAngularTolerance(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFixedJoint_GetConcreteTypeName(self);
        }
        public static implicit operator PxJoint (PxFixedJoint value) { return new PxJoint(PInvoke.CAST_PxFixedJoint_TO_PxJoint(value.self)); }
        public static explicit operator PxFixedJoint (PxJoint value) { return new PxFixedJoint(PInvoke.CAST_PxJoint_TO_PxFixedJoint(value.self)); }
    }
    public partial struct PxJoint {
        internal readonly IntPtr self;
        internal PxJoint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxJoint value) { return value.self; }
        public static explicit operator PxJoint(IntPtr value) { return new PxJoint(value); }
        public static implicit operator Boolean(PxJoint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxJoint@NULL}" : "{PxJoint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxJoint_UserData_Get(self); }
            set { PInvoke.PxJoint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxJoint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxJoint_GetScene(self);
        }
    }
    public partial struct PxPrismaticJoint {
        internal readonly IntPtr self;
        internal PxPrismaticJoint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxPrismaticJoint value) { return value.self; }
        public static explicit operator PxPrismaticJoint(IntPtr value) { return new PxPrismaticJoint(value); }
        public static implicit operator Boolean(PxPrismaticJoint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxPrismaticJoint@NULL}" : "{PxPrismaticJoint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxPrismaticJoint_UserData_Get(self); }
            set { PInvoke.PxPrismaticJoint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetScene(self);
        }
        public PxReal GetPosition () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetPosition(self);
        }
        public PxReal GetVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetVelocity(self);
        }
        public void SetLimit (PxJointLinearLimitPair arg0) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetLimit(self, arg0);
        }
        public PxJointLinearLimitPair GetLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetLimit(self);
        }
        public void SetPrismaticJointFlags (PxPrismaticJointFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetPrismaticJointFlags(self, flags);
        }
        public void SetPrismaticJointFlag (PxPrismaticJointFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetPrismaticJointFlag(self, flag, value);
        }
        public PxPrismaticJointFlag GetPrismaticJointFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetPrismaticJointFlags(self);
        }
        public void SetProjectionLinearTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetProjectionLinearTolerance(self, tolerance);
        }
        public PxReal GetProjectionLinearTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetProjectionLinearTolerance(self);
        }
        public void SetProjectionAngularTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPrismaticJoint_SetProjectionAngularTolerance(self, tolerance);
        }
        public PxReal GetProjectionAngularTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetProjectionAngularTolerance(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPrismaticJoint_GetConcreteTypeName(self);
        }
        public static implicit operator PxJoint (PxPrismaticJoint value) { return new PxJoint(PInvoke.CAST_PxPrismaticJoint_TO_PxJoint(value.self)); }
        public static explicit operator PxPrismaticJoint (PxJoint value) { return new PxPrismaticJoint(PInvoke.CAST_PxJoint_TO_PxPrismaticJoint(value.self)); }
    }
    public partial struct PxRevoluteJoint {
        internal readonly IntPtr self;
        internal PxRevoluteJoint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxRevoluteJoint value) { return value.self; }
        public static explicit operator PxRevoluteJoint(IntPtr value) { return new PxRevoluteJoint(value); }
        public static implicit operator Boolean(PxRevoluteJoint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxRevoluteJoint@NULL}" : "{PxRevoluteJoint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxRevoluteJoint_UserData_Get(self); }
            set { PInvoke.PxRevoluteJoint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetScene(self);
        }
        public PxReal GetAngle () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetAngle(self);
        }
        public PxReal GetVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetVelocity(self);
        }
        public void SetLimit (PxJointAngularLimitPair limits) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetLimit(self, limits);
        }
        public PxJointAngularLimitPair GetLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetLimit(self);
        }
        public void SetDriveVelocity (PxReal velocity) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetDriveVelocity(self, velocity);
        }
        public PxReal GetDriveVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetDriveVelocity(self);
        }
        public void SetDriveForceLimit (PxReal limit) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetDriveForceLimit(self, limit);
        }
        public PxReal GetDriveForceLimit () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetDriveForceLimit(self);
        }
        public void SetDriveGearRatio (PxReal ratio) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetDriveGearRatio(self, ratio);
        }
        public PxReal GetDriveGearRatio () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetDriveGearRatio(self);
        }
        public void SetRevoluteJointFlags (PxRevoluteJointFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetRevoluteJointFlags(self, flags);
        }
        public void SetRevoluteJointFlag (PxRevoluteJointFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetRevoluteJointFlag(self, flag, value);
        }
        public PxRevoluteJointFlag GetRevoluteJointFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetRevoluteJointFlags(self);
        }
        public void SetProjectionLinearTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetProjectionLinearTolerance(self, tolerance);
        }
        public PxReal GetProjectionLinearTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetProjectionLinearTolerance(self);
        }
        public void SetProjectionAngularTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRevoluteJoint_SetProjectionAngularTolerance(self, tolerance);
        }
        public PxReal GetProjectionAngularTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetProjectionAngularTolerance(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxRevoluteJoint_GetConcreteTypeName(self);
        }
        public static implicit operator PxJoint (PxRevoluteJoint value) { return new PxJoint(PInvoke.CAST_PxRevoluteJoint_TO_PxJoint(value.self)); }
        public static explicit operator PxRevoluteJoint (PxJoint value) { return new PxRevoluteJoint(PInvoke.CAST_PxJoint_TO_PxRevoluteJoint(value.self)); }
    }
    public partial struct PxSphericalJoint {
        internal readonly IntPtr self;
        internal PxSphericalJoint (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxSphericalJoint value) { return value.self; }
        public static explicit operator PxSphericalJoint(IntPtr value) { return new PxSphericalJoint(value); }
        public static implicit operator Boolean(PxSphericalJoint value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxSphericalJoint@NULL}" : "{PxSphericalJoint@" + NativePtr + "}"; }
        public IntPtr UserData {
            get { return PInvoke.PxSphericalJoint_UserData_Get(self); }
            set { PInvoke.PxSphericalJoint_UserData_Set(self, value); }
        }
        public void SetActors (PxRigidActor actor0, PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetActors(self, actor0, actor1);
        }
        public void GetActors (ref PxRigidActor actor0, ref PxRigidActor actor1) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_GetActors(self, ref actor0, ref actor1);
        }
        public void SetLocalPose (PxJointActorIndex actor, PxTransform localPose) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetLocalPose(self, actor, localPose);
        }
        public PxTransform GetLocalPose (PxJointActorIndex actor) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetLocalPose(self, actor);
        }
        public PxTransform GetRelativeTransform () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetRelativeTransform(self);
        }
        public PxVec3 GetRelativeLinearVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetRelativeLinearVelocity(self);
        }
        public PxVec3 GetRelativeAngularVelocity () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetRelativeAngularVelocity(self);
        }
        public void SetBreakForce (PxReal force, PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetBreakForce(self, force, torque);
        }
        public void GetBreakForce (ref PxReal force, ref PxReal torque) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_GetBreakForce(self, ref force, ref torque);
        }
        public void SetConstraintFlags (PxConstraintFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetConstraintFlags(self, flags);
        }
        public void SetConstraintFlag (PxConstraintFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetConstraintFlag(self, flag, value);
        }
        public PxConstraintFlag GetConstraintFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetConstraintFlags(self);
        }
        public void SetInvMassScale0 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetInvMassScale0(self, invMassScale);
        }
        public PxReal GetInvMassScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetInvMassScale0(self);
        }
        public void SetInvInertiaScale0 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetInvInertiaScale0(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale0 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetInvInertiaScale0(self);
        }
        public void SetInvMassScale1 (PxReal invMassScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetInvMassScale1(self, invMassScale);
        }
        public PxReal GetInvMassScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetInvMassScale1(self);
        }
        public void SetInvInertiaScale1 (PxReal invInertiaScale) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetInvInertiaScale1(self, invInertiaScale);
        }
        public PxReal GetInvInertiaScale1 () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetInvInertiaScale1(self);
        }
        public PxConstraint GetConstraint () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetConstraint(self);
        }
        public void SetName (string name) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetName(self, name);
        }
        public string GetName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetName(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_Release(self);
        }
        public PxScene GetScene () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetScene(self);
        }
        public PxJointLimitCone GetLimitCone () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetLimitCone(self);
        }
        public void SetLimitCone (PxJointLimitCone limit) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetLimitCone(self, limit);
        }
        public void SetSphericalJointFlags (PxSphericalJointFlag flags) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetSphericalJointFlags(self, flags);
        }
        public void SetSphericalJointFlag (PxSphericalJointFlag flag, bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetSphericalJointFlag(self, flag, value);
        }
        public PxSphericalJointFlag GetSphericalJointFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetSphericalJointFlags(self);
        }
        public void SetProjectionLinearTolerance (PxReal tolerance) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphericalJoint_SetProjectionLinearTolerance(self, tolerance);
        }
        public PxReal GetProjectionLinearTolerance () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetProjectionLinearTolerance(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphericalJoint_GetConcreteTypeName(self);
        }
        public static implicit operator PxJoint (PxSphericalJoint value) { return new PxJoint(PInvoke.CAST_PxSphericalJoint_TO_PxJoint(value.self)); }
        public static explicit operator PxSphericalJoint (PxJoint value) { return new PxSphericalJoint(PInvoke.CAST_PxJoint_TO_PxSphericalJoint(value.self)); }
    }
    public partial struct PxFoundation {
        // Ignored Methods
        // getAllocator
        // getAllocatorCallback
        
        internal readonly IntPtr self;
        internal PxFoundation (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxFoundation value) { return value.self; }
        public static explicit operator PxFoundation(IntPtr value) { return new PxFoundation(value); }
        public static implicit operator Boolean(PxFoundation value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxFoundation@NULL}" : "{PxFoundation@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFoundation_Release(self);
        }
        public PxErrorCallback GetErrorCallback () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFoundation_GetErrorCallback(self);
        }
        public void SetErrorLevel (PxErrorCode mask) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFoundation_SetErrorLevel(self, mask);
        }
        public PxErrorCode GetErrorLevel () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFoundation_GetErrorLevel(self);
        }
        public bool GetReportAllocationNames () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxFoundation_GetReportAllocationNames(self);
        }
        public void SetReportAllocationNames (bool value) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxFoundation_SetReportAllocationNames(self, value);
        }
    }
    public partial struct PxPlane : System.IDisposable {
        internal readonly IntPtr self;
        internal PxPlane (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxPlane value) { return value.self; }
        public static explicit operator PxPlane(IntPtr value) { return new PxPlane(value); }
        public static implicit operator Boolean(PxPlane value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxPlane@NULL}" : "{PxPlane@" + NativePtr + "}"; }
        public PxVec3 N {
            get { return PInvoke.PxPlane_N_Get(self); }
            set { PInvoke.PxPlane_N_Set(self, value); }
        }
        public PxReal D {
            get { return PInvoke.PxPlane_D_Get(self); }
            set { PInvoke.PxPlane_D_Set(self, value); }
        }
        public PxReal Distance (PxVec3 p) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPlane_Distance(self, p);
        }
        public bool Contains (PxVec3 p) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPlane_Contains(self, p);
        }
        public PxVec3 Project (PxVec3 p) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPlane_Project(self, p);
        }
        public PxVec3 PointInPlane () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPlane_PointInPlane(self);
        }
        public void Normalize () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPlane_Normalize(self);
        }
        public static PxPlane New () { 
            return PInvoke.PxPlane_New0();
        }
        public static PxPlane New (PxVec3 normal, PxReal distance) { 
            return PInvoke.PxPlane_New1(normal, distance);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxPlane_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
    }
    public partial struct PxBoxGeometry : System.IDisposable {
        internal readonly IntPtr self;
        internal PxBoxGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxBoxGeometry value) { return value.self; }
        public static explicit operator PxBoxGeometry(IntPtr value) { return new PxBoxGeometry(value); }
        public static implicit operator Boolean(PxBoxGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxBoxGeometry@NULL}" : "{PxBoxGeometry@" + NativePtr + "}"; }
        public PxVec3 HalfExtents {
            get { return PInvoke.PxBoxGeometry_HalfExtents_Get(self); }
            set { PInvoke.PxBoxGeometry_HalfExtents_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxBoxGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxBoxGeometry_IsValid(self);
        }
        public static PxBoxGeometry New (PxReal arg0, PxReal arg1, PxReal arg2) { 
            return PInvoke.PxBoxGeometry_New3(arg0, arg1, arg2);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxBoxGeometry_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxGeometry (PxBoxGeometry value) { return new PxGeometry(PInvoke.CAST_PxBoxGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxBoxGeometry (PxGeometry value) { return new PxBoxGeometry(PInvoke.CAST_PxGeometry_TO_PxBoxGeometry(value.self)); }
    }
    public partial struct PxCapsuleGeometry : System.IDisposable {
        internal readonly IntPtr self;
        internal PxCapsuleGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxCapsuleGeometry value) { return value.self; }
        public static explicit operator PxCapsuleGeometry(IntPtr value) { return new PxCapsuleGeometry(value); }
        public static implicit operator Boolean(PxCapsuleGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxCapsuleGeometry@NULL}" : "{PxCapsuleGeometry@" + NativePtr + "}"; }
        public PxReal Radius {
            get { return PInvoke.PxCapsuleGeometry_Radius_Get(self); }
            set { PInvoke.PxCapsuleGeometry_Radius_Set(self, value); }
        }
        public PxReal HalfHeight {
            get { return PInvoke.PxCapsuleGeometry_HalfHeight_Get(self); }
            set { PInvoke.PxCapsuleGeometry_HalfHeight_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxCapsuleGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxCapsuleGeometry_IsValid(self);
        }
        public static PxCapsuleGeometry New (PxReal arg0, PxReal arg1) { 
            return PInvoke.PxCapsuleGeometry_New2(arg0, arg1);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxCapsuleGeometry_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxGeometry (PxCapsuleGeometry value) { return new PxGeometry(PInvoke.CAST_PxCapsuleGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxCapsuleGeometry (PxGeometry value) { return new PxCapsuleGeometry(PInvoke.CAST_PxGeometry_TO_PxCapsuleGeometry(value.self)); }
    }
    public partial struct PxConvexMesh {
        // Ignored Methods
        // getVertices
        // getIndexBuffer
        
        internal readonly IntPtr self;
        internal PxConvexMesh (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxConvexMesh value) { return value.self; }
        public static explicit operator PxConvexMesh(IntPtr value) { return new PxConvexMesh(value); }
        public static implicit operator Boolean(PxConvexMesh value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxConvexMesh@NULL}" : "{PxConvexMesh@" + NativePtr + "}"; }
        public PxU32 GetNbVertices () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMesh_GetNbVertices(self);
        }
        public PxU32 GetNbPolygons () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMesh_GetNbPolygons(self);
        }
        public bool GetPolygonData (PxU32 index, ref PxHullPolygon data) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMesh_GetPolygonData(self, index, ref data);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConvexMesh_Release(self);
        }
        public PxU32 GetReferenceCount () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMesh_GetReferenceCount(self);
        }
        public void GetMassInformation (ref PxReal mass, ref PxMat33 localInertia, ref PxVec3 localCenterOfMass) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxConvexMesh_GetMassInformation(self, ref mass, ref localInertia, ref localCenterOfMass);
        }
        public PxBounds3 GetLocalBounds () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMesh_GetLocalBounds(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMesh_GetConcreteTypeName(self);
        }
    }
    public partial struct PxConvexMeshGeometry {
        internal readonly IntPtr self;
        internal PxConvexMeshGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxConvexMeshGeometry value) { return value.self; }
        public static explicit operator PxConvexMeshGeometry(IntPtr value) { return new PxConvexMeshGeometry(value); }
        public static implicit operator Boolean(PxConvexMeshGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxConvexMeshGeometry@NULL}" : "{PxConvexMeshGeometry@" + NativePtr + "}"; }
        public PxMeshScale Scale {
            get { return PInvoke.PxConvexMeshGeometry_Scale_Get(self); }
            set { PInvoke.PxConvexMeshGeometry_Scale_Set(self, value); }
        }
        public PxConvexMesh ConvexMesh {
            get { return PInvoke.PxConvexMeshGeometry_ConvexMesh_Get(self); }
            set { PInvoke.PxConvexMeshGeometry_ConvexMesh_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMeshGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxConvexMeshGeometry_IsValid(self);
        }
        public static implicit operator PxGeometry (PxConvexMeshGeometry value) { return new PxGeometry(PInvoke.CAST_PxConvexMeshGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxConvexMeshGeometry (PxGeometry value) { return new PxConvexMeshGeometry(PInvoke.CAST_PxGeometry_TO_PxConvexMeshGeometry(value.self)); }
    }
    public partial struct PxGeometry {
        internal readonly IntPtr self;
        internal PxGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxGeometry value) { return value.self; }
        public static explicit operator PxGeometry(IntPtr value) { return new PxGeometry(value); }
        public static implicit operator Boolean(PxGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxGeometry@NULL}" : "{PxGeometry@" + NativePtr + "}"; }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxGeometry_GetType(self);
        }
    }
    public partial struct PxHeightField {
        internal readonly IntPtr self;
        internal PxHeightField (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxHeightField value) { return value.self; }
        public static explicit operator PxHeightField(IntPtr value) { return new PxHeightField(value); }
        public static implicit operator Boolean(PxHeightField value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxHeightField@NULL}" : "{PxHeightField@" + NativePtr + "}"; }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxHeightField_Release(self);
        }
        public PxU32 SaveCells (IntPtr destBuffer, PxU32 destBufferSize) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_SaveCells(self, destBuffer, destBufferSize);
        }
        public bool ModifySamples (PxI32 startCol, PxI32 startRow, PxHeightFieldDesc subfieldDesc, bool shrinkBounds) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_ModifySamples(self, startCol, startRow, subfieldDesc, shrinkBounds);
        }
        public PxU32 GetNbRows () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetNbRows(self);
        }
        public PxU32 GetNbColumns () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetNbColumns(self);
        }
        public PxHeightFieldFormat GetFormat () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetFormat(self);
        }
        public PxU32 GetSampleStride () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetSampleStride(self);
        }
        public PxReal GetThickness () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetThickness(self);
        }
        public PxReal GetConvexEdgeThreshold () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetConvexEdgeThreshold(self);
        }
        public PxHeightFieldFlag GetFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetFlags(self);
        }
        public PxReal GetHeight (PxReal x, PxReal z) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetHeight(self, x, z);
        }
        public PxU32 GetReferenceCount () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetReferenceCount(self);
        }
        public PxMaterialTableIndex GetTriangleMaterialIndex (PxTriangleID triangleIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetTriangleMaterialIndex(self, triangleIndex);
        }
        public PxVec3 GetTriangleNormal (PxTriangleID triangleIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetTriangleNormal(self, triangleIndex);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightField_GetConcreteTypeName(self);
        }
    }
    public partial struct PxHeightFieldDesc {
        internal readonly IntPtr self;
        internal PxHeightFieldDesc (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxHeightFieldDesc value) { return value.self; }
        public static explicit operator PxHeightFieldDesc(IntPtr value) { return new PxHeightFieldDesc(value); }
        public static implicit operator Boolean(PxHeightFieldDesc value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxHeightFieldDesc@NULL}" : "{PxHeightFieldDesc@" + NativePtr + "}"; }
        public PxU32 NbRows {
            get { return PInvoke.PxHeightFieldDesc_NbRows_Get(self); }
            set { PInvoke.PxHeightFieldDesc_NbRows_Set(self, value); }
        }
        public PxU32 NbColumns {
            get { return PInvoke.PxHeightFieldDesc_NbColumns_Get(self); }
            set { PInvoke.PxHeightFieldDesc_NbColumns_Set(self, value); }
        }
        public PxHeightFieldFormat Format {
            get { return PInvoke.PxHeightFieldDesc_Format_Get(self); }
            set { PInvoke.PxHeightFieldDesc_Format_Set(self, value); }
        }
        public PxStridedData Samples {
            get { return PInvoke.PxHeightFieldDesc_Samples_Get(self); }
            set { PInvoke.PxHeightFieldDesc_Samples_Set(self, value); }
        }
        public PxReal Thickness {
            get { return PInvoke.PxHeightFieldDesc_Thickness_Get(self); }
            set { PInvoke.PxHeightFieldDesc_Thickness_Set(self, value); }
        }
        public PxReal ConvexEdgeThreshold {
            get { return PInvoke.PxHeightFieldDesc_ConvexEdgeThreshold_Get(self); }
            set { PInvoke.PxHeightFieldDesc_ConvexEdgeThreshold_Set(self, value); }
        }
        public PxHeightFieldFlag Flags {
            get { return PInvoke.PxHeightFieldDesc_Flags_Get(self); }
            set { PInvoke.PxHeightFieldDesc_Flags_Set(self, value); }
        }
        public void SetToDefault () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxHeightFieldDesc_SetToDefault(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightFieldDesc_IsValid(self);
        }
    }
    public partial struct PxHeightFieldGeometry {
        internal readonly IntPtr self;
        internal PxHeightFieldGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxHeightFieldGeometry value) { return value.self; }
        public static explicit operator PxHeightFieldGeometry(IntPtr value) { return new PxHeightFieldGeometry(value); }
        public static implicit operator Boolean(PxHeightFieldGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxHeightFieldGeometry@NULL}" : "{PxHeightFieldGeometry@" + NativePtr + "}"; }
        public PxHeightField HeightField {
            get { return PInvoke.PxHeightFieldGeometry_HeightField_Get(self); }
            set { PInvoke.PxHeightFieldGeometry_HeightField_Set(self, value); }
        }
        public PxReal HeightScale {
            get { return PInvoke.PxHeightFieldGeometry_HeightScale_Get(self); }
            set { PInvoke.PxHeightFieldGeometry_HeightScale_Set(self, value); }
        }
        public PxReal RowScale {
            get { return PInvoke.PxHeightFieldGeometry_RowScale_Get(self); }
            set { PInvoke.PxHeightFieldGeometry_RowScale_Set(self, value); }
        }
        public PxReal ColumnScale {
            get { return PInvoke.PxHeightFieldGeometry_ColumnScale_Get(self); }
            set { PInvoke.PxHeightFieldGeometry_ColumnScale_Set(self, value); }
        }
        public PxMeshGeometryFlag HeightFieldFlags {
            get { return PInvoke.PxHeightFieldGeometry_HeightFieldFlags_Get(self); }
            set { PInvoke.PxHeightFieldGeometry_HeightFieldFlags_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightFieldGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxHeightFieldGeometry_IsValid(self);
        }
        public static implicit operator PxGeometry (PxHeightFieldGeometry value) { return new PxGeometry(PInvoke.CAST_PxHeightFieldGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxHeightFieldGeometry (PxGeometry value) { return new PxHeightFieldGeometry(PInvoke.CAST_PxGeometry_TO_PxHeightFieldGeometry(value.self)); }
    }
    public partial struct PxPlaneGeometry {
        internal readonly IntPtr self;
        internal PxPlaneGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxPlaneGeometry value) { return value.self; }
        public static explicit operator PxPlaneGeometry(IntPtr value) { return new PxPlaneGeometry(value); }
        public static implicit operator Boolean(PxPlaneGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxPlaneGeometry@NULL}" : "{PxPlaneGeometry@" + NativePtr + "}"; }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPlaneGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxPlaneGeometry_IsValid(self);
        }
        public static implicit operator PxGeometry (PxPlaneGeometry value) { return new PxGeometry(PInvoke.CAST_PxPlaneGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxPlaneGeometry (PxGeometry value) { return new PxPlaneGeometry(PInvoke.CAST_PxGeometry_TO_PxPlaneGeometry(value.self)); }
    }
    public partial struct PxSphereGeometry : System.IDisposable {
        internal readonly IntPtr self;
        internal PxSphereGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxSphereGeometry value) { return value.self; }
        public static explicit operator PxSphereGeometry(IntPtr value) { return new PxSphereGeometry(value); }
        public static implicit operator Boolean(PxSphereGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxSphereGeometry@NULL}" : "{PxSphereGeometry@" + NativePtr + "}"; }
        public PxReal Radius {
            get { return PInvoke.PxSphereGeometry_Radius_Get(self); }
            set { PInvoke.PxSphereGeometry_Radius_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphereGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxSphereGeometry_IsValid(self);
        }
        public static PxSphereGeometry New (PxReal arg0) { 
            return PInvoke.PxSphereGeometry_New1(arg0);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxSphereGeometry_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
        public static implicit operator PxGeometry (PxSphereGeometry value) { return new PxGeometry(PInvoke.CAST_PxSphereGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxSphereGeometry (PxGeometry value) { return new PxSphereGeometry(PInvoke.CAST_PxGeometry_TO_PxSphereGeometry(value.self)); }
    }
    public partial struct PxTriangleMesh {
        // Ignored Methods
        // getVertices
        // getTrianglesRemap
        
        internal readonly IntPtr self;
        internal PxTriangleMesh (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxTriangleMesh value) { return value.self; }
        public static explicit operator PxTriangleMesh(IntPtr value) { return new PxTriangleMesh(value); }
        public static implicit operator Boolean(PxTriangleMesh value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxTriangleMesh@NULL}" : "{PxTriangleMesh@" + NativePtr + "}"; }
        public PxU32 GetNbVertices () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetNbVertices(self);
        }
        public PxU32 GetNbTriangles () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetNbTriangles(self);
        }
        public IntPtr GetTriangles () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetTriangles(self);
        }
        public PxTriangleMeshFlag GetTriangleMeshFlags () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetTriangleMeshFlags(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxTriangleMesh_Release(self);
        }
        public PxMaterialTableIndex GetTriangleMaterialIndex (PxTriangleID triangleIndex) { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetTriangleMaterialIndex(self, triangleIndex);
        }
        public PxBounds3 GetLocalBounds () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetLocalBounds(self);
        }
        public PxU32 GetReferenceCount () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetReferenceCount(self);
        }
        public string GetConcreteTypeName () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMesh_GetConcreteTypeName(self);
        }
    }
    public partial struct PxTriangleMeshGeometry {
        internal readonly IntPtr self;
        internal PxTriangleMeshGeometry (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxTriangleMeshGeometry value) { return value.self; }
        public static explicit operator PxTriangleMeshGeometry(IntPtr value) { return new PxTriangleMeshGeometry(value); }
        public static implicit operator Boolean(PxTriangleMeshGeometry value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxTriangleMeshGeometry@NULL}" : "{PxTriangleMeshGeometry@" + NativePtr + "}"; }
        public PxMeshScale Scale {
            get { return PInvoke.PxTriangleMeshGeometry_Scale_Get(self); }
            set { PInvoke.PxTriangleMeshGeometry_Scale_Set(self, value); }
        }
        public PxMeshGeometryFlag MeshFlags {
            get { return PInvoke.PxTriangleMeshGeometry_MeshFlags_Get(self); }
            set { PInvoke.PxTriangleMeshGeometry_MeshFlags_Set(self, value); }
        }
        public PxTriangleMesh TriangleMesh {
            get { return PInvoke.PxTriangleMeshGeometry_TriangleMesh_Get(self); }
            set { PInvoke.PxTriangleMeshGeometry_TriangleMesh_Set(self, value); }
        }
        public PxGeometryType GetTypePx () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMeshGeometry_GetType(self);
        }
        public bool IsValid () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxTriangleMeshGeometry_IsValid(self);
        }
        public static implicit operator PxGeometry (PxTriangleMeshGeometry value) { return new PxGeometry(PInvoke.CAST_PxTriangleMeshGeometry_TO_PxGeometry(value.self)); }
        public static explicit operator PxTriangleMeshGeometry (PxGeometry value) { return new PxTriangleMeshGeometry(PInvoke.CAST_PxGeometry_TO_PxTriangleMeshGeometry(value.self)); }
    }
    public partial struct PxRaycastBuffer : System.IDisposable {
        internal readonly IntPtr self;
        internal PxRaycastBuffer (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxRaycastBuffer value) { return value.self; }
        public static explicit operator PxRaycastBuffer(IntPtr value) { return new PxRaycastBuffer(value); }
        public static implicit operator Boolean(PxRaycastBuffer value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxRaycastBuffer@NULL}" : "{PxRaycastBuffer@" + NativePtr + "}"; }
        public static IntPtr New (PxI32 size) { 
            return PInvoke.PxRaycastBuffer_New(size);
        }
        public void Delete () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxRaycastBuffer_Delete(self);
        }
        public void Dispose() { 
            Delete();
        }
    }
    public partial struct PxVisualDebuggerConnection : System.IDisposable {
        internal readonly IntPtr self;
        internal PxVisualDebuggerConnection (IntPtr _self) { self = _self; }
        
        public IntPtr NativePtr { get { return self; } }
        public bool IsNull { get { return self == IntPtr.Zero; } }
        
        public static implicit operator IntPtr(PxVisualDebuggerConnection value) { return value.self; }
        public static explicit operator PxVisualDebuggerConnection(IntPtr value) { return new PxVisualDebuggerConnection(value); }
        public static implicit operator Boolean(PxVisualDebuggerConnection value) { return value.self != IntPtr.Zero; }
        public override string ToString () { return IsNull ? "{PxVisualDebuggerConnection@NULL}" : "{PxVisualDebuggerConnection@" + NativePtr + "}"; }
        public void AddRef () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxVisualDebuggerConnection_AddRef(self);
        }
        public void Release () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxVisualDebuggerConnection_Release(self);
        }
        public void Disconnect () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxVisualDebuggerConnection_Disconnect(self);
        }
        public void Flush () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            PInvoke.PxVisualDebuggerConnection_Flush(self);
        }
        public bool IsConnected () { 
            #if DEBUG
            if (IsNull) throw new PxsNullPointerException();
            #endif
            return PInvoke.PxVisualDebuggerConnection_IsConnected(self);
        }
        public void Dispose() { 
            Release();
        }
    }
}
