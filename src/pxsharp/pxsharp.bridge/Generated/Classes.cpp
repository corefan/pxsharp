// File generated by ApiGen on 2013-12-17 15:11:31

#include "..\Common.h"


// PxArticulationDriveCache

// PxsErrorCallback
EXPORT_API PxErrorCallback* CAST_PxsErrorCallback_TO_PxErrorCallback(PxsErrorCallback* p) { return static_cast<PxErrorCallback*>(p); }
EXPORT_API PxsErrorCallback* CAST_PxErrorCallback_TO_PxsErrorCallback(PxErrorCallback* p) { return static_cast<PxsErrorCallback*>(p); }

// PxErrorCallback

// PxsBroadPhaseCallback
EXPORT_API PxBroadPhaseCallback* CAST_PxsBroadPhaseCallback_TO_PxBroadPhaseCallback(PxsBroadPhaseCallback* p) { return static_cast<PxBroadPhaseCallback*>(p); }
EXPORT_API PxsBroadPhaseCallback* CAST_PxBroadPhaseCallback_TO_PxsBroadPhaseCallback(PxBroadPhaseCallback* p) { return static_cast<PxsBroadPhaseCallback*>(p); }

// PxBroadPhaseCallback

// PxsControllerFilterCallback
EXPORT_API PxControllerFilterCallback* CAST_PxsControllerFilterCallback_TO_PxControllerFilterCallback(PxsControllerFilterCallback* p) { return static_cast<PxControllerFilterCallback*>(p); }
EXPORT_API PxsControllerFilterCallback* CAST_PxControllerFilterCallback_TO_PxsControllerFilterCallback(PxControllerFilterCallback* p) { return static_cast<PxsControllerFilterCallback*>(p); }

// PxControllerFilterCallback

// PxsSimulationEventCallback
EXPORT_API PxSimulationEventCallback* CAST_PxsSimulationEventCallback_TO_PxSimulationEventCallback(PxsSimulationEventCallback* p) { return static_cast<PxSimulationEventCallback*>(p); }
EXPORT_API PxsSimulationEventCallback* CAST_PxSimulationEventCallback_TO_PxsSimulationEventCallback(PxSimulationEventCallback* p) { return static_cast<PxsSimulationEventCallback*>(p); }

// PxSimulationEventCallback

// PxsQueryFilterCallback
EXPORT_API PxQueryFilterCallback* CAST_PxsQueryFilterCallback_TO_PxQueryFilterCallback(PxsQueryFilterCallback* p) { return static_cast<PxQueryFilterCallback*>(p); }
EXPORT_API PxsQueryFilterCallback* CAST_PxQueryFilterCallback_TO_PxsQueryFilterCallback(PxQueryFilterCallback* p) { return static_cast<PxsQueryFilterCallback*>(p); }

// PxQueryFilterCallback

// PxsRaycastFilterCallback
EXPORT_API PxQueryFilterCallback* CAST_PxsRaycastFilterCallback_TO_PxQueryFilterCallback(PxsRaycastFilterCallback* p) { return static_cast<PxQueryFilterCallback*>(p); }
EXPORT_API PxsRaycastFilterCallback* CAST_PxQueryFilterCallback_TO_PxsRaycastFilterCallback(PxQueryFilterCallback* p) { return static_cast<PxsRaycastFilterCallback*>(p); }

// PxsSweepFilterCallback
EXPORT_API PxQueryFilterCallback* CAST_PxsSweepFilterCallback_TO_PxQueryFilterCallback(PxsSweepFilterCallback* p) { return static_cast<PxQueryFilterCallback*>(p); }
EXPORT_API PxsSweepFilterCallback* CAST_PxQueryFilterCallback_TO_PxsSweepFilterCallback(PxQueryFilterCallback* p) { return static_cast<PxsSweepFilterCallback*>(p); }

// PxActor
EXPORT_API void* PxActor_UserData_Get(PxActor* self) { return self->userData; }
EXPORT_API void PxActor_UserData_Set(PxActor* self, void* value) { self->userData = value; }
EXPORT_API void PxActor_Release(PxActor* self) {
    self->release();
}
EXPORT_API PxActorType::Enum PxActor_GetType(PxActor* self) {
    return self->getType();
}
EXPORT_API PxScene* PxActor_GetScene(PxActor* self) {
    return self->getScene();
}
EXPORT_API void PxActor_SetName(PxActor* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxActor_GetName(PxActor* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxActor_GetWorldBounds(PxActor* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API void PxActor_SetActorFlag(PxActor* self, PxActorFlag::Enum flag, bool value) {
    self->setActorFlag(flag, value);
}
EXPORT_API void PxActor_SetActorFlags(PxActor* self, PxActorFlag::Enum inFlags) {
    self->setActorFlags((PxActorFlags) (PxU32) inFlags);
}
EXPORT_API PxActorFlag::Enum PxActor_GetActorFlags(PxActor* self) {
    return (PxActorFlag::Enum) (PxU32) self->getActorFlags();
}
EXPORT_API void PxActor_SetDominanceGroup(PxActor* self, PxDominanceGroup dominanceGroup) {
    self->setDominanceGroup(dominanceGroup);
}
EXPORT_API PxDominanceGroup PxActor_GetDominanceGroup(PxActor* self) {
    return self->getDominanceGroup();
}
EXPORT_API void PxActor_SetOwnerClient(PxActor* self, PxClientID inClient) {
    self->setOwnerClient(inClient);
}
EXPORT_API PxClientID PxActor_GetOwnerClient(PxActor* self) {
    return self->getOwnerClient();
}
EXPORT_API void PxActor_SetClientBehaviorFlags(PxActor* self, PxActorClientBehaviorFlag::Enum arg0) {
    self->setClientBehaviorFlags((PxActorClientBehaviorFlags) (PxU32) arg0);
}
EXPORT_API PxActorClientBehaviorFlag::Enum PxActor_GetClientBehaviorFlags(PxActor* self) {
    return (PxActorClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags();
}
EXPORT_API PxAggregate* PxActor_GetAggregate(PxActor* self) {
    return self->getAggregate();
}

// PxAggregate
EXPORT_API void PxAggregate_Release(PxAggregate* self) {
    self->release();
}
EXPORT_API bool PxAggregate_AddActor(PxAggregate* self, PxActor* actor) {
    return self->addActor(*(actor));
}
EXPORT_API bool PxAggregate_RemoveActor(PxAggregate* self, PxActor* actor) {
    return self->removeActor(*(actor));
}
EXPORT_API bool PxAggregate_AddArticulation(PxAggregate* self, PxArticulation* articulation) {
    return self->addArticulation(*(articulation));
}
EXPORT_API bool PxAggregate_RemoveArticulation(PxAggregate* self, PxArticulation* articulation) {
    return self->removeArticulation(*(articulation));
}
EXPORT_API PxU32 PxAggregate_GetNbActors(PxAggregate* self) {
    return self->getNbActors();
}
EXPORT_API PxU32 PxAggregate_GetMaxNbActors(PxAggregate* self) {
    return self->getMaxNbActors();
}
EXPORT_API PxU32 PxAggregate_GetActors(PxAggregate* self, PxActor** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getActors(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxScene* PxAggregate_GetScene(PxAggregate* self) {
    return self->getScene();
}
EXPORT_API bool PxAggregate_GetSelfCollision(PxAggregate* self) {
    return self->getSelfCollision();
}
EXPORT_API const char* PxAggregate_GetConcreteTypeName(PxAggregate* self) {
    return self->getConcreteTypeName();
}

// PxArticulation
EXPORT_API void* PxArticulation_UserData_Get(PxArticulation* self) { return self->userData; }
EXPORT_API void PxArticulation_UserData_Set(PxArticulation* self, void* value) { self->userData = value; }
EXPORT_API void PxArticulation_Release(PxArticulation* self) {
    self->release();
}
EXPORT_API PxScene* PxArticulation_GetScene(PxArticulation* self) {
    return self->getScene();
}
EXPORT_API void PxArticulation_SetMaxProjectionIterations(PxArticulation* self, PxU32 iterations) {
    self->setMaxProjectionIterations(iterations);
}
EXPORT_API PxU32 PxArticulation_GetMaxProjectionIterations(PxArticulation* self) {
    return self->getMaxProjectionIterations();
}
EXPORT_API void PxArticulation_SetSeparationTolerance(PxArticulation* self, PxReal tolerance) {
    self->setSeparationTolerance(tolerance);
}
EXPORT_API PxReal PxArticulation_GetSeparationTolerance(PxArticulation* self) {
    return self->getSeparationTolerance();
}
EXPORT_API void PxArticulation_SetInternalDriveIterations(PxArticulation* self, PxU32 iterations) {
    self->setInternalDriveIterations(iterations);
}
EXPORT_API PxU32 PxArticulation_GetInternalDriveIterations(PxArticulation* self) {
    return self->getInternalDriveIterations();
}
EXPORT_API void PxArticulation_SetExternalDriveIterations(PxArticulation* self, PxU32 iterations) {
    self->setExternalDriveIterations(iterations);
}
EXPORT_API PxU32 PxArticulation_GetExternalDriveIterations(PxArticulation* self) {
    return self->getExternalDriveIterations();
}
EXPORT_API void PxArticulation_SetSolverIterationCounts(PxArticulation* self, PxU32 minPositionIters, PxU32 minVelocityIters) {
    self->setSolverIterationCounts(minPositionIters, minVelocityIters);
}
EXPORT_API void PxArticulation_GetSolverIterationCounts(PxArticulation* self, PxU32* minPositionIters, PxU32* minVelocityIters) {
    self->getSolverIterationCounts(*minPositionIters, *minVelocityIters);
}
EXPORT_API bool PxArticulation_IsSleeping(PxArticulation* self) {
    return self->isSleeping();
}
EXPORT_API void PxArticulation_SetSleepThreshold(PxArticulation* self, PxReal threshold) {
    self->setSleepThreshold(threshold);
}
EXPORT_API PxReal PxArticulation_GetSleepThreshold(PxArticulation* self) {
    return self->getSleepThreshold();
}
EXPORT_API void PxArticulation_SetWakeCounter(PxArticulation* self, PxReal wakeCounterValue) {
    self->setWakeCounter(wakeCounterValue);
}
EXPORT_API PxReal PxArticulation_GetWakeCounter(PxArticulation* self) {
    return self->getWakeCounter();
}
EXPORT_API void PxArticulation_WakeUp(PxArticulation* self) {
    self->wakeUp();
}
EXPORT_API void PxArticulation_PutToSleep(PxArticulation* self) {
    self->putToSleep();
}
EXPORT_API PxArticulationLink* PxArticulation_CreateLink(PxArticulation* self, PxArticulationLink* parent, PxTransform_Managed pose) {
    return self->createLink(parent, PxTransform_IN(pose));
}
EXPORT_API PxU32 PxArticulation_GetNbLinks(PxArticulation* self) {
    return self->getNbLinks();
}
EXPORT_API PxU32 PxArticulation_GetLinks(PxArticulation* self, PxArticulationLink** userBuffer, PxU32 bufferSize) {
    return self->getLinks(userBuffer, bufferSize);
}
EXPORT_API void PxArticulation_SetName(PxArticulation* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxArticulation_GetName(PxArticulation* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxArticulation_GetWorldBounds(PxArticulation* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API PxAggregate* PxArticulation_GetAggregate(PxArticulation* self) {
    return self->getAggregate();
}
EXPORT_API PxArticulationDriveCache* PxArticulation_CreateDriveCache(PxArticulation* self, PxReal compliance, PxU32 driveIterations) {
    return self->createDriveCache(compliance, driveIterations);
}
EXPORT_API void PxArticulation_UpdateDriveCache(PxArticulation* self, PxArticulationDriveCache* driveCache, PxReal compliance, PxU32 driveIterations) {
    self->updateDriveCache(*(driveCache), compliance, driveIterations);
}
EXPORT_API void PxArticulation_ReleaseDriveCache(PxArticulation* self, PxArticulationDriveCache* driveCache) {
    self->releaseDriveCache(*(driveCache));
}
EXPORT_API void PxArticulation_ApplyImpulse(PxArticulation* self, PxArticulationLink* link, const PxArticulationDriveCache* driveCache, PxVec3_Managed linearImpulse, PxVec3_Managed angularImpulse) {
    self->applyImpulse(link, *(driveCache), PxVec3_IN(linearImpulse), PxVec3_IN(angularImpulse));
}
EXPORT_API void PxArticulation_ComputeImpulseResponse(PxArticulation* self, PxArticulationLink* link, PxVec3_Managed* linearResponse, PxVec3_Managed* angularResponse, const PxArticulationDriveCache* driveCache, PxVec3_Managed linearImpulse, PxVec3_Managed angularImpulse) {
    PxVec3 linearResponse_tmp;
    PxVec3 angularResponse_tmp;
    self->computeImpulseResponse(link, linearResponse_tmp, angularResponse_tmp, *(driveCache), PxVec3_IN(linearImpulse), PxVec3_IN(angularImpulse));
    *linearResponse = PxVec3_OUT(linearResponse_tmp);
    *angularResponse = PxVec3_OUT(angularResponse_tmp);
}
EXPORT_API const char* PxArticulation_GetConcreteTypeName(PxArticulation* self) {
    return self->getConcreteTypeName();
}

// PxArticulationLink
EXPORT_API void* PxArticulationLink_UserData_Get(PxArticulationLink* self) { return self->userData; }
EXPORT_API void PxArticulationLink_UserData_Set(PxArticulationLink* self, void* value) { self->userData = value; }
EXPORT_API void PxArticulationLink_Release(PxArticulationLink* self) {
    self->release();
}
EXPORT_API PxActorType::Enum PxArticulationLink_GetType(PxArticulationLink* self) {
    return self->getType();
}
EXPORT_API PxScene* PxArticulationLink_GetScene(PxArticulationLink* self) {
    return self->getScene();
}
EXPORT_API void PxArticulationLink_SetName(PxArticulationLink* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxArticulationLink_GetName(PxArticulationLink* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxArticulationLink_GetWorldBounds(PxArticulationLink* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API void PxArticulationLink_SetActorFlag(PxArticulationLink* self, PxActorFlag::Enum flag, bool value) {
    self->setActorFlag(flag, value);
}
EXPORT_API void PxArticulationLink_SetActorFlags(PxArticulationLink* self, PxActorFlag::Enum inFlags) {
    self->setActorFlags((PxActorFlags) (PxU32) inFlags);
}
EXPORT_API PxActorFlag::Enum PxArticulationLink_GetActorFlags(PxArticulationLink* self) {
    return (PxActorFlag::Enum) (PxU32) self->getActorFlags();
}
EXPORT_API void PxArticulationLink_SetDominanceGroup(PxArticulationLink* self, PxDominanceGroup dominanceGroup) {
    self->setDominanceGroup(dominanceGroup);
}
EXPORT_API PxDominanceGroup PxArticulationLink_GetDominanceGroup(PxArticulationLink* self) {
    return self->getDominanceGroup();
}
EXPORT_API void PxArticulationLink_SetOwnerClient(PxArticulationLink* self, PxClientID inClient) {
    self->setOwnerClient(inClient);
}
EXPORT_API PxClientID PxArticulationLink_GetOwnerClient(PxArticulationLink* self) {
    return self->getOwnerClient();
}
EXPORT_API void PxArticulationLink_SetClientBehaviorFlags(PxArticulationLink* self, PxActorClientBehaviorFlag::Enum arg0) {
    self->setClientBehaviorFlags((PxActorClientBehaviorFlags) (PxU32) arg0);
}
EXPORT_API PxActorClientBehaviorFlag::Enum PxArticulationLink_GetClientBehaviorFlags(PxArticulationLink* self) {
    return (PxActorClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags();
}
EXPORT_API PxAggregate* PxArticulationLink_GetAggregate(PxArticulationLink* self) {
    return self->getAggregate();
}
EXPORT_API PxTransform_Managed PxArticulationLink_GetGlobalPose(PxArticulationLink* self) {
    return PxTransform_OUT(self->getGlobalPose());
}
EXPORT_API void PxArticulationLink_SetGlobalPose(PxArticulationLink* self, PxTransform_Managed pose, bool autowake) {
    self->setGlobalPose(PxTransform_IN(pose), autowake);
}
EXPORT_API void PxArticulationLink_AttachShape(PxArticulationLink* self, PxShape* shape) {
    self->attachShape(*(shape));
}
EXPORT_API void PxArticulationLink_DetachShape(PxArticulationLink* self, PxShape* shape, bool wakeOnLostTouch) {
    self->detachShape(*(shape), wakeOnLostTouch);
}
EXPORT_API PxU32 PxArticulationLink_GetNbShapes(PxArticulationLink* self) {
    return self->getNbShapes();
}
EXPORT_API PxU32 PxArticulationLink_GetShapes(PxArticulationLink* self, PxShape** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getShapes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxArticulationLink_GetNbConstraints(PxArticulationLink* self) {
    return self->getNbConstraints();
}
EXPORT_API PxU32 PxArticulationLink_GetConstraints(PxArticulationLink* self, PxConstraint** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConstraints(userBuffer, bufferSize, startIndex);
}
EXPORT_API void PxArticulationLink_SetCMassLocalPose(PxArticulationLink* self, PxTransform_Managed pose) {
    self->setCMassLocalPose(PxTransform_IN(pose));
}
EXPORT_API PxTransform_Managed PxArticulationLink_GetCMassLocalPose(PxArticulationLink* self) {
    return PxTransform_OUT(self->getCMassLocalPose());
}
EXPORT_API void PxArticulationLink_SetMass(PxArticulationLink* self, PxReal mass) {
    self->setMass(mass);
}
EXPORT_API PxReal PxArticulationLink_GetMass(PxArticulationLink* self) {
    return self->getMass();
}
EXPORT_API PxReal PxArticulationLink_GetInvMass(PxArticulationLink* self) {
    return self->getInvMass();
}
EXPORT_API void PxArticulationLink_SetMassSpaceInertiaTensor(PxArticulationLink* self, PxVec3_Managed m) {
    self->setMassSpaceInertiaTensor(PxVec3_IN(m));
}
EXPORT_API PxVec3_Managed PxArticulationLink_GetMassSpaceInertiaTensor(PxArticulationLink* self) {
    return PxVec3_OUT(self->getMassSpaceInertiaTensor());
}
EXPORT_API PxVec3_Managed PxArticulationLink_GetMassSpaceInvInertiaTensor(PxArticulationLink* self) {
    return PxVec3_OUT(self->getMassSpaceInvInertiaTensor());
}
EXPORT_API PxVec3_Managed PxArticulationLink_GetLinearVelocity(PxArticulationLink* self) {
    return PxVec3_OUT(self->getLinearVelocity());
}
EXPORT_API void PxArticulationLink_SetLinearVelocity(PxArticulationLink* self, PxVec3_Managed linVel, bool autowake) {
    self->setLinearVelocity(PxVec3_IN(linVel), autowake);
}
EXPORT_API PxVec3_Managed PxArticulationLink_GetAngularVelocity(PxArticulationLink* self) {
    return PxVec3_OUT(self->getAngularVelocity());
}
EXPORT_API void PxArticulationLink_SetAngularVelocity(PxArticulationLink* self, PxVec3_Managed angVel, bool autowake) {
    self->setAngularVelocity(PxVec3_IN(angVel), autowake);
}
EXPORT_API void PxArticulationLink_AddForce(PxArticulationLink* self, PxVec3_Managed force, PxForceMode::Enum mode, bool autowake) {
    self->addForce(PxVec3_IN(force), mode, autowake);
}
EXPORT_API void PxArticulationLink_AddTorque(PxArticulationLink* self, PxVec3_Managed torque, PxForceMode::Enum mode, bool autowake) {
    self->addTorque(PxVec3_IN(torque), mode, autowake);
}
EXPORT_API void PxArticulationLink_ClearForce(PxArticulationLink* self, PxForceMode::Enum mode) {
    self->clearForce(mode);
}
EXPORT_API void PxArticulationLink_ClearTorque(PxArticulationLink* self, PxForceMode::Enum mode) {
    self->clearTorque(mode);
}
EXPORT_API void PxArticulationLink_SetRigidBodyFlag(PxArticulationLink* self, PxRigidBodyFlag::Enum flag, bool value) {
    self->setRigidBodyFlag(flag, value);
}
EXPORT_API void PxArticulationLink_SetRigidBodyFlags(PxArticulationLink* self, PxRigidBodyFlag::Enum inFlags) {
    self->setRigidBodyFlags((PxRigidBodyFlags) (PxU32) inFlags);
}
EXPORT_API PxRigidBodyFlag::Enum PxArticulationLink_GetRigidBodyFlags(PxArticulationLink* self) {
    return (PxRigidBodyFlag::Enum) (PxU32) self->getRigidBodyFlags();
}
EXPORT_API void PxArticulationLink_SetMinCCDAdvanceCoefficient(PxArticulationLink* self, PxReal advanceCoefficient) {
    self->setMinCCDAdvanceCoefficient(advanceCoefficient);
}
EXPORT_API PxReal PxArticulationLink_GetMinCCDAdvanceCoefficient(PxArticulationLink* self) {
    return self->getMinCCDAdvanceCoefficient();
}
EXPORT_API PxArticulation* PxArticulationLink_GetArticulation(PxArticulationLink* self) {
    return &(self->getArticulation());
}
EXPORT_API PxArticulationJoint* PxArticulationLink_GetInboundJoint(PxArticulationLink* self) {
    return self->getInboundJoint();
}
EXPORT_API PxU32 PxArticulationLink_GetNbChildren(PxArticulationLink* self) {
    return self->getNbChildren();
}
EXPORT_API PxU32 PxArticulationLink_GetChildren(PxArticulationLink* self, PxArticulationLink** userBuffer, PxU32 bufferSize) {
    return self->getChildren(userBuffer, bufferSize);
}
EXPORT_API const char* PxArticulationLink_GetConcreteTypeName(PxArticulationLink* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxRigidBody* CAST_PxArticulationLink_TO_PxRigidBody(PxArticulationLink* p) { return static_cast<PxRigidBody*>(p); }
EXPORT_API PxArticulationLink* CAST_PxRigidBody_TO_PxArticulationLink(PxRigidBody* p) { return static_cast<PxArticulationLink*>(p); }
EXPORT_API PxRigidActor* CAST_PxArticulationLink_TO_PxRigidActor(PxArticulationLink* p) { return static_cast<PxRigidActor*>(p); }
EXPORT_API PxArticulationLink* CAST_PxRigidActor_TO_PxArticulationLink(PxRigidActor* p) { return static_cast<PxArticulationLink*>(p); }
EXPORT_API PxActor* CAST_PxArticulationLink_TO_PxActor(PxArticulationLink* p) { return static_cast<PxActor*>(p); }
EXPORT_API PxArticulationLink* CAST_PxActor_TO_PxArticulationLink(PxActor* p) { return static_cast<PxArticulationLink*>(p); }

// PxConstraint
EXPORT_API void PxConstraint_Release(PxConstraint* self) {
    self->release();
}
EXPORT_API PxScene* PxConstraint_GetScene(PxConstraint* self) {
    return self->getScene();
}
EXPORT_API void PxConstraint_GetActors(PxConstraint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxConstraint_SetActors(PxConstraint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxConstraint_MarkDirty(PxConstraint* self) {
    self->markDirty();
}
EXPORT_API void PxConstraint_SetFlags(PxConstraint* self, PxConstraintFlag::Enum flags) {
    self->setFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API PxConstraintFlag::Enum PxConstraint_GetFlags(PxConstraint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getFlags();
}
EXPORT_API void PxConstraint_SetFlag(PxConstraint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setFlag(flag, value);
}
EXPORT_API void PxConstraint_GetForce(PxConstraint* self, PxVec3_Managed* linear, PxVec3_Managed* angular) {
    PxVec3 linear_tmp;
    PxVec3 angular_tmp;
    self->getForce(linear_tmp, angular_tmp);
    *linear = PxVec3_OUT(linear_tmp);
    *angular = PxVec3_OUT(angular_tmp);
}
EXPORT_API void PxConstraint_SetBreakForce(PxConstraint* self, PxReal linear, PxReal angular) {
    self->setBreakForce(linear, angular);
}
EXPORT_API void PxConstraint_GetBreakForce(PxConstraint* self, PxReal* linear, PxReal* angular) {
    self->getBreakForce(*linear, *angular);
}
EXPORT_API void* PxConstraint_GetExternalReference(PxConstraint* self, PxU32* typeID) {
    return self->getExternalReference(*typeID);
}
EXPORT_API const char* PxConstraint_GetConcreteTypeName(PxConstraint* self) {
    return self->getConcreteTypeName();
}

// PxMaterial
EXPORT_API void* PxMaterial_UserData_Get(PxMaterial* self) { return self->userData; }
EXPORT_API void PxMaterial_UserData_Set(PxMaterial* self, void* value) { self->userData = value; }
EXPORT_API void PxMaterial_Release(PxMaterial* self) {
    self->release();
}
EXPORT_API PxU32 PxMaterial_GetReferenceCount(PxMaterial* self) {
    return self->getReferenceCount();
}
EXPORT_API void PxMaterial_SetDynamicFriction(PxMaterial* self, PxReal coef) {
    self->setDynamicFriction(coef);
}
EXPORT_API PxReal PxMaterial_GetDynamicFriction(PxMaterial* self) {
    return self->getDynamicFriction();
}
EXPORT_API void PxMaterial_SetStaticFriction(PxMaterial* self, PxReal coef) {
    self->setStaticFriction(coef);
}
EXPORT_API PxReal PxMaterial_GetStaticFriction(PxMaterial* self) {
    return self->getStaticFriction();
}
EXPORT_API void PxMaterial_SetRestitution(PxMaterial* self, PxReal rest) {
    self->setRestitution(rest);
}
EXPORT_API PxReal PxMaterial_GetRestitution(PxMaterial* self) {
    return self->getRestitution();
}
EXPORT_API void PxMaterial_SetFlag(PxMaterial* self, PxMaterialFlag::Enum flag, bool arg1) {
    self->setFlag(flag, arg1);
}
EXPORT_API void PxMaterial_SetFlags(PxMaterial* self, PxMaterialFlag::Enum inFlags) {
    self->setFlags((PxMaterialFlags) (PxU32) inFlags);
}
EXPORT_API PxMaterialFlag::Enum PxMaterial_GetFlags(PxMaterial* self) {
    return (PxMaterialFlag::Enum) (PxU32) self->getFlags();
}
EXPORT_API void PxMaterial_SetFrictionCombineMode(PxMaterial* self, PxCombineMode::Enum combMode) {
    self->setFrictionCombineMode(combMode);
}
EXPORT_API PxCombineMode::Enum PxMaterial_GetFrictionCombineMode(PxMaterial* self) {
    return self->getFrictionCombineMode();
}
EXPORT_API void PxMaterial_SetRestitutionCombineMode(PxMaterial* self, PxCombineMode::Enum combMode) {
    self->setRestitutionCombineMode(combMode);
}
EXPORT_API PxCombineMode::Enum PxMaterial_GetRestitutionCombineMode(PxMaterial* self) {
    return self->getRestitutionCombineMode();
}
EXPORT_API const char* PxMaterial_GetConcreteTypeName(PxMaterial* self) {
    return self->getConcreteTypeName();
}

// PxPhysics
EXPORT_API void PxPhysics_Release(PxPhysics* self) {
    self->release();
}
EXPORT_API PxFoundation* PxPhysics_GetFoundation(PxPhysics* self) {
    return &(self->getFoundation());
}
EXPORT_API PxVisualDebugger* PxPhysics_GetVisualDebugger(PxPhysics* self) {
    return self->getVisualDebugger();
}
EXPORT_API PxVisualDebuggerConnectionManager* PxPhysics_GetPvdConnectionManager(PxPhysics* self) {
    return self->getPvdConnectionManager();
}
EXPORT_API PxAggregate* PxPhysics_CreateAggregate(PxPhysics* self, PxU32 maxSize, bool enableSelfCollision) {
    return self->createAggregate(maxSize, enableSelfCollision);
}
EXPORT_API PxTolerancesScale_Managed PxPhysics_GetTolerancesScale(PxPhysics* self) {
    return PxTolerancesScale_OUT(self->getTolerancesScale());
}
EXPORT_API PxTriangleMesh* PxPhysics_CreateTriangleMesh(PxPhysics* self, PxInputStream* stream) {
    return self->createTriangleMesh(*(stream));
}
EXPORT_API PxU32 PxPhysics_GetNbTriangleMeshes(PxPhysics* self) {
    return self->getNbTriangleMeshes();
}
EXPORT_API PxU32 PxPhysics_GetTriangleMeshes(PxPhysics* self, PxTriangleMesh** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getTriangleMeshes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxPhysics_GetNbHeightFields(PxPhysics* self) {
    return self->getNbHeightFields();
}
EXPORT_API PxU32 PxPhysics_GetHeightFields(PxPhysics* self, PxHeightField** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getHeightFields(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxConvexMesh* PxPhysics_CreateConvexMesh(PxPhysics* self, PxInputStream* stream) {
    return self->createConvexMesh(*(stream));
}
EXPORT_API PxU32 PxPhysics_GetNbConvexMeshes(PxPhysics* self) {
    return self->getNbConvexMeshes();
}
EXPORT_API PxU32 PxPhysics_GetConvexMeshes(PxPhysics* self, PxConvexMesh** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConvexMeshes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxPhysics_GetNbClothFabrics(PxPhysics* self) {
    return self->getNbClothFabrics();
}
EXPORT_API PxScene* PxPhysics_CreateScene(PxPhysics* self, const PxSceneDesc* sceneDesc) {
    return self->createScene(*(sceneDesc));
}
EXPORT_API PxU32 PxPhysics_GetNbScenes(PxPhysics* self) {
    return self->getNbScenes();
}
EXPORT_API PxU32 PxPhysics_GetScenes(PxPhysics* self, PxScene** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getScenes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxRigidStatic* PxPhysics_CreateRigidStatic(PxPhysics* self, PxTransform_Managed pose) {
    return self->createRigidStatic(PxTransform_IN(pose));
}
EXPORT_API PxRigidDynamic* PxPhysics_CreateRigidDynamic(PxPhysics* self, PxTransform_Managed pose) {
    return self->createRigidDynamic(PxTransform_IN(pose));
}
EXPORT_API PxShape* PxPhysics_CreateShape_0(PxPhysics* self, const PxGeometry* geometry, const PxMaterial* material, bool isExclusive, PxShapeFlag::Enum shapeFlags) {
    return self->createShape(*(geometry), *(material), isExclusive, (PxShapeFlags) (PxU32) shapeFlags);
}
EXPORT_API PxShape* PxPhysics_CreateShape_1(PxPhysics* self, const PxGeometry* geometry, PxMaterial*const * materials, PxU16 materialCount, bool isExclusive, PxShapeFlag::Enum shapeFlags) {
    return self->createShape(*(geometry), materials, materialCount, isExclusive, (PxShapeFlags) (PxU32) shapeFlags);
}
EXPORT_API PxU32 PxPhysics_GetNbShapes(PxPhysics* self) {
    return self->getNbShapes();
}
EXPORT_API PxU32 PxPhysics_GetShapes(PxPhysics* self, PxShape** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getShapes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxArticulation* PxPhysics_CreateArticulation(PxPhysics* self) {
    return self->createArticulation();
}
EXPORT_API PxMaterial* PxPhysics_CreateMaterial(PxPhysics* self, PxReal staticFriction, PxReal dynamicFriction, PxReal restitution) {
    return self->createMaterial(staticFriction, dynamicFriction, restitution);
}
EXPORT_API PxU32 PxPhysics_GetNbMaterials(PxPhysics* self) {
    return self->getNbMaterials();
}
EXPORT_API PxU32 PxPhysics_GetMaterials(PxPhysics* self, PxMaterial** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getMaterials(userBuffer, bufferSize, startIndex);
}

// PxRigidActor
EXPORT_API void* PxRigidActor_UserData_Get(PxRigidActor* self) { return self->userData; }
EXPORT_API void PxRigidActor_UserData_Set(PxRigidActor* self, void* value) { self->userData = value; }
EXPORT_API void PxRigidActor_Release(PxRigidActor* self) {
    self->release();
}
EXPORT_API PxActorType::Enum PxRigidActor_GetType(PxRigidActor* self) {
    return self->getType();
}
EXPORT_API PxScene* PxRigidActor_GetScene(PxRigidActor* self) {
    return self->getScene();
}
EXPORT_API void PxRigidActor_SetName(PxRigidActor* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxRigidActor_GetName(PxRigidActor* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxRigidActor_GetWorldBounds(PxRigidActor* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API void PxRigidActor_SetActorFlag(PxRigidActor* self, PxActorFlag::Enum flag, bool value) {
    self->setActorFlag(flag, value);
}
EXPORT_API void PxRigidActor_SetActorFlags(PxRigidActor* self, PxActorFlag::Enum inFlags) {
    self->setActorFlags((PxActorFlags) (PxU32) inFlags);
}
EXPORT_API PxActorFlag::Enum PxRigidActor_GetActorFlags(PxRigidActor* self) {
    return (PxActorFlag::Enum) (PxU32) self->getActorFlags();
}
EXPORT_API void PxRigidActor_SetDominanceGroup(PxRigidActor* self, PxDominanceGroup dominanceGroup) {
    self->setDominanceGroup(dominanceGroup);
}
EXPORT_API PxDominanceGroup PxRigidActor_GetDominanceGroup(PxRigidActor* self) {
    return self->getDominanceGroup();
}
EXPORT_API void PxRigidActor_SetOwnerClient(PxRigidActor* self, PxClientID inClient) {
    self->setOwnerClient(inClient);
}
EXPORT_API PxClientID PxRigidActor_GetOwnerClient(PxRigidActor* self) {
    return self->getOwnerClient();
}
EXPORT_API void PxRigidActor_SetClientBehaviorFlags(PxRigidActor* self, PxActorClientBehaviorFlag::Enum arg0) {
    self->setClientBehaviorFlags((PxActorClientBehaviorFlags) (PxU32) arg0);
}
EXPORT_API PxActorClientBehaviorFlag::Enum PxRigidActor_GetClientBehaviorFlags(PxRigidActor* self) {
    return (PxActorClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags();
}
EXPORT_API PxAggregate* PxRigidActor_GetAggregate(PxRigidActor* self) {
    return self->getAggregate();
}
EXPORT_API PxTransform_Managed PxRigidActor_GetGlobalPose(PxRigidActor* self) {
    return PxTransform_OUT(self->getGlobalPose());
}
EXPORT_API void PxRigidActor_SetGlobalPose(PxRigidActor* self, PxTransform_Managed pose, bool autowake) {
    self->setGlobalPose(PxTransform_IN(pose), autowake);
}
EXPORT_API PxShape* PxRigidActor_CreateShape_1(PxRigidActor* self, const PxGeometry* geometry, PxMaterial*const* materials, PxU16 materialCount, PxShapeFlag::Enum shapeFlags) {
    return self->createShape(*(geometry), materials, materialCount, (PxShapeFlags) (PxU32) shapeFlags);
}
EXPORT_API PxShape* PxRigidActor_CreateShape_0(PxRigidActor* self, const PxGeometry* geometry, const PxMaterial* material, PxShapeFlag::Enum shapeFlags) {
    return self->createShape(*(geometry), *(material), (PxShapeFlags) (PxU32) shapeFlags);
}
EXPORT_API void PxRigidActor_AttachShape(PxRigidActor* self, PxShape* shape) {
    self->attachShape(*(shape));
}
EXPORT_API void PxRigidActor_DetachShape(PxRigidActor* self, PxShape* shape, bool wakeOnLostTouch) {
    self->detachShape(*(shape), wakeOnLostTouch);
}
EXPORT_API PxU32 PxRigidActor_GetNbShapes(PxRigidActor* self) {
    return self->getNbShapes();
}
EXPORT_API PxU32 PxRigidActor_GetShapes(PxRigidActor* self, PxShape** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getShapes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxRigidActor_GetNbConstraints(PxRigidActor* self) {
    return self->getNbConstraints();
}
EXPORT_API PxU32 PxRigidActor_GetConstraints(PxRigidActor* self, PxConstraint** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConstraints(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxActor* CAST_PxRigidActor_TO_PxActor(PxRigidActor* p) { return static_cast<PxActor*>(p); }
EXPORT_API PxRigidActor* CAST_PxActor_TO_PxRigidActor(PxActor* p) { return static_cast<PxRigidActor*>(p); }

// PxRigidBody
EXPORT_API void* PxRigidBody_UserData_Get(PxRigidBody* self) { return self->userData; }
EXPORT_API void PxRigidBody_UserData_Set(PxRigidBody* self, void* value) { self->userData = value; }
EXPORT_API void PxRigidBody_Release(PxRigidBody* self) {
    self->release();
}
EXPORT_API PxActorType::Enum PxRigidBody_GetType(PxRigidBody* self) {
    return self->getType();
}
EXPORT_API PxScene* PxRigidBody_GetScene(PxRigidBody* self) {
    return self->getScene();
}
EXPORT_API void PxRigidBody_SetName(PxRigidBody* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxRigidBody_GetName(PxRigidBody* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxRigidBody_GetWorldBounds(PxRigidBody* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API void PxRigidBody_SetActorFlag(PxRigidBody* self, PxActorFlag::Enum flag, bool value) {
    self->setActorFlag(flag, value);
}
EXPORT_API void PxRigidBody_SetActorFlags(PxRigidBody* self, PxActorFlag::Enum inFlags) {
    self->setActorFlags((PxActorFlags) (PxU32) inFlags);
}
EXPORT_API PxActorFlag::Enum PxRigidBody_GetActorFlags(PxRigidBody* self) {
    return (PxActorFlag::Enum) (PxU32) self->getActorFlags();
}
EXPORT_API void PxRigidBody_SetDominanceGroup(PxRigidBody* self, PxDominanceGroup dominanceGroup) {
    self->setDominanceGroup(dominanceGroup);
}
EXPORT_API PxDominanceGroup PxRigidBody_GetDominanceGroup(PxRigidBody* self) {
    return self->getDominanceGroup();
}
EXPORT_API void PxRigidBody_SetOwnerClient(PxRigidBody* self, PxClientID inClient) {
    self->setOwnerClient(inClient);
}
EXPORT_API PxClientID PxRigidBody_GetOwnerClient(PxRigidBody* self) {
    return self->getOwnerClient();
}
EXPORT_API void PxRigidBody_SetClientBehaviorFlags(PxRigidBody* self, PxActorClientBehaviorFlag::Enum arg0) {
    self->setClientBehaviorFlags((PxActorClientBehaviorFlags) (PxU32) arg0);
}
EXPORT_API PxActorClientBehaviorFlag::Enum PxRigidBody_GetClientBehaviorFlags(PxRigidBody* self) {
    return (PxActorClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags();
}
EXPORT_API PxAggregate* PxRigidBody_GetAggregate(PxRigidBody* self) {
    return self->getAggregate();
}
EXPORT_API PxTransform_Managed PxRigidBody_GetGlobalPose(PxRigidBody* self) {
    return PxTransform_OUT(self->getGlobalPose());
}
EXPORT_API void PxRigidBody_SetGlobalPose(PxRigidBody* self, PxTransform_Managed pose, bool autowake) {
    self->setGlobalPose(PxTransform_IN(pose), autowake);
}
EXPORT_API void PxRigidBody_AttachShape(PxRigidBody* self, PxShape* shape) {
    self->attachShape(*(shape));
}
EXPORT_API void PxRigidBody_DetachShape(PxRigidBody* self, PxShape* shape, bool wakeOnLostTouch) {
    self->detachShape(*(shape), wakeOnLostTouch);
}
EXPORT_API PxU32 PxRigidBody_GetNbShapes(PxRigidBody* self) {
    return self->getNbShapes();
}
EXPORT_API PxU32 PxRigidBody_GetShapes(PxRigidBody* self, PxShape** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getShapes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxRigidBody_GetNbConstraints(PxRigidBody* self) {
    return self->getNbConstraints();
}
EXPORT_API PxU32 PxRigidBody_GetConstraints(PxRigidBody* self, PxConstraint** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConstraints(userBuffer, bufferSize, startIndex);
}
EXPORT_API void PxRigidBody_SetCMassLocalPose(PxRigidBody* self, PxTransform_Managed pose) {
    self->setCMassLocalPose(PxTransform_IN(pose));
}
EXPORT_API PxTransform_Managed PxRigidBody_GetCMassLocalPose(PxRigidBody* self) {
    return PxTransform_OUT(self->getCMassLocalPose());
}
EXPORT_API void PxRigidBody_SetMass(PxRigidBody* self, PxReal mass) {
    self->setMass(mass);
}
EXPORT_API PxReal PxRigidBody_GetMass(PxRigidBody* self) {
    return self->getMass();
}
EXPORT_API PxReal PxRigidBody_GetInvMass(PxRigidBody* self) {
    return self->getInvMass();
}
EXPORT_API void PxRigidBody_SetMassSpaceInertiaTensor(PxRigidBody* self, PxVec3_Managed m) {
    self->setMassSpaceInertiaTensor(PxVec3_IN(m));
}
EXPORT_API PxVec3_Managed PxRigidBody_GetMassSpaceInertiaTensor(PxRigidBody* self) {
    return PxVec3_OUT(self->getMassSpaceInertiaTensor());
}
EXPORT_API PxVec3_Managed PxRigidBody_GetMassSpaceInvInertiaTensor(PxRigidBody* self) {
    return PxVec3_OUT(self->getMassSpaceInvInertiaTensor());
}
EXPORT_API PxVec3_Managed PxRigidBody_GetLinearVelocity(PxRigidBody* self) {
    return PxVec3_OUT(self->getLinearVelocity());
}
EXPORT_API void PxRigidBody_SetLinearVelocity(PxRigidBody* self, PxVec3_Managed linVel, bool autowake) {
    self->setLinearVelocity(PxVec3_IN(linVel), autowake);
}
EXPORT_API PxVec3_Managed PxRigidBody_GetAngularVelocity(PxRigidBody* self) {
    return PxVec3_OUT(self->getAngularVelocity());
}
EXPORT_API void PxRigidBody_SetAngularVelocity(PxRigidBody* self, PxVec3_Managed angVel, bool autowake) {
    self->setAngularVelocity(PxVec3_IN(angVel), autowake);
}
EXPORT_API void PxRigidBody_AddForce(PxRigidBody* self, PxVec3_Managed force, PxForceMode::Enum mode, bool autowake) {
    self->addForce(PxVec3_IN(force), mode, autowake);
}
EXPORT_API void PxRigidBody_AddTorque(PxRigidBody* self, PxVec3_Managed torque, PxForceMode::Enum mode, bool autowake) {
    self->addTorque(PxVec3_IN(torque), mode, autowake);
}
EXPORT_API void PxRigidBody_ClearForce(PxRigidBody* self, PxForceMode::Enum mode) {
    self->clearForce(mode);
}
EXPORT_API void PxRigidBody_ClearTorque(PxRigidBody* self, PxForceMode::Enum mode) {
    self->clearTorque(mode);
}
EXPORT_API void PxRigidBody_SetRigidBodyFlag(PxRigidBody* self, PxRigidBodyFlag::Enum flag, bool value) {
    self->setRigidBodyFlag(flag, value);
}
EXPORT_API void PxRigidBody_SetRigidBodyFlags(PxRigidBody* self, PxRigidBodyFlag::Enum inFlags) {
    self->setRigidBodyFlags((PxRigidBodyFlags) (PxU32) inFlags);
}
EXPORT_API PxRigidBodyFlag::Enum PxRigidBody_GetRigidBodyFlags(PxRigidBody* self) {
    return (PxRigidBodyFlag::Enum) (PxU32) self->getRigidBodyFlags();
}
EXPORT_API void PxRigidBody_SetMinCCDAdvanceCoefficient(PxRigidBody* self, PxReal advanceCoefficient) {
    self->setMinCCDAdvanceCoefficient(advanceCoefficient);
}
EXPORT_API PxReal PxRigidBody_GetMinCCDAdvanceCoefficient(PxRigidBody* self) {
    return self->getMinCCDAdvanceCoefficient();
}
EXPORT_API PxRigidActor* CAST_PxRigidBody_TO_PxRigidActor(PxRigidBody* p) { return static_cast<PxRigidActor*>(p); }
EXPORT_API PxRigidBody* CAST_PxRigidActor_TO_PxRigidBody(PxRigidActor* p) { return static_cast<PxRigidBody*>(p); }
EXPORT_API PxActor* CAST_PxRigidBody_TO_PxActor(PxRigidBody* p) { return static_cast<PxActor*>(p); }
EXPORT_API PxRigidBody* CAST_PxActor_TO_PxRigidBody(PxActor* p) { return static_cast<PxRigidBody*>(p); }

// PxRigidDynamic
EXPORT_API void* PxRigidDynamic_UserData_Get(PxRigidDynamic* self) { return self->userData; }
EXPORT_API void PxRigidDynamic_UserData_Set(PxRigidDynamic* self, void* value) { self->userData = value; }
EXPORT_API void PxRigidDynamic_Release(PxRigidDynamic* self) {
    self->release();
}
EXPORT_API PxActorType::Enum PxRigidDynamic_GetType(PxRigidDynamic* self) {
    return self->getType();
}
EXPORT_API PxScene* PxRigidDynamic_GetScene(PxRigidDynamic* self) {
    return self->getScene();
}
EXPORT_API void PxRigidDynamic_SetName(PxRigidDynamic* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxRigidDynamic_GetName(PxRigidDynamic* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxRigidDynamic_GetWorldBounds(PxRigidDynamic* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API void PxRigidDynamic_SetActorFlag(PxRigidDynamic* self, PxActorFlag::Enum flag, bool value) {
    self->setActorFlag(flag, value);
}
EXPORT_API void PxRigidDynamic_SetActorFlags(PxRigidDynamic* self, PxActorFlag::Enum inFlags) {
    self->setActorFlags((PxActorFlags) (PxU32) inFlags);
}
EXPORT_API PxActorFlag::Enum PxRigidDynamic_GetActorFlags(PxRigidDynamic* self) {
    return (PxActorFlag::Enum) (PxU32) self->getActorFlags();
}
EXPORT_API void PxRigidDynamic_SetDominanceGroup(PxRigidDynamic* self, PxDominanceGroup dominanceGroup) {
    self->setDominanceGroup(dominanceGroup);
}
EXPORT_API PxDominanceGroup PxRigidDynamic_GetDominanceGroup(PxRigidDynamic* self) {
    return self->getDominanceGroup();
}
EXPORT_API void PxRigidDynamic_SetOwnerClient(PxRigidDynamic* self, PxClientID inClient) {
    self->setOwnerClient(inClient);
}
EXPORT_API PxClientID PxRigidDynamic_GetOwnerClient(PxRigidDynamic* self) {
    return self->getOwnerClient();
}
EXPORT_API void PxRigidDynamic_SetClientBehaviorFlags(PxRigidDynamic* self, PxActorClientBehaviorFlag::Enum arg0) {
    self->setClientBehaviorFlags((PxActorClientBehaviorFlags) (PxU32) arg0);
}
EXPORT_API PxActorClientBehaviorFlag::Enum PxRigidDynamic_GetClientBehaviorFlags(PxRigidDynamic* self) {
    return (PxActorClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags();
}
EXPORT_API PxAggregate* PxRigidDynamic_GetAggregate(PxRigidDynamic* self) {
    return self->getAggregate();
}
EXPORT_API PxTransform_Managed PxRigidDynamic_GetGlobalPose(PxRigidDynamic* self) {
    return PxTransform_OUT(self->getGlobalPose());
}
EXPORT_API void PxRigidDynamic_SetGlobalPose(PxRigidDynamic* self, PxTransform_Managed pose, bool autowake) {
    self->setGlobalPose(PxTransform_IN(pose), autowake);
}
EXPORT_API void PxRigidDynamic_AttachShape(PxRigidDynamic* self, PxShape* shape) {
    self->attachShape(*(shape));
}
EXPORT_API void PxRigidDynamic_DetachShape(PxRigidDynamic* self, PxShape* shape, bool wakeOnLostTouch) {
    self->detachShape(*(shape), wakeOnLostTouch);
}
EXPORT_API PxU32 PxRigidDynamic_GetNbShapes(PxRigidDynamic* self) {
    return self->getNbShapes();
}
EXPORT_API PxU32 PxRigidDynamic_GetShapes(PxRigidDynamic* self, PxShape** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getShapes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxRigidDynamic_GetNbConstraints(PxRigidDynamic* self) {
    return self->getNbConstraints();
}
EXPORT_API PxU32 PxRigidDynamic_GetConstraints(PxRigidDynamic* self, PxConstraint** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConstraints(userBuffer, bufferSize, startIndex);
}
EXPORT_API void PxRigidDynamic_SetCMassLocalPose(PxRigidDynamic* self, PxTransform_Managed pose) {
    self->setCMassLocalPose(PxTransform_IN(pose));
}
EXPORT_API PxTransform_Managed PxRigidDynamic_GetCMassLocalPose(PxRigidDynamic* self) {
    return PxTransform_OUT(self->getCMassLocalPose());
}
EXPORT_API void PxRigidDynamic_SetMass(PxRigidDynamic* self, PxReal mass) {
    self->setMass(mass);
}
EXPORT_API PxReal PxRigidDynamic_GetMass(PxRigidDynamic* self) {
    return self->getMass();
}
EXPORT_API PxReal PxRigidDynamic_GetInvMass(PxRigidDynamic* self) {
    return self->getInvMass();
}
EXPORT_API void PxRigidDynamic_SetMassSpaceInertiaTensor(PxRigidDynamic* self, PxVec3_Managed m) {
    self->setMassSpaceInertiaTensor(PxVec3_IN(m));
}
EXPORT_API PxVec3_Managed PxRigidDynamic_GetMassSpaceInertiaTensor(PxRigidDynamic* self) {
    return PxVec3_OUT(self->getMassSpaceInertiaTensor());
}
EXPORT_API PxVec3_Managed PxRigidDynamic_GetMassSpaceInvInertiaTensor(PxRigidDynamic* self) {
    return PxVec3_OUT(self->getMassSpaceInvInertiaTensor());
}
EXPORT_API PxVec3_Managed PxRigidDynamic_GetLinearVelocity(PxRigidDynamic* self) {
    return PxVec3_OUT(self->getLinearVelocity());
}
EXPORT_API void PxRigidDynamic_SetLinearVelocity(PxRigidDynamic* self, PxVec3_Managed linVel, bool autowake) {
    self->setLinearVelocity(PxVec3_IN(linVel), autowake);
}
EXPORT_API PxVec3_Managed PxRigidDynamic_GetAngularVelocity(PxRigidDynamic* self) {
    return PxVec3_OUT(self->getAngularVelocity());
}
EXPORT_API void PxRigidDynamic_SetAngularVelocity(PxRigidDynamic* self, PxVec3_Managed angVel, bool autowake) {
    self->setAngularVelocity(PxVec3_IN(angVel), autowake);
}
EXPORT_API void PxRigidDynamic_AddForce(PxRigidDynamic* self, PxVec3_Managed force, PxForceMode::Enum mode, bool autowake) {
    self->addForce(PxVec3_IN(force), mode, autowake);
}
EXPORT_API void PxRigidDynamic_AddTorque(PxRigidDynamic* self, PxVec3_Managed torque, PxForceMode::Enum mode, bool autowake) {
    self->addTorque(PxVec3_IN(torque), mode, autowake);
}
EXPORT_API void PxRigidDynamic_ClearForce(PxRigidDynamic* self, PxForceMode::Enum mode) {
    self->clearForce(mode);
}
EXPORT_API void PxRigidDynamic_ClearTorque(PxRigidDynamic* self, PxForceMode::Enum mode) {
    self->clearTorque(mode);
}
EXPORT_API void PxRigidDynamic_SetRigidBodyFlag(PxRigidDynamic* self, PxRigidBodyFlag::Enum flag, bool value) {
    self->setRigidBodyFlag(flag, value);
}
EXPORT_API void PxRigidDynamic_SetRigidBodyFlags(PxRigidDynamic* self, PxRigidBodyFlag::Enum inFlags) {
    self->setRigidBodyFlags((PxRigidBodyFlags) (PxU32) inFlags);
}
EXPORT_API PxRigidBodyFlag::Enum PxRigidDynamic_GetRigidBodyFlags(PxRigidDynamic* self) {
    return (PxRigidBodyFlag::Enum) (PxU32) self->getRigidBodyFlags();
}
EXPORT_API void PxRigidDynamic_SetMinCCDAdvanceCoefficient(PxRigidDynamic* self, PxReal advanceCoefficient) {
    self->setMinCCDAdvanceCoefficient(advanceCoefficient);
}
EXPORT_API PxReal PxRigidDynamic_GetMinCCDAdvanceCoefficient(PxRigidDynamic* self) {
    return self->getMinCCDAdvanceCoefficient();
}
EXPORT_API void PxRigidDynamic_SetKinematicTarget(PxRigidDynamic* self, PxTransform_Managed destination) {
    self->setKinematicTarget(PxTransform_IN(destination));
}
EXPORT_API bool PxRigidDynamic_GetKinematicTarget(PxRigidDynamic* self, PxTransform_Managed* target) {
    PxTransform target_tmp;
    bool __apigen__returnval = self->getKinematicTarget(target_tmp);
    *target = PxTransform_OUT(target_tmp);
    return __apigen__returnval;
}
EXPORT_API void PxRigidDynamic_SetLinearDamping(PxRigidDynamic* self, PxReal linDamp) {
    self->setLinearDamping(linDamp);
}
EXPORT_API PxReal PxRigidDynamic_GetLinearDamping(PxRigidDynamic* self) {
    return self->getLinearDamping();
}
EXPORT_API void PxRigidDynamic_SetAngularDamping(PxRigidDynamic* self, PxReal angDamp) {
    self->setAngularDamping(angDamp);
}
EXPORT_API PxReal PxRigidDynamic_GetAngularDamping(PxRigidDynamic* self) {
    return self->getAngularDamping();
}
EXPORT_API void PxRigidDynamic_SetMaxAngularVelocity(PxRigidDynamic* self, PxReal maxAngVel) {
    self->setMaxAngularVelocity(maxAngVel);
}
EXPORT_API PxReal PxRigidDynamic_GetMaxAngularVelocity(PxRigidDynamic* self) {
    return self->getMaxAngularVelocity();
}
EXPORT_API bool PxRigidDynamic_IsSleeping(PxRigidDynamic* self) {
    return self->isSleeping();
}
EXPORT_API void PxRigidDynamic_SetSleepThreshold(PxRigidDynamic* self, PxReal threshold) {
    self->setSleepThreshold(threshold);
}
EXPORT_API PxReal PxRigidDynamic_GetSleepThreshold(PxRigidDynamic* self) {
    return self->getSleepThreshold();
}
EXPORT_API void PxRigidDynamic_SetWakeCounter(PxRigidDynamic* self, PxReal wakeCounterValue) {
    self->setWakeCounter(wakeCounterValue);
}
EXPORT_API PxReal PxRigidDynamic_GetWakeCounter(PxRigidDynamic* self) {
    return self->getWakeCounter();
}
EXPORT_API void PxRigidDynamic_WakeUp(PxRigidDynamic* self) {
    self->wakeUp();
}
EXPORT_API void PxRigidDynamic_PutToSleep(PxRigidDynamic* self) {
    self->putToSleep();
}
EXPORT_API void PxRigidDynamic_SetSolverIterationCounts(PxRigidDynamic* self, PxU32 minPositionIters, PxU32 minVelocityIters) {
    self->setSolverIterationCounts(minPositionIters, minVelocityIters);
}
EXPORT_API void PxRigidDynamic_GetSolverIterationCounts(PxRigidDynamic* self, PxU32* minPositionIters, PxU32* minVelocityIters) {
    self->getSolverIterationCounts(*minPositionIters, *minVelocityIters);
}
EXPORT_API PxReal PxRigidDynamic_GetContactReportThreshold(PxRigidDynamic* self) {
    return self->getContactReportThreshold();
}
EXPORT_API void PxRigidDynamic_SetContactReportThreshold(PxRigidDynamic* self, PxReal threshold) {
    self->setContactReportThreshold(threshold);
}
EXPORT_API const char* PxRigidDynamic_GetConcreteTypeName(PxRigidDynamic* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxRigidBody* CAST_PxRigidDynamic_TO_PxRigidBody(PxRigidDynamic* p) { return static_cast<PxRigidBody*>(p); }
EXPORT_API PxRigidDynamic* CAST_PxRigidBody_TO_PxRigidDynamic(PxRigidBody* p) { return static_cast<PxRigidDynamic*>(p); }
EXPORT_API PxRigidActor* CAST_PxRigidDynamic_TO_PxRigidActor(PxRigidDynamic* p) { return static_cast<PxRigidActor*>(p); }
EXPORT_API PxRigidDynamic* CAST_PxRigidActor_TO_PxRigidDynamic(PxRigidActor* p) { return static_cast<PxRigidDynamic*>(p); }
EXPORT_API PxActor* CAST_PxRigidDynamic_TO_PxActor(PxRigidDynamic* p) { return static_cast<PxActor*>(p); }
EXPORT_API PxRigidDynamic* CAST_PxActor_TO_PxRigidDynamic(PxActor* p) { return static_cast<PxRigidDynamic*>(p); }

// PxRigidStatic
EXPORT_API void* PxRigidStatic_UserData_Get(PxRigidStatic* self) { return self->userData; }
EXPORT_API void PxRigidStatic_UserData_Set(PxRigidStatic* self, void* value) { self->userData = value; }
EXPORT_API void PxRigidStatic_Release(PxRigidStatic* self) {
    self->release();
}
EXPORT_API PxActorType::Enum PxRigidStatic_GetType(PxRigidStatic* self) {
    return self->getType();
}
EXPORT_API PxScene* PxRigidStatic_GetScene(PxRigidStatic* self) {
    return self->getScene();
}
EXPORT_API void PxRigidStatic_SetName(PxRigidStatic* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxRigidStatic_GetName(PxRigidStatic* self) {
    return self->getName();
}
EXPORT_API PxBounds3_Managed PxRigidStatic_GetWorldBounds(PxRigidStatic* self, float inflation) {
    return PxBounds3_OUT(self->getWorldBounds(inflation));
}
EXPORT_API void PxRigidStatic_SetActorFlag(PxRigidStatic* self, PxActorFlag::Enum flag, bool value) {
    self->setActorFlag(flag, value);
}
EXPORT_API void PxRigidStatic_SetActorFlags(PxRigidStatic* self, PxActorFlag::Enum inFlags) {
    self->setActorFlags((PxActorFlags) (PxU32) inFlags);
}
EXPORT_API PxActorFlag::Enum PxRigidStatic_GetActorFlags(PxRigidStatic* self) {
    return (PxActorFlag::Enum) (PxU32) self->getActorFlags();
}
EXPORT_API void PxRigidStatic_SetDominanceGroup(PxRigidStatic* self, PxDominanceGroup dominanceGroup) {
    self->setDominanceGroup(dominanceGroup);
}
EXPORT_API PxDominanceGroup PxRigidStatic_GetDominanceGroup(PxRigidStatic* self) {
    return self->getDominanceGroup();
}
EXPORT_API void PxRigidStatic_SetOwnerClient(PxRigidStatic* self, PxClientID inClient) {
    self->setOwnerClient(inClient);
}
EXPORT_API PxClientID PxRigidStatic_GetOwnerClient(PxRigidStatic* self) {
    return self->getOwnerClient();
}
EXPORT_API void PxRigidStatic_SetClientBehaviorFlags(PxRigidStatic* self, PxActorClientBehaviorFlag::Enum arg0) {
    self->setClientBehaviorFlags((PxActorClientBehaviorFlags) (PxU32) arg0);
}
EXPORT_API PxActorClientBehaviorFlag::Enum PxRigidStatic_GetClientBehaviorFlags(PxRigidStatic* self) {
    return (PxActorClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags();
}
EXPORT_API PxAggregate* PxRigidStatic_GetAggregate(PxRigidStatic* self) {
    return self->getAggregate();
}
EXPORT_API PxTransform_Managed PxRigidStatic_GetGlobalPose(PxRigidStatic* self) {
    return PxTransform_OUT(self->getGlobalPose());
}
EXPORT_API void PxRigidStatic_SetGlobalPose(PxRigidStatic* self, PxTransform_Managed pose, bool autowake) {
    self->setGlobalPose(PxTransform_IN(pose), autowake);
}
EXPORT_API void PxRigidStatic_AttachShape(PxRigidStatic* self, PxShape* shape) {
    self->attachShape(*(shape));
}
EXPORT_API void PxRigidStatic_DetachShape(PxRigidStatic* self, PxShape* shape, bool wakeOnLostTouch) {
    self->detachShape(*(shape), wakeOnLostTouch);
}
EXPORT_API PxU32 PxRigidStatic_GetNbShapes(PxRigidStatic* self) {
    return self->getNbShapes();
}
EXPORT_API PxU32 PxRigidStatic_GetShapes(PxRigidStatic* self, PxShape** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getShapes(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxRigidStatic_GetNbConstraints(PxRigidStatic* self) {
    return self->getNbConstraints();
}
EXPORT_API PxU32 PxRigidStatic_GetConstraints(PxRigidStatic* self, PxConstraint** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConstraints(userBuffer, bufferSize, startIndex);
}
EXPORT_API const char* PxRigidStatic_GetConcreteTypeName(PxRigidStatic* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxRigidActor* CAST_PxRigidStatic_TO_PxRigidActor(PxRigidStatic* p) { return static_cast<PxRigidActor*>(p); }
EXPORT_API PxRigidStatic* CAST_PxRigidActor_TO_PxRigidStatic(PxRigidActor* p) { return static_cast<PxRigidStatic*>(p); }
EXPORT_API PxActor* CAST_PxRigidStatic_TO_PxActor(PxRigidStatic* p) { return static_cast<PxActor*>(p); }
EXPORT_API PxRigidStatic* CAST_PxActor_TO_PxRigidStatic(PxActor* p) { return static_cast<PxRigidStatic*>(p); }

// PxScene
EXPORT_API void* PxScene_UserData_Get(PxScene* self) { return self->userData; }
EXPORT_API void PxScene_UserData_Set(PxScene* self, void* value) { self->userData = value; }
EXPORT_API void PxScene_Release(PxScene* self) {
    self->release();
}
EXPORT_API void PxScene_SetFlag(PxScene* self, PxSceneFlag::Enum flag, bool value) {
    self->setFlag(flag, value);
}
EXPORT_API PxSceneFlag::Enum PxScene_GetFlags(PxScene* self) {
    return (PxSceneFlag::Enum) (PxU32) self->getFlags();
}
EXPORT_API void PxScene_SetLimits(PxScene* self, PxSceneLimits_Managed limits) {
    self->setLimits(PxSceneLimits_IN(limits));
}
EXPORT_API PxSceneLimits_Managed PxScene_GetLimits(PxScene* self) {
    return PxSceneLimits_OUT(self->getLimits());
}
EXPORT_API PxPhysics* PxScene_GetPhysics(PxScene* self) {
    return &(self->getPhysics());
}
EXPORT_API PxU32 PxScene_GetTimestamp(PxScene* self) {
    return self->getTimestamp();
}
EXPORT_API void PxScene_AddArticulation(PxScene* self, PxArticulation* articulation) {
    self->addArticulation(*(articulation));
}
EXPORT_API void PxScene_RemoveArticulation(PxScene* self, PxArticulation* articulation, bool wakeOnLostTouch) {
    self->removeArticulation(*(articulation), wakeOnLostTouch);
}
EXPORT_API void PxScene_AddActor(PxScene* self, PxActor* actor) {
    self->addActor(*(actor));
}
EXPORT_API void PxScene_AddActors(PxScene* self, PxActor*const* actors, PxU32 nbActors) {
    self->addActors(actors, nbActors);
}
EXPORT_API void PxScene_RemoveActor(PxScene* self, PxActor* actor, bool wakeOnLostTouch) {
    self->removeActor(*(actor), wakeOnLostTouch);
}
EXPORT_API void PxScene_RemoveActors(PxScene* self, PxActor*const* actors, PxU32 nbActors, bool wakeOnLostTouch) {
    self->removeActors(actors, nbActors, wakeOnLostTouch);
}
EXPORT_API void PxScene_AddAggregate(PxScene* self, PxAggregate* aggregate) {
    self->addAggregate(*(aggregate));
}
EXPORT_API void PxScene_RemoveAggregate(PxScene* self, PxAggregate* aggregate, bool wakeOnLostTouch) {
    self->removeAggregate(*(aggregate), wakeOnLostTouch);
}
EXPORT_API PxU32 PxScene_GetNbActors(PxScene* self, PxActorTypeFlag::Enum types) {
    return self->getNbActors((PxActorTypeFlags) (PxU32) types);
}
EXPORT_API PxU32 PxScene_GetActors(PxScene* self, PxActorTypeFlag::Enum types, PxActor** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getActors((PxActorTypeFlags) (PxU32) types, userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxScene_GetNbArticulations(PxScene* self) {
    return self->getNbArticulations();
}
EXPORT_API PxU32 PxScene_GetArticulations(PxScene* self, PxArticulation** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getArticulations(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxScene_GetNbConstraints(PxScene* self) {
    return self->getNbConstraints();
}
EXPORT_API PxU32 PxScene_GetConstraints(PxScene* self, PxConstraint** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getConstraints(userBuffer, bufferSize, startIndex);
}
EXPORT_API PxU32 PxScene_GetNbAggregates(PxScene* self) {
    return self->getNbAggregates();
}
EXPORT_API PxU32 PxScene_GetAggregates(PxScene* self, PxAggregate** userBuffer, PxU32 bufferSize, PxU32 startIndex) {
    return self->getAggregates(userBuffer, bufferSize, startIndex);
}
EXPORT_API void PxScene_SetDominanceGroupPair(PxScene* self, PxDominanceGroup group1, PxDominanceGroup group2, PxDominanceGroupPair_Managed dominance) {
    self->setDominanceGroupPair(group1, group2, PxDominanceGroupPair_IN(dominance));
}
EXPORT_API PxDominanceGroupPair_Managed PxScene_GetDominanceGroupPair(PxScene* self, PxDominanceGroup group1, PxDominanceGroup group2) {
    return PxDominanceGroupPair_OUT(self->getDominanceGroupPair(group1, group2));
}
EXPORT_API PxCpuDispatcher* PxScene_GetCpuDispatcher(PxScene* self) {
    return self->getCpuDispatcher();
}
EXPORT_API PxGpuDispatcher* PxScene_GetGpuDispatcher(PxScene* self) {
    return self->getGpuDispatcher();
}
EXPORT_API PxSpuDispatcher* PxScene_GetSpuDispatcher(PxScene* self) {
    return self->getSpuDispatcher();
}
EXPORT_API PxClientID PxScene_CreateClient(PxScene* self) {
    return self->createClient();
}
EXPORT_API void PxScene_SetClientBehaviorFlags(PxScene* self, PxClientID client, PxClientBehaviorFlag::Enum clientBehaviorFlags) {
    self->setClientBehaviorFlags(client, (PxClientBehaviorFlags) (PxU32) clientBehaviorFlags);
}
EXPORT_API PxClientBehaviorFlag::Enum PxScene_GetClientBehaviorFlags(PxScene* self, PxClientID client) {
    return (PxClientBehaviorFlag::Enum) (PxU32) self->getClientBehaviorFlags(client);
}
EXPORT_API void PxScene_SetClothInterCollisionDistance(PxScene* self, PxF32 distance) {
    self->setClothInterCollisionDistance(distance);
}
EXPORT_API PxF32 PxScene_GetClothInterCollisionDistance(PxScene* self) {
    return self->getClothInterCollisionDistance();
}
EXPORT_API void PxScene_SetClothInterCollisionStiffness(PxScene* self, PxF32 stiffness) {
    self->setClothInterCollisionStiffness(stiffness);
}
EXPORT_API PxF32 PxScene_GetClothInterCollisionStiffness(PxScene* self) {
    return self->getClothInterCollisionStiffness();
}
EXPORT_API void PxScene_SetClothInterCollisionNbIterations(PxScene* self, PxU32 nbIterations) {
    self->setClothInterCollisionNbIterations(nbIterations);
}
EXPORT_API PxU32 PxScene_GetClothInterCollisionNbIterations(PxScene* self) {
    return self->getClothInterCollisionNbIterations();
}
EXPORT_API void PxScene_SetSimulationEventCallback(PxScene* self, PxSimulationEventCallback* callback, PxClientID client) {
    self->setSimulationEventCallback(callback, client);
}
EXPORT_API PxSimulationEventCallback* PxScene_GetSimulationEventCallback(PxScene* self, PxClientID client) {
    return self->getSimulationEventCallback(client);
}
EXPORT_API void PxScene_SetContactModifyCallback(PxScene* self, PxContactModifyCallback* callback) {
    self->setContactModifyCallback(callback);
}
EXPORT_API void PxScene_SetCCDContactModifyCallback(PxScene* self, PxCCDContactModifyCallback* callback) {
    self->setCCDContactModifyCallback(callback);
}
EXPORT_API PxContactModifyCallback* PxScene_GetContactModifyCallback(PxScene* self) {
    return self->getContactModifyCallback();
}
EXPORT_API PxCCDContactModifyCallback* PxScene_GetCCDContactModifyCallback(PxScene* self) {
    return self->getCCDContactModifyCallback();
}
EXPORT_API void PxScene_SetBroadPhaseCallback(PxScene* self, PxBroadPhaseCallback* callback, PxClientID client) {
    self->setBroadPhaseCallback(callback, client);
}
EXPORT_API PxBroadPhaseCallback* PxScene_GetBroadPhaseCallback(PxScene* self, PxClientID client) {
    return self->getBroadPhaseCallback(client);
}
EXPORT_API PxSimulationFilterCallback* PxScene_GetFilterCallback(PxScene* self) {
    return self->getFilterCallback();
}
EXPORT_API void PxScene_ResetFiltering_0(PxScene* self, PxActor* actor) {
    self->resetFiltering(*(actor));
}
EXPORT_API void PxScene_ResetFiltering_1(PxScene* self, PxRigidActor* actor, PxShape*const* shapes, PxU32 shapeCount) {
    self->resetFiltering(*(actor), shapes, shapeCount);
}
EXPORT_API bool PxScene_CheckResults(PxScene* self, bool block) {
    return self->checkResults(block);
}
EXPORT_API bool PxScene_FetchResults(PxScene* self, bool block, PxU32* errorState) {
    return self->fetchResults(block, errorState);
}
EXPORT_API void PxScene_FlushSimulation(PxScene* self, bool sendPendingReports) {
    self->flushSimulation(sendPendingReports);
}
EXPORT_API void PxScene_SetGravity(PxScene* self, PxVec3_Managed vec) {
    self->setGravity(PxVec3_IN(vec));
}
EXPORT_API PxVec3_Managed PxScene_GetGravity(PxScene* self) {
    return PxVec3_OUT(self->getGravity());
}
EXPORT_API void PxScene_SetBounceThresholdVelocity(PxScene* self, PxReal t) {
    self->setBounceThresholdVelocity(t);
}
EXPORT_API PxReal PxScene_GetBounceThresholdVelocity(PxScene* self) {
    return self->getBounceThresholdVelocity();
}
EXPORT_API void PxScene_SetCCDMaxPasses(PxScene* self, PxU32 ccdMaxPasses) {
    self->setCCDMaxPasses(ccdMaxPasses);
}
EXPORT_API PxU32 PxScene_GetCCDMaxPasses(PxScene* self) {
    return self->getCCDMaxPasses();
}
EXPORT_API PxReal PxScene_GetContactCorrelationDistance(PxScene* self) {
    return self->getContactCorrelationDistance();
}
EXPORT_API PxReal PxScene_GetFrictionOffsetThreshold(PxScene* self) {
    return self->getFrictionOffsetThreshold();
}
EXPORT_API bool PxScene_SetVisualizationParameter(PxScene* self, PxVisualizationParameter::Enum param, PxReal value) {
    return self->setVisualizationParameter(param, value);
}
EXPORT_API PxReal PxScene_GetVisualizationParameter(PxScene* self, PxVisualizationParameter::Enum paramEnum) {
    return self->getVisualizationParameter(paramEnum);
}
EXPORT_API void PxScene_SetVisualizationCullingBox(PxScene* self, PxBounds3_Managed box) {
    self->setVisualizationCullingBox(PxBounds3_IN(box));
}
EXPORT_API PxBounds3_Managed PxScene_GetVisualizationCullingBox(PxScene* self) {
    return PxBounds3_OUT(self->getVisualizationCullingBox());
}
EXPORT_API PxPruningStructure::Enum PxScene_GetStaticStructure(PxScene* self) {
    return self->getStaticStructure();
}
EXPORT_API PxPruningStructure::Enum PxScene_GetDynamicStructure(PxScene* self) {
    return self->getDynamicStructure();
}
EXPORT_API void PxScene_FlushQueryUpdates(PxScene* self) {
    self->flushQueryUpdates();
}
EXPORT_API PxVolumeCache* PxScene_CreateVolumeCache(PxScene* self, PxU32 maxStaticShapes, PxU32 maxDynamicShapes) {
    return self->createVolumeCache(maxStaticShapes, maxDynamicShapes);
}
EXPORT_API void PxScene_SetDynamicTreeRebuildRateHint(PxScene* self, PxU32 dynamicTreeRebuildRateHint) {
    self->setDynamicTreeRebuildRateHint(dynamicTreeRebuildRateHint);
}
EXPORT_API PxU32 PxScene_GetDynamicTreeRebuildRateHint(PxScene* self) {
    return self->getDynamicTreeRebuildRateHint();
}
EXPORT_API void PxScene_ForceDynamicTreeRebuild(PxScene* self, bool rebuildStaticStructure, bool rebuildDynamicStructure) {
    self->forceDynamicTreeRebuild(rebuildStaticStructure, rebuildDynamicStructure);
}
EXPORT_API PxU32 PxScene_GetSceneQueryStaticTimestamp(PxScene* self) {
    return self->getSceneQueryStaticTimestamp();
}
EXPORT_API PxBroadPhaseType::Enum PxScene_GetBroadPhaseType(PxScene* self) {
    return self->getBroadPhaseType();
}
EXPORT_API bool PxScene_GetBroadPhaseCaps(PxScene* self, PxBroadPhaseCaps* caps) {
    return self->getBroadPhaseCaps(*caps);
}
EXPORT_API PxU32 PxScene_GetNbBroadPhaseRegions(PxScene* self) {
    return self->getNbBroadPhaseRegions();
}
EXPORT_API PxU32 PxScene_AddBroadPhaseRegion(PxScene* self, PxBroadPhaseRegion_Managed region, bool populateRegion) {
    return self->addBroadPhaseRegion(PxBroadPhaseRegion_IN(region), populateRegion);
}
EXPORT_API bool PxScene_RemoveBroadPhaseRegion(PxScene* self, PxU32 handle) {
    return self->removeBroadPhaseRegion(handle);
}
EXPORT_API void PxScene_LockRead(PxScene* self, const char* file, PxU32 line) {
    self->lockRead(file, line);
}
EXPORT_API void PxScene_UnlockRead(PxScene* self) {
    self->unlockRead();
}
EXPORT_API void PxScene_LockWrite(PxScene* self, const char* file, PxU32 line) {
    self->lockWrite(file, line);
}
EXPORT_API void PxScene_UnlockWrite(PxScene* self) {
    self->unlockWrite();
}
EXPORT_API void PxScene_SetNbContactDataBlocks(PxScene* self, PxU32 numBlocks) {
    self->setNbContactDataBlocks(numBlocks);
}
EXPORT_API PxU32 PxScene_GetNbContactDataBlocksUsed(PxScene* self) {
    return self->getNbContactDataBlocksUsed();
}
EXPORT_API PxU32 PxScene_GetMaxNbContactDataBlocksUsed(PxScene* self) {
    return self->getMaxNbContactDataBlocksUsed();
}
EXPORT_API PxU32 PxScene_GetContactReportStreamBufferSize(PxScene* self) {
    return self->getContactReportStreamBufferSize();
}
EXPORT_API PxReal PxScene_GetWakeCounterResetValue(PxScene* self) {
    return self->getWakeCounterResetValue();
}
EXPORT_API void PxScene_ShiftOrigin(PxScene* self, PxVec3_Managed shift) {
    self->shiftOrigin(PxVec3_IN(shift));
}

// PxSceneDesc
EXPORT_API PxVec3_Managed PxSceneDesc_Gravity_Get(PxSceneDesc* self) { return PxVec3_OUT(self->gravity); }
EXPORT_API void PxSceneDesc_Gravity_Set(PxSceneDesc* self, PxVec3_Managed value) { self->gravity = PxVec3_IN(value); }
EXPORT_API PxSimulationEventCallback* PxSceneDesc_SimulationEventCallback_Get(PxSceneDesc* self) { return self->simulationEventCallback; }
EXPORT_API void PxSceneDesc_SimulationEventCallback_Set(PxSceneDesc* self, PxSimulationEventCallback* value) { self->simulationEventCallback = value; }
EXPORT_API PxContactModifyCallback* PxSceneDesc_ContactModifyCallback_Get(PxSceneDesc* self) { return self->contactModifyCallback; }
EXPORT_API void PxSceneDesc_ContactModifyCallback_Set(PxSceneDesc* self, PxContactModifyCallback* value) { self->contactModifyCallback = value; }
EXPORT_API PxCCDContactModifyCallback* PxSceneDesc_CcdContactModifyCallback_Get(PxSceneDesc* self) { return self->ccdContactModifyCallback; }
EXPORT_API void PxSceneDesc_CcdContactModifyCallback_Set(PxSceneDesc* self, PxCCDContactModifyCallback* value) { self->ccdContactModifyCallback = value; }
EXPORT_API PxSimulationFilterCallback* PxSceneDesc_FilterCallback_Get(PxSceneDesc* self) { return self->filterCallback; }
EXPORT_API void PxSceneDesc_FilterCallback_Set(PxSceneDesc* self, PxSimulationFilterCallback* value) { self->filterCallback = value; }
EXPORT_API PxBroadPhaseType::Enum PxSceneDesc_BroadPhaseType_Get(PxSceneDesc* self) { return self->broadPhaseType; }
EXPORT_API void PxSceneDesc_BroadPhaseType_Set(PxSceneDesc* self, PxBroadPhaseType::Enum value) { self->broadPhaseType = value; }
EXPORT_API PxBroadPhaseCallback* PxSceneDesc_BroadPhaseCallback_Get(PxSceneDesc* self) { return self->broadPhaseCallback; }
EXPORT_API void PxSceneDesc_BroadPhaseCallback_Set(PxSceneDesc* self, PxBroadPhaseCallback* value) { self->broadPhaseCallback = value; }
EXPORT_API PxSceneLimits_Managed PxSceneDesc_Limits_Get(PxSceneDesc* self) { return PxSceneLimits_OUT(self->limits); }
EXPORT_API void PxSceneDesc_Limits_Set(PxSceneDesc* self, PxSceneLimits_Managed value) { self->limits = PxSceneLimits_IN(value); }
EXPORT_API PxFrictionType::Enum PxSceneDesc_FrictionType_Get(PxSceneDesc* self) { return self->frictionType; }
EXPORT_API void PxSceneDesc_FrictionType_Set(PxSceneDesc* self, PxFrictionType::Enum value) { self->frictionType = value; }
EXPORT_API PxReal PxSceneDesc_BounceThresholdVelocity_Get(PxSceneDesc* self) { return self->bounceThresholdVelocity; }
EXPORT_API void PxSceneDesc_BounceThresholdVelocity_Set(PxSceneDesc* self, PxReal value) { self->bounceThresholdVelocity = value; }
EXPORT_API PxReal PxSceneDesc_FrictionOffsetThreshold_Get(PxSceneDesc* self) { return self->frictionOffsetThreshold; }
EXPORT_API void PxSceneDesc_FrictionOffsetThreshold_Set(PxSceneDesc* self, PxReal value) { self->frictionOffsetThreshold = value; }
EXPORT_API PxSceneFlag::Enum PxSceneDesc_Flags_Get(PxSceneDesc* self) { return (PxSceneFlag::Enum) (PxU32) self->flags; }
EXPORT_API void PxSceneDesc_Flags_Set(PxSceneDesc* self, PxSceneFlag::Enum value) { self->flags = (PxSceneFlags) (PxU32) value; }
EXPORT_API PxCpuDispatcher* PxSceneDesc_CpuDispatcher_Get(PxSceneDesc* self) { return self->cpuDispatcher; }
EXPORT_API void PxSceneDesc_CpuDispatcher_Set(PxSceneDesc* self, PxCpuDispatcher* value) { self->cpuDispatcher = value; }
EXPORT_API PxGpuDispatcher* PxSceneDesc_GpuDispatcher_Get(PxSceneDesc* self) { return self->gpuDispatcher; }
EXPORT_API void PxSceneDesc_GpuDispatcher_Set(PxSceneDesc* self, PxGpuDispatcher* value) { self->gpuDispatcher = value; }
EXPORT_API PxSpuDispatcher* PxSceneDesc_SpuDispatcher_Get(PxSceneDesc* self) { return self->spuDispatcher; }
EXPORT_API void PxSceneDesc_SpuDispatcher_Set(PxSceneDesc* self, PxSpuDispatcher* value) { self->spuDispatcher = value; }
EXPORT_API PxPruningStructure::Enum PxSceneDesc_StaticStructure_Get(PxSceneDesc* self) { return self->staticStructure; }
EXPORT_API void PxSceneDesc_StaticStructure_Set(PxSceneDesc* self, PxPruningStructure::Enum value) { self->staticStructure = value; }
EXPORT_API PxPruningStructure::Enum PxSceneDesc_DynamicStructure_Get(PxSceneDesc* self) { return self->dynamicStructure; }
EXPORT_API void PxSceneDesc_DynamicStructure_Set(PxSceneDesc* self, PxPruningStructure::Enum value) { self->dynamicStructure = value; }
EXPORT_API PxU32 PxSceneDesc_DynamicTreeRebuildRateHint_Get(PxSceneDesc* self) { return self->dynamicTreeRebuildRateHint; }
EXPORT_API void PxSceneDesc_DynamicTreeRebuildRateHint_Set(PxSceneDesc* self, PxU32 value) { self->dynamicTreeRebuildRateHint = value; }
EXPORT_API void* PxSceneDesc_UserData_Get(PxSceneDesc* self) { return self->userData; }
EXPORT_API void PxSceneDesc_UserData_Set(PxSceneDesc* self, void* value) { self->userData = value; }
EXPORT_API PxU32 PxSceneDesc_SolverBatchSize_Get(PxSceneDesc* self) { return self->solverBatchSize; }
EXPORT_API void PxSceneDesc_SolverBatchSize_Set(PxSceneDesc* self, PxU32 value) { self->solverBatchSize = value; }
EXPORT_API PxU32 PxSceneDesc_NbContactDataBlocks_Get(PxSceneDesc* self) { return self->nbContactDataBlocks; }
EXPORT_API void PxSceneDesc_NbContactDataBlocks_Set(PxSceneDesc* self, PxU32 value) { self->nbContactDataBlocks = value; }
EXPORT_API PxU32 PxSceneDesc_MaxNbContactDataBlocks_Get(PxSceneDesc* self) { return self->maxNbContactDataBlocks; }
EXPORT_API void PxSceneDesc_MaxNbContactDataBlocks_Set(PxSceneDesc* self, PxU32 value) { self->maxNbContactDataBlocks = value; }
EXPORT_API PxU32 PxSceneDesc_CcdMaxPasses_Get(PxSceneDesc* self) { return self->ccdMaxPasses; }
EXPORT_API void PxSceneDesc_CcdMaxPasses_Set(PxSceneDesc* self, PxU32 value) { self->ccdMaxPasses = value; }
EXPORT_API PxSimulationOrder::Enum PxSceneDesc_SimulationOrder_Get(PxSceneDesc* self) { return self->simulationOrder; }
EXPORT_API void PxSceneDesc_SimulationOrder_Set(PxSceneDesc* self, PxSimulationOrder::Enum value) { self->simulationOrder = value; }
EXPORT_API PxReal PxSceneDesc_WakeCounterResetValue_Get(PxSceneDesc* self) { return self->wakeCounterResetValue; }
EXPORT_API void PxSceneDesc_WakeCounterResetValue_Set(PxSceneDesc* self, PxReal value) { self->wakeCounterResetValue = value; }
EXPORT_API void PxSceneDesc_SetToDefault(PxSceneDesc* self, PxTolerancesScale_Managed scale) {
    self->setToDefault(PxTolerancesScale_IN(scale));
}
EXPORT_API bool PxSceneDesc_IsValid(PxSceneDesc* self) {
    return self->isValid();
}

// PxShape
EXPORT_API void* PxShape_UserData_Get(PxShape* self) { return self->userData; }
EXPORT_API void PxShape_UserData_Set(PxShape* self, void* value) { self->userData = value; }
EXPORT_API void PxShape_Release(PxShape* self) {
    self->release();
}
EXPORT_API void PxShape_SetGeometry(PxShape* self, const PxGeometry* geometry) {
    self->setGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetBoxGeometry(PxShape* self, PxBoxGeometry* geometry) {
    return self->getBoxGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetSphereGeometry(PxShape* self, PxSphereGeometry* geometry) {
    return self->getSphereGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetCapsuleGeometry(PxShape* self, PxCapsuleGeometry* geometry) {
    return self->getCapsuleGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetPlaneGeometry(PxShape* self, PxPlaneGeometry* geometry) {
    return self->getPlaneGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetConvexMeshGeometry(PxShape* self, PxConvexMeshGeometry* geometry) {
    return self->getConvexMeshGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetTriangleMeshGeometry(PxShape* self, PxTriangleMeshGeometry* geometry) {
    return self->getTriangleMeshGeometry(*(geometry));
}
EXPORT_API bool PxShape_GetHeightFieldGeometry(PxShape* self, PxHeightFieldGeometry* geometry) {
    return self->getHeightFieldGeometry(*(geometry));
}
EXPORT_API PxRigidActor* PxShape_GetActor(PxShape* self) {
    return self->getActor();
}
EXPORT_API void PxShape_SetLocalPose(PxShape* self, PxTransform_Managed pose) {
    self->setLocalPose(PxTransform_IN(pose));
}
EXPORT_API PxTransform_Managed PxShape_GetLocalPose(PxShape* self) {
    return PxTransform_OUT(self->getLocalPose());
}
EXPORT_API void PxShape_SetSimulationFilterData(PxShape* self, PxFilterData_Managed data) {
    self->setSimulationFilterData(PxFilterData_IN(data));
}
EXPORT_API PxFilterData_Managed PxShape_GetSimulationFilterData(PxShape* self) {
    return PxFilterData_OUT(self->getSimulationFilterData());
}
EXPORT_API void PxShape_SetQueryFilterData(PxShape* self, PxFilterData_Managed data) {
    self->setQueryFilterData(PxFilterData_IN(data));
}
EXPORT_API PxFilterData_Managed PxShape_GetQueryFilterData(PxShape* self) {
    return PxFilterData_OUT(self->getQueryFilterData());
}
EXPORT_API void PxShape_SetMaterials(PxShape* self, PxMaterial*const* materials, PxU16 materialCount) {
    self->setMaterials(materials, materialCount);
}
EXPORT_API PxU16 PxShape_GetNbMaterials(PxShape* self) {
    return self->getNbMaterials();
}
EXPORT_API PxU32 PxShape_GetMaterials(PxShape* self, PxMaterial** userBuffer, PxU32 bufferSize) {
    return self->getMaterials(userBuffer, bufferSize);
}
EXPORT_API PxMaterial* PxShape_GetMaterialFromInternalFaceIndex(PxShape* self, PxU32 faceIndex) {
    return self->getMaterialFromInternalFaceIndex(faceIndex);
}
EXPORT_API void PxShape_SetContactOffset(PxShape* self, PxReal contactOffset) {
    self->setContactOffset(contactOffset);
}
EXPORT_API PxReal PxShape_GetContactOffset(PxShape* self) {
    return self->getContactOffset();
}
EXPORT_API void PxShape_SetRestOffset(PxShape* self, PxReal restOffset) {
    self->setRestOffset(restOffset);
}
EXPORT_API PxReal PxShape_GetRestOffset(PxShape* self) {
    return self->getRestOffset();
}
EXPORT_API void PxShape_SetFlag(PxShape* self, PxShapeFlag::Enum flag, bool value) {
    self->setFlag(flag, value);
}
EXPORT_API void PxShape_SetFlags(PxShape* self, PxShapeFlag::Enum inFlags) {
    self->setFlags((PxShapeFlags) (PxU32) inFlags);
}
EXPORT_API PxShapeFlag::Enum PxShape_GetFlags(PxShape* self) {
    return (PxShapeFlag::Enum) (PxU32) self->getFlags();
}
EXPORT_API bool PxShape_IsExclusive(PxShape* self) {
    return self->isExclusive();
}
EXPORT_API void PxShape_SetName(PxShape* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxShape_GetName(PxShape* self) {
    return self->getName();
}
EXPORT_API const char* PxShape_GetConcreteTypeName(PxShape* self) {
    return self->getConcreteTypeName();
}

// PxBoxControllerDesc
EXPORT_API PxExtendedVec3_Managed PxBoxControllerDesc_Position_Get(PxBoxControllerDesc* self) { return PxExtendedVec3_OUT(self->position); }
EXPORT_API void PxBoxControllerDesc_Position_Set(PxBoxControllerDesc* self, PxExtendedVec3_Managed value) { self->position = PxExtendedVec3_IN(value); }
EXPORT_API PxVec3_Managed PxBoxControllerDesc_UpDirection_Get(PxBoxControllerDesc* self) { return PxVec3_OUT(self->upDirection); }
EXPORT_API void PxBoxControllerDesc_UpDirection_Set(PxBoxControllerDesc* self, PxVec3_Managed value) { self->upDirection = PxVec3_IN(value); }
EXPORT_API PxF32 PxBoxControllerDesc_SlopeLimit_Get(PxBoxControllerDesc* self) { return self->slopeLimit; }
EXPORT_API void PxBoxControllerDesc_SlopeLimit_Set(PxBoxControllerDesc* self, PxF32 value) { self->slopeLimit = value; }
EXPORT_API PxF32 PxBoxControllerDesc_InvisibleWallHeight_Get(PxBoxControllerDesc* self) { return self->invisibleWallHeight; }
EXPORT_API void PxBoxControllerDesc_InvisibleWallHeight_Set(PxBoxControllerDesc* self, PxF32 value) { self->invisibleWallHeight = value; }
EXPORT_API PxF32 PxBoxControllerDesc_MaxJumpHeight_Get(PxBoxControllerDesc* self) { return self->maxJumpHeight; }
EXPORT_API void PxBoxControllerDesc_MaxJumpHeight_Set(PxBoxControllerDesc* self, PxF32 value) { self->maxJumpHeight = value; }
EXPORT_API PxF32 PxBoxControllerDesc_ContactOffset_Get(PxBoxControllerDesc* self) { return self->contactOffset; }
EXPORT_API void PxBoxControllerDesc_ContactOffset_Set(PxBoxControllerDesc* self, PxF32 value) { self->contactOffset = value; }
EXPORT_API PxF32 PxBoxControllerDesc_StepOffset_Get(PxBoxControllerDesc* self) { return self->stepOffset; }
EXPORT_API void PxBoxControllerDesc_StepOffset_Set(PxBoxControllerDesc* self, PxF32 value) { self->stepOffset = value; }
EXPORT_API PxF32 PxBoxControllerDesc_Density_Get(PxBoxControllerDesc* self) { return self->density; }
EXPORT_API void PxBoxControllerDesc_Density_Set(PxBoxControllerDesc* self, PxF32 value) { self->density = value; }
EXPORT_API PxF32 PxBoxControllerDesc_ScaleCoeff_Get(PxBoxControllerDesc* self) { return self->scaleCoeff; }
EXPORT_API void PxBoxControllerDesc_ScaleCoeff_Set(PxBoxControllerDesc* self, PxF32 value) { self->scaleCoeff = value; }
EXPORT_API PxF32 PxBoxControllerDesc_VolumeGrowth_Get(PxBoxControllerDesc* self) { return self->volumeGrowth; }
EXPORT_API void PxBoxControllerDesc_VolumeGrowth_Set(PxBoxControllerDesc* self, PxF32 value) { self->volumeGrowth = value; }
EXPORT_API PxUserControllerHitReport* PxBoxControllerDesc_ReportCallback_Get(PxBoxControllerDesc* self) { return self->reportCallback; }
EXPORT_API void PxBoxControllerDesc_ReportCallback_Set(PxBoxControllerDesc* self, PxUserControllerHitReport* value) { self->reportCallback = value; }
EXPORT_API PxControllerBehaviorCallback* PxBoxControllerDesc_BehaviorCallback_Get(PxBoxControllerDesc* self) { return self->behaviorCallback; }
EXPORT_API void PxBoxControllerDesc_BehaviorCallback_Set(PxBoxControllerDesc* self, PxControllerBehaviorCallback* value) { self->behaviorCallback = value; }
EXPORT_API PxControllerNonWalkableMode::Enum PxBoxControllerDesc_NonWalkableMode_Get(PxBoxControllerDesc* self) { return self->nonWalkableMode; }
EXPORT_API void PxBoxControllerDesc_NonWalkableMode_Set(PxBoxControllerDesc* self, PxControllerNonWalkableMode::Enum value) { self->nonWalkableMode = value; }
EXPORT_API PxMaterial* PxBoxControllerDesc_Material_Get(PxBoxControllerDesc* self) { return self->material; }
EXPORT_API void PxBoxControllerDesc_Material_Set(PxBoxControllerDesc* self, PxMaterial* value) { self->material = value; }
EXPORT_API void* PxBoxControllerDesc_UserData_Get(PxBoxControllerDesc* self) { return self->userData; }
EXPORT_API void PxBoxControllerDesc_UserData_Set(PxBoxControllerDesc* self, void* value) { self->userData = value; }
EXPORT_API PxF32 PxBoxControllerDesc_HalfHeight_Get(PxBoxControllerDesc* self) { return self->halfHeight; }
EXPORT_API void PxBoxControllerDesc_HalfHeight_Set(PxBoxControllerDesc* self, PxF32 value) { self->halfHeight = value; }
EXPORT_API PxF32 PxBoxControllerDesc_HalfSideExtent_Get(PxBoxControllerDesc* self) { return self->halfSideExtent; }
EXPORT_API void PxBoxControllerDesc_HalfSideExtent_Set(PxBoxControllerDesc* self, PxF32 value) { self->halfSideExtent = value; }
EXPORT_API PxF32 PxBoxControllerDesc_HalfForwardExtent_Get(PxBoxControllerDesc* self) { return self->halfForwardExtent; }
EXPORT_API void PxBoxControllerDesc_HalfForwardExtent_Set(PxBoxControllerDesc* self, PxF32 value) { self->halfForwardExtent = value; }
EXPORT_API bool PxBoxControllerDesc_IsValid(PxBoxControllerDesc* self) {
    return self->isValid();
}
EXPORT_API PxControllerShapeType::Enum PxBoxControllerDesc_GetType(PxBoxControllerDesc* self) {
    return self->getType();
}
EXPORT_API void PxBoxControllerDesc_SetToDefault(PxBoxControllerDesc* self) {
    self->setToDefault();
}
EXPORT_API PxControllerDesc* CAST_PxBoxControllerDesc_TO_PxControllerDesc(PxBoxControllerDesc* p) { return static_cast<PxControllerDesc*>(p); }
EXPORT_API PxBoxControllerDesc* CAST_PxControllerDesc_TO_PxBoxControllerDesc(PxControllerDesc* p) { return static_cast<PxBoxControllerDesc*>(p); }

// PxCapsuleControllerDesc
EXPORT_API PxExtendedVec3_Managed PxCapsuleControllerDesc_Position_Get(PxCapsuleControllerDesc* self) { return PxExtendedVec3_OUT(self->position); }
EXPORT_API void PxCapsuleControllerDesc_Position_Set(PxCapsuleControllerDesc* self, PxExtendedVec3_Managed value) { self->position = PxExtendedVec3_IN(value); }
EXPORT_API PxVec3_Managed PxCapsuleControllerDesc_UpDirection_Get(PxCapsuleControllerDesc* self) { return PxVec3_OUT(self->upDirection); }
EXPORT_API void PxCapsuleControllerDesc_UpDirection_Set(PxCapsuleControllerDesc* self, PxVec3_Managed value) { self->upDirection = PxVec3_IN(value); }
EXPORT_API PxF32 PxCapsuleControllerDesc_SlopeLimit_Get(PxCapsuleControllerDesc* self) { return self->slopeLimit; }
EXPORT_API void PxCapsuleControllerDesc_SlopeLimit_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->slopeLimit = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_InvisibleWallHeight_Get(PxCapsuleControllerDesc* self) { return self->invisibleWallHeight; }
EXPORT_API void PxCapsuleControllerDesc_InvisibleWallHeight_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->invisibleWallHeight = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_MaxJumpHeight_Get(PxCapsuleControllerDesc* self) { return self->maxJumpHeight; }
EXPORT_API void PxCapsuleControllerDesc_MaxJumpHeight_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->maxJumpHeight = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_ContactOffset_Get(PxCapsuleControllerDesc* self) { return self->contactOffset; }
EXPORT_API void PxCapsuleControllerDesc_ContactOffset_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->contactOffset = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_StepOffset_Get(PxCapsuleControllerDesc* self) { return self->stepOffset; }
EXPORT_API void PxCapsuleControllerDesc_StepOffset_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->stepOffset = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_Density_Get(PxCapsuleControllerDesc* self) { return self->density; }
EXPORT_API void PxCapsuleControllerDesc_Density_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->density = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_ScaleCoeff_Get(PxCapsuleControllerDesc* self) { return self->scaleCoeff; }
EXPORT_API void PxCapsuleControllerDesc_ScaleCoeff_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->scaleCoeff = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_VolumeGrowth_Get(PxCapsuleControllerDesc* self) { return self->volumeGrowth; }
EXPORT_API void PxCapsuleControllerDesc_VolumeGrowth_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->volumeGrowth = value; }
EXPORT_API PxUserControllerHitReport* PxCapsuleControllerDesc_ReportCallback_Get(PxCapsuleControllerDesc* self) { return self->reportCallback; }
EXPORT_API void PxCapsuleControllerDesc_ReportCallback_Set(PxCapsuleControllerDesc* self, PxUserControllerHitReport* value) { self->reportCallback = value; }
EXPORT_API PxControllerBehaviorCallback* PxCapsuleControllerDesc_BehaviorCallback_Get(PxCapsuleControllerDesc* self) { return self->behaviorCallback; }
EXPORT_API void PxCapsuleControllerDesc_BehaviorCallback_Set(PxCapsuleControllerDesc* self, PxControllerBehaviorCallback* value) { self->behaviorCallback = value; }
EXPORT_API PxControllerNonWalkableMode::Enum PxCapsuleControllerDesc_NonWalkableMode_Get(PxCapsuleControllerDesc* self) { return self->nonWalkableMode; }
EXPORT_API void PxCapsuleControllerDesc_NonWalkableMode_Set(PxCapsuleControllerDesc* self, PxControllerNonWalkableMode::Enum value) { self->nonWalkableMode = value; }
EXPORT_API PxMaterial* PxCapsuleControllerDesc_Material_Get(PxCapsuleControllerDesc* self) { return self->material; }
EXPORT_API void PxCapsuleControllerDesc_Material_Set(PxCapsuleControllerDesc* self, PxMaterial* value) { self->material = value; }
EXPORT_API void* PxCapsuleControllerDesc_UserData_Get(PxCapsuleControllerDesc* self) { return self->userData; }
EXPORT_API void PxCapsuleControllerDesc_UserData_Set(PxCapsuleControllerDesc* self, void* value) { self->userData = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_Radius_Get(PxCapsuleControllerDesc* self) { return self->radius; }
EXPORT_API void PxCapsuleControllerDesc_Radius_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->radius = value; }
EXPORT_API PxF32 PxCapsuleControllerDesc_Height_Get(PxCapsuleControllerDesc* self) { return self->height; }
EXPORT_API void PxCapsuleControllerDesc_Height_Set(PxCapsuleControllerDesc* self, PxF32 value) { self->height = value; }
EXPORT_API PxCapsuleClimbingMode::Enum PxCapsuleControllerDesc_ClimbingMode_Get(PxCapsuleControllerDesc* self) { return self->climbingMode; }
EXPORT_API void PxCapsuleControllerDesc_ClimbingMode_Set(PxCapsuleControllerDesc* self, PxCapsuleClimbingMode::Enum value) { self->climbingMode = value; }
EXPORT_API bool PxCapsuleControllerDesc_IsValid(PxCapsuleControllerDesc* self) {
    return self->isValid();
}
EXPORT_API PxControllerShapeType::Enum PxCapsuleControllerDesc_GetType(PxCapsuleControllerDesc* self) {
    return self->getType();
}
EXPORT_API void PxCapsuleControllerDesc_SetToDefault(PxCapsuleControllerDesc* self) {
    self->setToDefault();
}
EXPORT_API PxControllerDesc* CAST_PxCapsuleControllerDesc_TO_PxControllerDesc(PxCapsuleControllerDesc* p) { return static_cast<PxControllerDesc*>(p); }
EXPORT_API PxCapsuleControllerDesc* CAST_PxControllerDesc_TO_PxCapsuleControllerDesc(PxControllerDesc* p) { return static_cast<PxCapsuleControllerDesc*>(p); }

// PxControllerDesc
EXPORT_API PxExtendedVec3_Managed PxControllerDesc_Position_Get(PxControllerDesc* self) { return PxExtendedVec3_OUT(self->position); }
EXPORT_API void PxControllerDesc_Position_Set(PxControllerDesc* self, PxExtendedVec3_Managed value) { self->position = PxExtendedVec3_IN(value); }
EXPORT_API PxVec3_Managed PxControllerDesc_UpDirection_Get(PxControllerDesc* self) { return PxVec3_OUT(self->upDirection); }
EXPORT_API void PxControllerDesc_UpDirection_Set(PxControllerDesc* self, PxVec3_Managed value) { self->upDirection = PxVec3_IN(value); }
EXPORT_API PxF32 PxControllerDesc_SlopeLimit_Get(PxControllerDesc* self) { return self->slopeLimit; }
EXPORT_API void PxControllerDesc_SlopeLimit_Set(PxControllerDesc* self, PxF32 value) { self->slopeLimit = value; }
EXPORT_API PxF32 PxControllerDesc_InvisibleWallHeight_Get(PxControllerDesc* self) { return self->invisibleWallHeight; }
EXPORT_API void PxControllerDesc_InvisibleWallHeight_Set(PxControllerDesc* self, PxF32 value) { self->invisibleWallHeight = value; }
EXPORT_API PxF32 PxControllerDesc_MaxJumpHeight_Get(PxControllerDesc* self) { return self->maxJumpHeight; }
EXPORT_API void PxControllerDesc_MaxJumpHeight_Set(PxControllerDesc* self, PxF32 value) { self->maxJumpHeight = value; }
EXPORT_API PxF32 PxControllerDesc_ContactOffset_Get(PxControllerDesc* self) { return self->contactOffset; }
EXPORT_API void PxControllerDesc_ContactOffset_Set(PxControllerDesc* self, PxF32 value) { self->contactOffset = value; }
EXPORT_API PxF32 PxControllerDesc_StepOffset_Get(PxControllerDesc* self) { return self->stepOffset; }
EXPORT_API void PxControllerDesc_StepOffset_Set(PxControllerDesc* self, PxF32 value) { self->stepOffset = value; }
EXPORT_API PxF32 PxControllerDesc_Density_Get(PxControllerDesc* self) { return self->density; }
EXPORT_API void PxControllerDesc_Density_Set(PxControllerDesc* self, PxF32 value) { self->density = value; }
EXPORT_API PxF32 PxControllerDesc_ScaleCoeff_Get(PxControllerDesc* self) { return self->scaleCoeff; }
EXPORT_API void PxControllerDesc_ScaleCoeff_Set(PxControllerDesc* self, PxF32 value) { self->scaleCoeff = value; }
EXPORT_API PxF32 PxControllerDesc_VolumeGrowth_Get(PxControllerDesc* self) { return self->volumeGrowth; }
EXPORT_API void PxControllerDesc_VolumeGrowth_Set(PxControllerDesc* self, PxF32 value) { self->volumeGrowth = value; }
EXPORT_API PxUserControllerHitReport* PxControllerDesc_ReportCallback_Get(PxControllerDesc* self) { return self->reportCallback; }
EXPORT_API void PxControllerDesc_ReportCallback_Set(PxControllerDesc* self, PxUserControllerHitReport* value) { self->reportCallback = value; }
EXPORT_API PxControllerBehaviorCallback* PxControllerDesc_BehaviorCallback_Get(PxControllerDesc* self) { return self->behaviorCallback; }
EXPORT_API void PxControllerDesc_BehaviorCallback_Set(PxControllerDesc* self, PxControllerBehaviorCallback* value) { self->behaviorCallback = value; }
EXPORT_API PxControllerNonWalkableMode::Enum PxControllerDesc_NonWalkableMode_Get(PxControllerDesc* self) { return self->nonWalkableMode; }
EXPORT_API void PxControllerDesc_NonWalkableMode_Set(PxControllerDesc* self, PxControllerNonWalkableMode::Enum value) { self->nonWalkableMode = value; }
EXPORT_API PxMaterial* PxControllerDesc_Material_Get(PxControllerDesc* self) { return self->material; }
EXPORT_API void PxControllerDesc_Material_Set(PxControllerDesc* self, PxMaterial* value) { self->material = value; }
EXPORT_API void* PxControllerDesc_UserData_Get(PxControllerDesc* self) { return self->userData; }
EXPORT_API void PxControllerDesc_UserData_Set(PxControllerDesc* self, void* value) { self->userData = value; }
EXPORT_API bool PxControllerDesc_IsValid(PxControllerDesc* self) {
    return self->isValid();
}
EXPORT_API PxControllerShapeType::Enum PxControllerDesc_GetType(PxControllerDesc* self) {
    return self->getType();
}

// PxController
EXPORT_API PxControllerShapeType::Enum PxController_GetType(PxController* self) {
    return self->getType();
}
EXPORT_API void PxController_Release(PxController* self) {
    self->release();
}
EXPORT_API bool PxController_SetPosition(PxController* self, PxExtendedVec3_Managed position) {
    return self->setPosition(PxExtendedVec3_IN(position));
}
EXPORT_API PxExtendedVec3_Managed PxController_GetPosition(PxController* self) {
    return PxExtendedVec3_OUT(self->getPosition());
}
EXPORT_API bool PxController_SetFootPosition(PxController* self, PxExtendedVec3_Managed position) {
    return self->setFootPosition(PxExtendedVec3_IN(position));
}
EXPORT_API PxExtendedVec3_Managed PxController_GetFootPosition(PxController* self) {
    return PxExtendedVec3_OUT(self->getFootPosition());
}
EXPORT_API PxRigidDynamic* PxController_GetActor(PxController* self) {
    return self->getActor();
}
EXPORT_API void PxController_SetStepOffset(PxController* self, PxF32 offset) {
    self->setStepOffset(offset);
}
EXPORT_API PxF32 PxController_GetStepOffset(PxController* self) {
    return self->getStepOffset();
}
EXPORT_API void PxController_SetNonWalkableMode(PxController* self, PxControllerNonWalkableMode::Enum flag) {
    self->setNonWalkableMode(flag);
}
EXPORT_API PxControllerNonWalkableMode::Enum PxController_GetNonWalkableMode(PxController* self) {
    return self->getNonWalkableMode();
}
EXPORT_API PxF32 PxController_GetContactOffset(PxController* self) {
    return self->getContactOffset();
}
EXPORT_API void PxController_SetContactOffset(PxController* self, PxF32 offset) {
    self->setContactOffset(offset);
}
EXPORT_API PxVec3_Managed PxController_GetUpDirection(PxController* self) {
    return PxVec3_OUT(self->getUpDirection());
}
EXPORT_API void PxController_SetUpDirection(PxController* self, PxVec3_Managed up) {
    self->setUpDirection(PxVec3_IN(up));
}
EXPORT_API PxF32 PxController_GetSlopeLimit(PxController* self) {
    return self->getSlopeLimit();
}
EXPORT_API void PxController_SetSlopeLimit(PxController* self, PxF32 slopeLimit) {
    self->setSlopeLimit(slopeLimit);
}
EXPORT_API void PxController_InvalidateCache(PxController* self) {
    self->invalidateCache();
}
EXPORT_API PxScene* PxController_GetScene(PxController* self) {
    return self->getScene();
}
EXPORT_API void* PxController_GetUserData(PxController* self) {
    return self->getUserData();
}
EXPORT_API void PxController_SetUserData(PxController* self, void* userData) {
    self->setUserData(userData);
}
EXPORT_API void PxController_GetState(PxController* self, PxControllerState_Managed* state) {
    PxControllerState state_tmp;
    self->getState(state_tmp);
    *state = PxControllerState_OUT(state_tmp);
}
EXPORT_API void PxController_GetStats(PxController* self, PxControllerStats* stats) {
    self->getStats(*stats);
}
EXPORT_API void PxController_Resize(PxController* self, PxReal height) {
    self->resize(height);
}

// PxControllerManager
EXPORT_API void PxControllerManager_Release(PxControllerManager* self) {
    self->release();
}
EXPORT_API PxScene* PxControllerManager_GetScene(PxControllerManager* self) {
    return &(self->getScene());
}
EXPORT_API PxU32 PxControllerManager_GetNbControllers(PxControllerManager* self) {
    return self->getNbControllers();
}
EXPORT_API PxController* PxControllerManager_GetController(PxControllerManager* self, PxU32 index) {
    return self->getController(index);
}
EXPORT_API PxController* PxControllerManager_CreateController(PxControllerManager* self, const PxControllerDesc* desc) {
    return self->createController(*(desc));
}
EXPORT_API void PxControllerManager_PurgeControllers(PxControllerManager* self) {
    self->purgeControllers();
}
EXPORT_API void PxControllerManager_SetDebugRenderingFlags(PxControllerManager* self, PxControllerDebugRenderFlag::Enum flags) {
    self->setDebugRenderingFlags((PxControllerDebugRenderFlags) (PxU32) flags);
}
EXPORT_API PxU32 PxControllerManager_GetNbObstacleContexts(PxControllerManager* self) {
    return self->getNbObstacleContexts();
}
EXPORT_API PxObstacleContext* PxControllerManager_GetObstacleContext(PxControllerManager* self, PxU32 index) {
    return self->getObstacleContext(index);
}
EXPORT_API PxObstacleContext* PxControllerManager_CreateObstacleContext(PxControllerManager* self) {
    return self->createObstacleContext();
}
EXPORT_API void PxControllerManager_SetTessellation(PxControllerManager* self, bool flag, float maxEdgeLength) {
    self->setTessellation(flag, maxEdgeLength);
}
EXPORT_API void PxControllerManager_ShiftOrigin(PxControllerManager* self, PxVec3_Managed shift) {
    self->shiftOrigin(PxVec3_IN(shift));
}

// PxObstacle
EXPORT_API void* PxObstacle_MUserData_Get(PxObstacle* self) { return self->mUserData; }
EXPORT_API void PxObstacle_MUserData_Set(PxObstacle* self, void* value) { self->mUserData = value; }
EXPORT_API PxExtendedVec3_Managed PxObstacle_MPos_Get(PxObstacle* self) { return PxExtendedVec3_OUT(self->mPos); }
EXPORT_API void PxObstacle_MPos_Set(PxObstacle* self, PxExtendedVec3_Managed value) { self->mPos = PxExtendedVec3_IN(value); }
EXPORT_API PxQuat_Managed PxObstacle_MRot_Get(PxObstacle* self) { return PxQuat_OUT(self->mRot); }
EXPORT_API void PxObstacle_MRot_Set(PxObstacle* self, PxQuat_Managed value) { self->mRot = PxQuat_IN(value); }
EXPORT_API PxGeometryType::Enum PxObstacle_GetType(PxObstacle* self) {
    return self->getType();
}

// PxBoxObstacle
EXPORT_API void* PxBoxObstacle_MUserData_Get(PxBoxObstacle* self) { return self->mUserData; }
EXPORT_API void PxBoxObstacle_MUserData_Set(PxBoxObstacle* self, void* value) { self->mUserData = value; }
EXPORT_API PxExtendedVec3_Managed PxBoxObstacle_MPos_Get(PxBoxObstacle* self) { return PxExtendedVec3_OUT(self->mPos); }
EXPORT_API void PxBoxObstacle_MPos_Set(PxBoxObstacle* self, PxExtendedVec3_Managed value) { self->mPos = PxExtendedVec3_IN(value); }
EXPORT_API PxQuat_Managed PxBoxObstacle_MRot_Get(PxBoxObstacle* self) { return PxQuat_OUT(self->mRot); }
EXPORT_API void PxBoxObstacle_MRot_Set(PxBoxObstacle* self, PxQuat_Managed value) { self->mRot = PxQuat_IN(value); }
EXPORT_API PxVec3_Managed PxBoxObstacle_MHalfExtents_Get(PxBoxObstacle* self) { return PxVec3_OUT(self->mHalfExtents); }
EXPORT_API void PxBoxObstacle_MHalfExtents_Set(PxBoxObstacle* self, PxVec3_Managed value) { self->mHalfExtents = PxVec3_IN(value); }
EXPORT_API PxGeometryType::Enum PxBoxObstacle_GetType(PxBoxObstacle* self) {
    return self->getType();
}
EXPORT_API PxObstacle* CAST_PxBoxObstacle_TO_PxObstacle(PxBoxObstacle* p) { return static_cast<PxObstacle*>(p); }
EXPORT_API PxBoxObstacle* CAST_PxObstacle_TO_PxBoxObstacle(PxObstacle* p) { return static_cast<PxBoxObstacle*>(p); }

// PxCapsuleObstacle
EXPORT_API void* PxCapsuleObstacle_MUserData_Get(PxCapsuleObstacle* self) { return self->mUserData; }
EXPORT_API void PxCapsuleObstacle_MUserData_Set(PxCapsuleObstacle* self, void* value) { self->mUserData = value; }
EXPORT_API PxExtendedVec3_Managed PxCapsuleObstacle_MPos_Get(PxCapsuleObstacle* self) { return PxExtendedVec3_OUT(self->mPos); }
EXPORT_API void PxCapsuleObstacle_MPos_Set(PxCapsuleObstacle* self, PxExtendedVec3_Managed value) { self->mPos = PxExtendedVec3_IN(value); }
EXPORT_API PxQuat_Managed PxCapsuleObstacle_MRot_Get(PxCapsuleObstacle* self) { return PxQuat_OUT(self->mRot); }
EXPORT_API void PxCapsuleObstacle_MRot_Set(PxCapsuleObstacle* self, PxQuat_Managed value) { self->mRot = PxQuat_IN(value); }
EXPORT_API PxReal PxCapsuleObstacle_MHalfHeight_Get(PxCapsuleObstacle* self) { return self->mHalfHeight; }
EXPORT_API void PxCapsuleObstacle_MHalfHeight_Set(PxCapsuleObstacle* self, PxReal value) { self->mHalfHeight = value; }
EXPORT_API PxReal PxCapsuleObstacle_MRadius_Get(PxCapsuleObstacle* self) { return self->mRadius; }
EXPORT_API void PxCapsuleObstacle_MRadius_Set(PxCapsuleObstacle* self, PxReal value) { self->mRadius = value; }
EXPORT_API PxGeometryType::Enum PxCapsuleObstacle_GetType(PxCapsuleObstacle* self) {
    return self->getType();
}
EXPORT_API PxObstacle* CAST_PxCapsuleObstacle_TO_PxObstacle(PxCapsuleObstacle* p) { return static_cast<PxObstacle*>(p); }
EXPORT_API PxCapsuleObstacle* CAST_PxObstacle_TO_PxCapsuleObstacle(PxObstacle* p) { return static_cast<PxCapsuleObstacle*>(p); }

// PxObstacleContext
EXPORT_API void PxObstacleContext_Release(PxObstacleContext* self) {
    self->release();
}
EXPORT_API PxControllerManager* PxObstacleContext_GetControllerManager(PxObstacleContext* self) {
    return &(self->getControllerManager());
}
EXPORT_API ObstacleHandle PxObstacleContext_AddObstacle(PxObstacleContext* self, const PxObstacle* obstacle) {
    return self->addObstacle(*(obstacle));
}
EXPORT_API bool PxObstacleContext_RemoveObstacle(PxObstacleContext* self, ObstacleHandle handle) {
    return self->removeObstacle(handle);
}
EXPORT_API bool PxObstacleContext_UpdateObstacle(PxObstacleContext* self, ObstacleHandle handle, const PxObstacle* obstacle) {
    return self->updateObstacle(handle, *(obstacle));
}
EXPORT_API PxU32 PxObstacleContext_GetNbObstacles(PxObstacleContext* self) {
    return self->getNbObstacles();
}
EXPORT_API const PxObstacle* PxObstacleContext_GetObstacle(PxObstacleContext* self, PxU32 i) {
    return self->getObstacle(i);
}
EXPORT_API const PxObstacle* PxObstacleContext_GetObstacleByHandle(PxObstacleContext* self, ObstacleHandle handle) {
    return self->getObstacleByHandle(handle);
}

// PxInputStream
EXPORT_API PxU32 PxInputStream_Read(PxInputStream* self, void* dest, PxU32 count) {
    return self->read(dest, count);
}

// PxOutputStream
EXPORT_API PxU32 PxOutputStream_Write(PxOutputStream* self, const void* src, PxU32 count) {
    return self->write(src, count);
}

// PxD6Joint
EXPORT_API void* PxD6Joint_UserData_Get(PxD6Joint* self) { return self->userData; }
EXPORT_API void PxD6Joint_UserData_Set(PxD6Joint* self, void* value) { self->userData = value; }
EXPORT_API void PxD6Joint_SetActors(PxD6Joint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxD6Joint_GetActors(PxD6Joint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxD6Joint_SetLocalPose(PxD6Joint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxD6Joint_GetLocalPose(PxD6Joint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxD6Joint_GetRelativeTransform(PxD6Joint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxD6Joint_GetRelativeLinearVelocity(PxD6Joint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxD6Joint_GetRelativeAngularVelocity(PxD6Joint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxD6Joint_SetBreakForce(PxD6Joint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxD6Joint_GetBreakForce(PxD6Joint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxD6Joint_SetConstraintFlags(PxD6Joint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxD6Joint_SetConstraintFlag(PxD6Joint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxD6Joint_GetConstraintFlags(PxD6Joint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxD6Joint_SetInvMassScale0(PxD6Joint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxD6Joint_GetInvMassScale0(PxD6Joint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxD6Joint_SetInvInertiaScale0(PxD6Joint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxD6Joint_GetInvInertiaScale0(PxD6Joint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxD6Joint_SetInvMassScale1(PxD6Joint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxD6Joint_GetInvMassScale1(PxD6Joint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxD6Joint_SetInvInertiaScale1(PxD6Joint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxD6Joint_GetInvInertiaScale1(PxD6Joint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxD6Joint_GetConstraint(PxD6Joint* self) {
    return self->getConstraint();
}
EXPORT_API void PxD6Joint_SetName(PxD6Joint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxD6Joint_GetName(PxD6Joint* self) {
    return self->getName();
}
EXPORT_API void PxD6Joint_Release(PxD6Joint* self) {
    self->release();
}
EXPORT_API PxScene* PxD6Joint_GetScene(PxD6Joint* self) {
    return self->getScene();
}
EXPORT_API void PxD6Joint_SetMotion(PxD6Joint* self, PxD6Axis::Enum axis, PxD6Motion::Enum type) {
    self->setMotion(axis, type);
}
EXPORT_API PxD6Motion::Enum PxD6Joint_GetMotion(PxD6Joint* self, PxD6Axis::Enum axis) {
    return self->getMotion(axis);
}
EXPORT_API PxReal PxD6Joint_GetTwist(PxD6Joint* self) {
    return self->getTwist();
}
EXPORT_API PxReal PxD6Joint_GetSwingYAngle(PxD6Joint* self) {
    return self->getSwingYAngle();
}
EXPORT_API PxReal PxD6Joint_GetSwingZAngle(PxD6Joint* self) {
    return self->getSwingZAngle();
}
EXPORT_API void PxD6Joint_SetLinearLimit(PxD6Joint* self, PxJointLinearLimit_Managed limit) {
    self->setLinearLimit(PxJointLinearLimit_IN(limit));
}
EXPORT_API PxJointLinearLimit_Managed PxD6Joint_GetLinearLimit(PxD6Joint* self) {
    return PxJointLinearLimit_OUT(self->getLinearLimit());
}
EXPORT_API void PxD6Joint_SetTwistLimit(PxD6Joint* self, PxJointAngularLimitPair_Managed limit) {
    self->setTwistLimit(PxJointAngularLimitPair_IN(limit));
}
EXPORT_API PxJointAngularLimitPair_Managed PxD6Joint_GetTwistLimit(PxD6Joint* self) {
    return PxJointAngularLimitPair_OUT(self->getTwistLimit());
}
EXPORT_API void PxD6Joint_SetSwingLimit(PxD6Joint* self, PxJointLimitCone_Managed limit) {
    self->setSwingLimit(PxJointLimitCone_IN(limit));
}
EXPORT_API PxJointLimitCone_Managed PxD6Joint_GetSwingLimit(PxD6Joint* self) {
    return PxJointLimitCone_OUT(self->getSwingLimit());
}
EXPORT_API void PxD6Joint_SetDrive(PxD6Joint* self, PxD6Drive::Enum index, PxD6JointDrive_Managed drive) {
    self->setDrive(index, PxD6JointDrive_IN(drive));
}
EXPORT_API PxD6JointDrive_Managed PxD6Joint_GetDrive(PxD6Joint* self, PxD6Drive::Enum index) {
    return PxD6JointDrive_OUT(self->getDrive(index));
}
EXPORT_API void PxD6Joint_SetDrivePosition(PxD6Joint* self, PxTransform_Managed pose) {
    self->setDrivePosition(PxTransform_IN(pose));
}
EXPORT_API PxTransform_Managed PxD6Joint_GetDrivePosition(PxD6Joint* self) {
    return PxTransform_OUT(self->getDrivePosition());
}
EXPORT_API void PxD6Joint_SetDriveVelocity(PxD6Joint* self, PxVec3_Managed linear, PxVec3_Managed angular) {
    self->setDriveVelocity(PxVec3_IN(linear), PxVec3_IN(angular));
}
EXPORT_API void PxD6Joint_GetDriveVelocity(PxD6Joint* self, PxVec3_Managed* linear, PxVec3_Managed* angular) {
    PxVec3 linear_tmp;
    PxVec3 angular_tmp;
    self->getDriveVelocity(linear_tmp, angular_tmp);
    *linear = PxVec3_OUT(linear_tmp);
    *angular = PxVec3_OUT(angular_tmp);
}
EXPORT_API void PxD6Joint_SetProjectionLinearTolerance(PxD6Joint* self, PxReal tolerance) {
    self->setProjectionLinearTolerance(tolerance);
}
EXPORT_API PxReal PxD6Joint_GetProjectionLinearTolerance(PxD6Joint* self) {
    return self->getProjectionLinearTolerance();
}
EXPORT_API void PxD6Joint_SetProjectionAngularTolerance(PxD6Joint* self, PxReal tolerance) {
    self->setProjectionAngularTolerance(tolerance);
}
EXPORT_API PxReal PxD6Joint_GetProjectionAngularTolerance(PxD6Joint* self) {
    return self->getProjectionAngularTolerance();
}
EXPORT_API const char* PxD6Joint_GetConcreteTypeName(PxD6Joint* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxJoint* CAST_PxD6Joint_TO_PxJoint(PxD6Joint* p) { return static_cast<PxJoint*>(p); }
EXPORT_API PxD6Joint* CAST_PxJoint_TO_PxD6Joint(PxJoint* p) { return static_cast<PxD6Joint*>(p); }

// PxDistanceJoint
EXPORT_API void* PxDistanceJoint_UserData_Get(PxDistanceJoint* self) { return self->userData; }
EXPORT_API void PxDistanceJoint_UserData_Set(PxDistanceJoint* self, void* value) { self->userData = value; }
EXPORT_API void PxDistanceJoint_SetActors(PxDistanceJoint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxDistanceJoint_GetActors(PxDistanceJoint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxDistanceJoint_SetLocalPose(PxDistanceJoint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxDistanceJoint_GetLocalPose(PxDistanceJoint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxDistanceJoint_GetRelativeTransform(PxDistanceJoint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxDistanceJoint_GetRelativeLinearVelocity(PxDistanceJoint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxDistanceJoint_GetRelativeAngularVelocity(PxDistanceJoint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxDistanceJoint_SetBreakForce(PxDistanceJoint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxDistanceJoint_GetBreakForce(PxDistanceJoint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxDistanceJoint_SetConstraintFlags(PxDistanceJoint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxDistanceJoint_SetConstraintFlag(PxDistanceJoint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxDistanceJoint_GetConstraintFlags(PxDistanceJoint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxDistanceJoint_SetInvMassScale0(PxDistanceJoint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxDistanceJoint_GetInvMassScale0(PxDistanceJoint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxDistanceJoint_SetInvInertiaScale0(PxDistanceJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxDistanceJoint_GetInvInertiaScale0(PxDistanceJoint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxDistanceJoint_SetInvMassScale1(PxDistanceJoint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxDistanceJoint_GetInvMassScale1(PxDistanceJoint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxDistanceJoint_SetInvInertiaScale1(PxDistanceJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxDistanceJoint_GetInvInertiaScale1(PxDistanceJoint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxDistanceJoint_GetConstraint(PxDistanceJoint* self) {
    return self->getConstraint();
}
EXPORT_API void PxDistanceJoint_SetName(PxDistanceJoint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxDistanceJoint_GetName(PxDistanceJoint* self) {
    return self->getName();
}
EXPORT_API void PxDistanceJoint_Release(PxDistanceJoint* self) {
    self->release();
}
EXPORT_API PxScene* PxDistanceJoint_GetScene(PxDistanceJoint* self) {
    return self->getScene();
}
EXPORT_API PxReal PxDistanceJoint_GetDistance(PxDistanceJoint* self) {
    return self->getDistance();
}
EXPORT_API void PxDistanceJoint_SetMinDistance(PxDistanceJoint* self, PxReal distance) {
    self->setMinDistance(distance);
}
EXPORT_API PxReal PxDistanceJoint_GetMinDistance(PxDistanceJoint* self) {
    return self->getMinDistance();
}
EXPORT_API void PxDistanceJoint_SetMaxDistance(PxDistanceJoint* self, PxReal distance) {
    self->setMaxDistance(distance);
}
EXPORT_API PxReal PxDistanceJoint_GetMaxDistance(PxDistanceJoint* self) {
    return self->getMaxDistance();
}
EXPORT_API void PxDistanceJoint_SetTolerance(PxDistanceJoint* self, PxReal tolerance) {
    self->setTolerance(tolerance);
}
EXPORT_API PxReal PxDistanceJoint_GetTolerance(PxDistanceJoint* self) {
    return self->getTolerance();
}
EXPORT_API void PxDistanceJoint_SetStiffness(PxDistanceJoint* self, PxReal stiffness) {
    self->setStiffness(stiffness);
}
EXPORT_API PxReal PxDistanceJoint_GetStiffness(PxDistanceJoint* self) {
    return self->getStiffness();
}
EXPORT_API void PxDistanceJoint_SetDamping(PxDistanceJoint* self, PxReal damping) {
    self->setDamping(damping);
}
EXPORT_API PxReal PxDistanceJoint_GetDamping(PxDistanceJoint* self) {
    return self->getDamping();
}
EXPORT_API void PxDistanceJoint_SetDistanceJointFlags(PxDistanceJoint* self, PxDistanceJointFlag::Enum flags) {
    self->setDistanceJointFlags((PxDistanceJointFlags) (PxU32) flags);
}
EXPORT_API void PxDistanceJoint_SetDistanceJointFlag(PxDistanceJoint* self, PxDistanceJointFlag::Enum flag, bool value) {
    self->setDistanceJointFlag(flag, value);
}
EXPORT_API PxDistanceJointFlag::Enum PxDistanceJoint_GetDistanceJointFlags(PxDistanceJoint* self) {
    return (PxDistanceJointFlag::Enum) (PxU32) self->getDistanceJointFlags();
}
EXPORT_API const char* PxDistanceJoint_GetConcreteTypeName(PxDistanceJoint* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxJoint* CAST_PxDistanceJoint_TO_PxJoint(PxDistanceJoint* p) { return static_cast<PxJoint*>(p); }
EXPORT_API PxDistanceJoint* CAST_PxJoint_TO_PxDistanceJoint(PxJoint* p) { return static_cast<PxDistanceJoint*>(p); }

// PxFixedJoint
EXPORT_API void* PxFixedJoint_UserData_Get(PxFixedJoint* self) { return self->userData; }
EXPORT_API void PxFixedJoint_UserData_Set(PxFixedJoint* self, void* value) { self->userData = value; }
EXPORT_API void PxFixedJoint_SetActors(PxFixedJoint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxFixedJoint_GetActors(PxFixedJoint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxFixedJoint_SetLocalPose(PxFixedJoint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxFixedJoint_GetLocalPose(PxFixedJoint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxFixedJoint_GetRelativeTransform(PxFixedJoint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxFixedJoint_GetRelativeLinearVelocity(PxFixedJoint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxFixedJoint_GetRelativeAngularVelocity(PxFixedJoint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxFixedJoint_SetBreakForce(PxFixedJoint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxFixedJoint_GetBreakForce(PxFixedJoint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxFixedJoint_SetConstraintFlags(PxFixedJoint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxFixedJoint_SetConstraintFlag(PxFixedJoint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxFixedJoint_GetConstraintFlags(PxFixedJoint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxFixedJoint_SetInvMassScale0(PxFixedJoint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxFixedJoint_GetInvMassScale0(PxFixedJoint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxFixedJoint_SetInvInertiaScale0(PxFixedJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxFixedJoint_GetInvInertiaScale0(PxFixedJoint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxFixedJoint_SetInvMassScale1(PxFixedJoint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxFixedJoint_GetInvMassScale1(PxFixedJoint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxFixedJoint_SetInvInertiaScale1(PxFixedJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxFixedJoint_GetInvInertiaScale1(PxFixedJoint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxFixedJoint_GetConstraint(PxFixedJoint* self) {
    return self->getConstraint();
}
EXPORT_API void PxFixedJoint_SetName(PxFixedJoint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxFixedJoint_GetName(PxFixedJoint* self) {
    return self->getName();
}
EXPORT_API void PxFixedJoint_Release(PxFixedJoint* self) {
    self->release();
}
EXPORT_API PxScene* PxFixedJoint_GetScene(PxFixedJoint* self) {
    return self->getScene();
}
EXPORT_API void PxFixedJoint_SetProjectionLinearTolerance(PxFixedJoint* self, PxReal tolerance) {
    self->setProjectionLinearTolerance(tolerance);
}
EXPORT_API PxReal PxFixedJoint_GetProjectionLinearTolerance(PxFixedJoint* self) {
    return self->getProjectionLinearTolerance();
}
EXPORT_API void PxFixedJoint_SetProjectionAngularTolerance(PxFixedJoint* self, PxReal tolerance) {
    self->setProjectionAngularTolerance(tolerance);
}
EXPORT_API PxReal PxFixedJoint_GetProjectionAngularTolerance(PxFixedJoint* self) {
    return self->getProjectionAngularTolerance();
}
EXPORT_API const char* PxFixedJoint_GetConcreteTypeName(PxFixedJoint* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxJoint* CAST_PxFixedJoint_TO_PxJoint(PxFixedJoint* p) { return static_cast<PxJoint*>(p); }
EXPORT_API PxFixedJoint* CAST_PxJoint_TO_PxFixedJoint(PxJoint* p) { return static_cast<PxFixedJoint*>(p); }

// PxJoint
EXPORT_API void* PxJoint_UserData_Get(PxJoint* self) { return self->userData; }
EXPORT_API void PxJoint_UserData_Set(PxJoint* self, void* value) { self->userData = value; }
EXPORT_API void PxJoint_SetActors(PxJoint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxJoint_GetActors(PxJoint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxJoint_SetLocalPose(PxJoint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxJoint_GetLocalPose(PxJoint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxJoint_GetRelativeTransform(PxJoint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxJoint_GetRelativeLinearVelocity(PxJoint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxJoint_GetRelativeAngularVelocity(PxJoint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxJoint_SetBreakForce(PxJoint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxJoint_GetBreakForce(PxJoint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxJoint_SetConstraintFlags(PxJoint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxJoint_SetConstraintFlag(PxJoint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxJoint_GetConstraintFlags(PxJoint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxJoint_SetInvMassScale0(PxJoint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxJoint_GetInvMassScale0(PxJoint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxJoint_SetInvInertiaScale0(PxJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxJoint_GetInvInertiaScale0(PxJoint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxJoint_SetInvMassScale1(PxJoint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxJoint_GetInvMassScale1(PxJoint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxJoint_SetInvInertiaScale1(PxJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxJoint_GetInvInertiaScale1(PxJoint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxJoint_GetConstraint(PxJoint* self) {
    return self->getConstraint();
}
EXPORT_API void PxJoint_SetName(PxJoint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxJoint_GetName(PxJoint* self) {
    return self->getName();
}
EXPORT_API void PxJoint_Release(PxJoint* self) {
    self->release();
}
EXPORT_API PxScene* PxJoint_GetScene(PxJoint* self) {
    return self->getScene();
}

// PxPrismaticJoint
EXPORT_API void* PxPrismaticJoint_UserData_Get(PxPrismaticJoint* self) { return self->userData; }
EXPORT_API void PxPrismaticJoint_UserData_Set(PxPrismaticJoint* self, void* value) { self->userData = value; }
EXPORT_API void PxPrismaticJoint_SetActors(PxPrismaticJoint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxPrismaticJoint_GetActors(PxPrismaticJoint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxPrismaticJoint_SetLocalPose(PxPrismaticJoint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxPrismaticJoint_GetLocalPose(PxPrismaticJoint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxPrismaticJoint_GetRelativeTransform(PxPrismaticJoint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxPrismaticJoint_GetRelativeLinearVelocity(PxPrismaticJoint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxPrismaticJoint_GetRelativeAngularVelocity(PxPrismaticJoint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxPrismaticJoint_SetBreakForce(PxPrismaticJoint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxPrismaticJoint_GetBreakForce(PxPrismaticJoint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxPrismaticJoint_SetConstraintFlags(PxPrismaticJoint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxPrismaticJoint_SetConstraintFlag(PxPrismaticJoint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxPrismaticJoint_GetConstraintFlags(PxPrismaticJoint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxPrismaticJoint_SetInvMassScale0(PxPrismaticJoint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxPrismaticJoint_GetInvMassScale0(PxPrismaticJoint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxPrismaticJoint_SetInvInertiaScale0(PxPrismaticJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxPrismaticJoint_GetInvInertiaScale0(PxPrismaticJoint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxPrismaticJoint_SetInvMassScale1(PxPrismaticJoint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxPrismaticJoint_GetInvMassScale1(PxPrismaticJoint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxPrismaticJoint_SetInvInertiaScale1(PxPrismaticJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxPrismaticJoint_GetInvInertiaScale1(PxPrismaticJoint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxPrismaticJoint_GetConstraint(PxPrismaticJoint* self) {
    return self->getConstraint();
}
EXPORT_API void PxPrismaticJoint_SetName(PxPrismaticJoint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxPrismaticJoint_GetName(PxPrismaticJoint* self) {
    return self->getName();
}
EXPORT_API void PxPrismaticJoint_Release(PxPrismaticJoint* self) {
    self->release();
}
EXPORT_API PxScene* PxPrismaticJoint_GetScene(PxPrismaticJoint* self) {
    return self->getScene();
}
EXPORT_API PxReal PxPrismaticJoint_GetPosition(PxPrismaticJoint* self) {
    return self->getPosition();
}
EXPORT_API PxReal PxPrismaticJoint_GetVelocity(PxPrismaticJoint* self) {
    return self->getVelocity();
}
EXPORT_API void PxPrismaticJoint_SetLimit(PxPrismaticJoint* self, PxJointLinearLimitPair_Managed arg0) {
    self->setLimit(PxJointLinearLimitPair_IN(arg0));
}
EXPORT_API PxJointLinearLimitPair_Managed PxPrismaticJoint_GetLimit(PxPrismaticJoint* self) {
    return PxJointLinearLimitPair_OUT(self->getLimit());
}
EXPORT_API void PxPrismaticJoint_SetPrismaticJointFlags(PxPrismaticJoint* self, PxPrismaticJointFlag::Enum flags) {
    self->setPrismaticJointFlags((PxPrismaticJointFlags) (PxU32) flags);
}
EXPORT_API void PxPrismaticJoint_SetPrismaticJointFlag(PxPrismaticJoint* self, PxPrismaticJointFlag::Enum flag, bool value) {
    self->setPrismaticJointFlag(flag, value);
}
EXPORT_API PxPrismaticJointFlag::Enum PxPrismaticJoint_GetPrismaticJointFlags(PxPrismaticJoint* self) {
    return (PxPrismaticJointFlag::Enum) (PxU32) self->getPrismaticJointFlags();
}
EXPORT_API void PxPrismaticJoint_SetProjectionLinearTolerance(PxPrismaticJoint* self, PxReal tolerance) {
    self->setProjectionLinearTolerance(tolerance);
}
EXPORT_API PxReal PxPrismaticJoint_GetProjectionLinearTolerance(PxPrismaticJoint* self) {
    return self->getProjectionLinearTolerance();
}
EXPORT_API void PxPrismaticJoint_SetProjectionAngularTolerance(PxPrismaticJoint* self, PxReal tolerance) {
    self->setProjectionAngularTolerance(tolerance);
}
EXPORT_API PxReal PxPrismaticJoint_GetProjectionAngularTolerance(PxPrismaticJoint* self) {
    return self->getProjectionAngularTolerance();
}
EXPORT_API const char* PxPrismaticJoint_GetConcreteTypeName(PxPrismaticJoint* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxJoint* CAST_PxPrismaticJoint_TO_PxJoint(PxPrismaticJoint* p) { return static_cast<PxJoint*>(p); }
EXPORT_API PxPrismaticJoint* CAST_PxJoint_TO_PxPrismaticJoint(PxJoint* p) { return static_cast<PxPrismaticJoint*>(p); }

// PxRevoluteJoint
EXPORT_API void* PxRevoluteJoint_UserData_Get(PxRevoluteJoint* self) { return self->userData; }
EXPORT_API void PxRevoluteJoint_UserData_Set(PxRevoluteJoint* self, void* value) { self->userData = value; }
EXPORT_API void PxRevoluteJoint_SetActors(PxRevoluteJoint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxRevoluteJoint_GetActors(PxRevoluteJoint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxRevoluteJoint_SetLocalPose(PxRevoluteJoint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxRevoluteJoint_GetLocalPose(PxRevoluteJoint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxRevoluteJoint_GetRelativeTransform(PxRevoluteJoint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxRevoluteJoint_GetRelativeLinearVelocity(PxRevoluteJoint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxRevoluteJoint_GetRelativeAngularVelocity(PxRevoluteJoint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxRevoluteJoint_SetBreakForce(PxRevoluteJoint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxRevoluteJoint_GetBreakForce(PxRevoluteJoint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxRevoluteJoint_SetConstraintFlags(PxRevoluteJoint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxRevoluteJoint_SetConstraintFlag(PxRevoluteJoint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxRevoluteJoint_GetConstraintFlags(PxRevoluteJoint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxRevoluteJoint_SetInvMassScale0(PxRevoluteJoint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxRevoluteJoint_GetInvMassScale0(PxRevoluteJoint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxRevoluteJoint_SetInvInertiaScale0(PxRevoluteJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxRevoluteJoint_GetInvInertiaScale0(PxRevoluteJoint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxRevoluteJoint_SetInvMassScale1(PxRevoluteJoint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxRevoluteJoint_GetInvMassScale1(PxRevoluteJoint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxRevoluteJoint_SetInvInertiaScale1(PxRevoluteJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxRevoluteJoint_GetInvInertiaScale1(PxRevoluteJoint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxRevoluteJoint_GetConstraint(PxRevoluteJoint* self) {
    return self->getConstraint();
}
EXPORT_API void PxRevoluteJoint_SetName(PxRevoluteJoint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxRevoluteJoint_GetName(PxRevoluteJoint* self) {
    return self->getName();
}
EXPORT_API void PxRevoluteJoint_Release(PxRevoluteJoint* self) {
    self->release();
}
EXPORT_API PxScene* PxRevoluteJoint_GetScene(PxRevoluteJoint* self) {
    return self->getScene();
}
EXPORT_API PxReal PxRevoluteJoint_GetAngle(PxRevoluteJoint* self) {
    return self->getAngle();
}
EXPORT_API PxReal PxRevoluteJoint_GetVelocity(PxRevoluteJoint* self) {
    return self->getVelocity();
}
EXPORT_API void PxRevoluteJoint_SetLimit(PxRevoluteJoint* self, PxJointAngularLimitPair_Managed limits) {
    self->setLimit(PxJointAngularLimitPair_IN(limits));
}
EXPORT_API PxJointAngularLimitPair_Managed PxRevoluteJoint_GetLimit(PxRevoluteJoint* self) {
    return PxJointAngularLimitPair_OUT(self->getLimit());
}
EXPORT_API void PxRevoluteJoint_SetDriveVelocity(PxRevoluteJoint* self, PxReal velocity) {
    self->setDriveVelocity(velocity);
}
EXPORT_API PxReal PxRevoluteJoint_GetDriveVelocity(PxRevoluteJoint* self) {
    return self->getDriveVelocity();
}
EXPORT_API void PxRevoluteJoint_SetDriveForceLimit(PxRevoluteJoint* self, PxReal limit) {
    self->setDriveForceLimit(limit);
}
EXPORT_API PxReal PxRevoluteJoint_GetDriveForceLimit(PxRevoluteJoint* self) {
    return self->getDriveForceLimit();
}
EXPORT_API void PxRevoluteJoint_SetDriveGearRatio(PxRevoluteJoint* self, PxReal ratio) {
    self->setDriveGearRatio(ratio);
}
EXPORT_API PxReal PxRevoluteJoint_GetDriveGearRatio(PxRevoluteJoint* self) {
    return self->getDriveGearRatio();
}
EXPORT_API void PxRevoluteJoint_SetRevoluteJointFlags(PxRevoluteJoint* self, PxRevoluteJointFlag::Enum flags) {
    self->setRevoluteJointFlags((PxRevoluteJointFlags) (PxU32) flags);
}
EXPORT_API void PxRevoluteJoint_SetRevoluteJointFlag(PxRevoluteJoint* self, PxRevoluteJointFlag::Enum flag, bool value) {
    self->setRevoluteJointFlag(flag, value);
}
EXPORT_API PxRevoluteJointFlag::Enum PxRevoluteJoint_GetRevoluteJointFlags(PxRevoluteJoint* self) {
    return (PxRevoluteJointFlag::Enum) (PxU32) self->getRevoluteJointFlags();
}
EXPORT_API void PxRevoluteJoint_SetProjectionLinearTolerance(PxRevoluteJoint* self, PxReal tolerance) {
    self->setProjectionLinearTolerance(tolerance);
}
EXPORT_API PxReal PxRevoluteJoint_GetProjectionLinearTolerance(PxRevoluteJoint* self) {
    return self->getProjectionLinearTolerance();
}
EXPORT_API void PxRevoluteJoint_SetProjectionAngularTolerance(PxRevoluteJoint* self, PxReal tolerance) {
    self->setProjectionAngularTolerance(tolerance);
}
EXPORT_API PxReal PxRevoluteJoint_GetProjectionAngularTolerance(PxRevoluteJoint* self) {
    return self->getProjectionAngularTolerance();
}
EXPORT_API const char* PxRevoluteJoint_GetConcreteTypeName(PxRevoluteJoint* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxJoint* CAST_PxRevoluteJoint_TO_PxJoint(PxRevoluteJoint* p) { return static_cast<PxJoint*>(p); }
EXPORT_API PxRevoluteJoint* CAST_PxJoint_TO_PxRevoluteJoint(PxJoint* p) { return static_cast<PxRevoluteJoint*>(p); }

// PxSphericalJoint
EXPORT_API void* PxSphericalJoint_UserData_Get(PxSphericalJoint* self) { return self->userData; }
EXPORT_API void PxSphericalJoint_UserData_Set(PxSphericalJoint* self, void* value) { self->userData = value; }
EXPORT_API void PxSphericalJoint_SetActors(PxSphericalJoint* self, PxRigidActor* actor0, PxRigidActor* actor1) {
    self->setActors(actor0, actor1);
}
EXPORT_API void PxSphericalJoint_GetActors(PxSphericalJoint* self, PxRigidActor** actor0, PxRigidActor** actor1) {
    self->getActors(*(actor0), *(actor1));
}
EXPORT_API void PxSphericalJoint_SetLocalPose(PxSphericalJoint* self, PxJointActorIndex::Enum actor, PxTransform_Managed localPose) {
    self->setLocalPose(actor, PxTransform_IN(localPose));
}
EXPORT_API PxTransform_Managed PxSphericalJoint_GetLocalPose(PxSphericalJoint* self, PxJointActorIndex::Enum actor) {
    return PxTransform_OUT(self->getLocalPose(actor));
}
EXPORT_API PxTransform_Managed PxSphericalJoint_GetRelativeTransform(PxSphericalJoint* self) {
    return PxTransform_OUT(self->getRelativeTransform());
}
EXPORT_API PxVec3_Managed PxSphericalJoint_GetRelativeLinearVelocity(PxSphericalJoint* self) {
    return PxVec3_OUT(self->getRelativeLinearVelocity());
}
EXPORT_API PxVec3_Managed PxSphericalJoint_GetRelativeAngularVelocity(PxSphericalJoint* self) {
    return PxVec3_OUT(self->getRelativeAngularVelocity());
}
EXPORT_API void PxSphericalJoint_SetBreakForce(PxSphericalJoint* self, PxReal force, PxReal torque) {
    self->setBreakForce(force, torque);
}
EXPORT_API void PxSphericalJoint_GetBreakForce(PxSphericalJoint* self, PxReal* force, PxReal* torque) {
    self->getBreakForce(*force, *torque);
}
EXPORT_API void PxSphericalJoint_SetConstraintFlags(PxSphericalJoint* self, PxConstraintFlag::Enum flags) {
    self->setConstraintFlags((PxConstraintFlags) (PxU32) flags);
}
EXPORT_API void PxSphericalJoint_SetConstraintFlag(PxSphericalJoint* self, PxConstraintFlag::Enum flag, bool value) {
    self->setConstraintFlag(flag, value);
}
EXPORT_API PxConstraintFlag::Enum PxSphericalJoint_GetConstraintFlags(PxSphericalJoint* self) {
    return (PxConstraintFlag::Enum) (PxU32) self->getConstraintFlags();
}
EXPORT_API void PxSphericalJoint_SetInvMassScale0(PxSphericalJoint* self, PxReal invMassScale) {
    self->setInvMassScale0(invMassScale);
}
EXPORT_API PxReal PxSphericalJoint_GetInvMassScale0(PxSphericalJoint* self) {
    return self->getInvMassScale0();
}
EXPORT_API void PxSphericalJoint_SetInvInertiaScale0(PxSphericalJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale0(invInertiaScale);
}
EXPORT_API PxReal PxSphericalJoint_GetInvInertiaScale0(PxSphericalJoint* self) {
    return self->getInvInertiaScale0();
}
EXPORT_API void PxSphericalJoint_SetInvMassScale1(PxSphericalJoint* self, PxReal invMassScale) {
    self->setInvMassScale1(invMassScale);
}
EXPORT_API PxReal PxSphericalJoint_GetInvMassScale1(PxSphericalJoint* self) {
    return self->getInvMassScale1();
}
EXPORT_API void PxSphericalJoint_SetInvInertiaScale1(PxSphericalJoint* self, PxReal invInertiaScale) {
    self->setInvInertiaScale1(invInertiaScale);
}
EXPORT_API PxReal PxSphericalJoint_GetInvInertiaScale1(PxSphericalJoint* self) {
    return self->getInvInertiaScale1();
}
EXPORT_API PxConstraint* PxSphericalJoint_GetConstraint(PxSphericalJoint* self) {
    return self->getConstraint();
}
EXPORT_API void PxSphericalJoint_SetName(PxSphericalJoint* self, const char* name) {
    self->setName(name);
}
EXPORT_API const char* PxSphericalJoint_GetName(PxSphericalJoint* self) {
    return self->getName();
}
EXPORT_API void PxSphericalJoint_Release(PxSphericalJoint* self) {
    self->release();
}
EXPORT_API PxScene* PxSphericalJoint_GetScene(PxSphericalJoint* self) {
    return self->getScene();
}
EXPORT_API PxJointLimitCone_Managed PxSphericalJoint_GetLimitCone(PxSphericalJoint* self) {
    return PxJointLimitCone_OUT(self->getLimitCone());
}
EXPORT_API void PxSphericalJoint_SetLimitCone(PxSphericalJoint* self, PxJointLimitCone_Managed limit) {
    self->setLimitCone(PxJointLimitCone_IN(limit));
}
EXPORT_API void PxSphericalJoint_SetSphericalJointFlags(PxSphericalJoint* self, PxSphericalJointFlag::Enum flags) {
    self->setSphericalJointFlags((PxSphericalJointFlags) (PxU32) flags);
}
EXPORT_API void PxSphericalJoint_SetSphericalJointFlag(PxSphericalJoint* self, PxSphericalJointFlag::Enum flag, bool value) {
    self->setSphericalJointFlag(flag, value);
}
EXPORT_API PxSphericalJointFlag::Enum PxSphericalJoint_GetSphericalJointFlags(PxSphericalJoint* self) {
    return (PxSphericalJointFlag::Enum) (PxU32) self->getSphericalJointFlags();
}
EXPORT_API void PxSphericalJoint_SetProjectionLinearTolerance(PxSphericalJoint* self, PxReal tolerance) {
    self->setProjectionLinearTolerance(tolerance);
}
EXPORT_API PxReal PxSphericalJoint_GetProjectionLinearTolerance(PxSphericalJoint* self) {
    return self->getProjectionLinearTolerance();
}
EXPORT_API const char* PxSphericalJoint_GetConcreteTypeName(PxSphericalJoint* self) {
    return self->getConcreteTypeName();
}
EXPORT_API PxJoint* CAST_PxSphericalJoint_TO_PxJoint(PxSphericalJoint* p) { return static_cast<PxJoint*>(p); }
EXPORT_API PxSphericalJoint* CAST_PxJoint_TO_PxSphericalJoint(PxJoint* p) { return static_cast<PxSphericalJoint*>(p); }

// PxFoundation
EXPORT_API void PxFoundation_Release(PxFoundation* self) {
    self->release();
}
EXPORT_API PxErrorCallback* PxFoundation_GetErrorCallback(PxFoundation* self) {
    return &(self->getErrorCallback());
}
EXPORT_API void PxFoundation_SetErrorLevel(PxFoundation* self, PxErrorCode::Enum mask) {
    self->setErrorLevel(mask);
}
EXPORT_API PxErrorCode::Enum PxFoundation_GetErrorLevel(PxFoundation* self) {
    return self->getErrorLevel();
}
EXPORT_API bool PxFoundation_GetReportAllocationNames(PxFoundation* self) {
    return self->getReportAllocationNames();
}
EXPORT_API void PxFoundation_SetReportAllocationNames(PxFoundation* self, bool value) {
    self->setReportAllocationNames(value);
}

// PxPlane
EXPORT_API PxVec3_Managed PxPlane_N_Get(PxPlane* self) { return PxVec3_OUT(self->n); }
EXPORT_API void PxPlane_N_Set(PxPlane* self, PxVec3_Managed value) { self->n = PxVec3_IN(value); }
EXPORT_API PxReal PxPlane_D_Get(PxPlane* self) { return self->d; }
EXPORT_API void PxPlane_D_Set(PxPlane* self, PxReal value) { self->d = value; }
EXPORT_API PxReal PxPlane_Distance(PxPlane* self, PxVec3_Managed p) {
    return self->distance(PxVec3_IN(p));
}
EXPORT_API bool PxPlane_Contains(PxPlane* self, PxVec3_Managed p) {
    return self->contains(PxVec3_IN(p));
}
EXPORT_API PxVec3_Managed PxPlane_Project(PxPlane* self, PxVec3_Managed p) {
    return PxVec3_OUT(self->project(PxVec3_IN(p)));
}
EXPORT_API PxVec3_Managed PxPlane_PointInPlane(PxPlane* self) {
    return PxVec3_OUT(self->pointInPlane());
}
EXPORT_API void PxPlane_Normalize(PxPlane* self) {
    self->normalize();
}

// PxBoxGeometry
EXPORT_API PxVec3_Managed PxBoxGeometry_HalfExtents_Get(PxBoxGeometry* self) { return PxVec3_OUT(self->halfExtents); }
EXPORT_API void PxBoxGeometry_HalfExtents_Set(PxBoxGeometry* self, PxVec3_Managed value) { self->halfExtents = PxVec3_IN(value); }
EXPORT_API PxGeometryType::Enum PxBoxGeometry_GetType(PxBoxGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxBoxGeometry_IsValid(PxBoxGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxBoxGeometry_TO_PxGeometry(PxBoxGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxBoxGeometry* CAST_PxGeometry_TO_PxBoxGeometry(PxGeometry* p) { return static_cast<PxBoxGeometry*>(p); }

// PxCapsuleGeometry
EXPORT_API PxReal PxCapsuleGeometry_Radius_Get(PxCapsuleGeometry* self) { return self->radius; }
EXPORT_API void PxCapsuleGeometry_Radius_Set(PxCapsuleGeometry* self, PxReal value) { self->radius = value; }
EXPORT_API PxReal PxCapsuleGeometry_HalfHeight_Get(PxCapsuleGeometry* self) { return self->halfHeight; }
EXPORT_API void PxCapsuleGeometry_HalfHeight_Set(PxCapsuleGeometry* self, PxReal value) { self->halfHeight = value; }
EXPORT_API PxGeometryType::Enum PxCapsuleGeometry_GetType(PxCapsuleGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxCapsuleGeometry_IsValid(PxCapsuleGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxCapsuleGeometry_TO_PxGeometry(PxCapsuleGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxCapsuleGeometry* CAST_PxGeometry_TO_PxCapsuleGeometry(PxGeometry* p) { return static_cast<PxCapsuleGeometry*>(p); }

// PxConvexMesh
EXPORT_API PxU32 PxConvexMesh_GetNbVertices(PxConvexMesh* self) {
    return self->getNbVertices();
}
EXPORT_API PxU32 PxConvexMesh_GetNbPolygons(PxConvexMesh* self) {
    return self->getNbPolygons();
}
EXPORT_API bool PxConvexMesh_GetPolygonData(PxConvexMesh* self, PxU32 index, PxHullPolygon* data) {
    return self->getPolygonData(index, *data);
}
EXPORT_API void PxConvexMesh_Release(PxConvexMesh* self) {
    self->release();
}
EXPORT_API PxU32 PxConvexMesh_GetReferenceCount(PxConvexMesh* self) {
    return self->getReferenceCount();
}
EXPORT_API void PxConvexMesh_GetMassInformation(PxConvexMesh* self, PxReal* mass, PxMat33_Managed* localInertia, PxVec3_Managed* localCenterOfMass) {
    PxMat33 localInertia_tmp;
    PxVec3 localCenterOfMass_tmp;
    self->getMassInformation(*mass, localInertia_tmp, localCenterOfMass_tmp);
    *localInertia = PxMat33_OUT(localInertia_tmp);
    *localCenterOfMass = PxVec3_OUT(localCenterOfMass_tmp);
}
EXPORT_API PxBounds3_Managed PxConvexMesh_GetLocalBounds(PxConvexMesh* self) {
    return PxBounds3_OUT(self->getLocalBounds());
}
EXPORT_API const char* PxConvexMesh_GetConcreteTypeName(PxConvexMesh* self) {
    return self->getConcreteTypeName();
}

// PxConvexMeshGeometry
EXPORT_API PxMeshScale_Managed PxConvexMeshGeometry_Scale_Get(PxConvexMeshGeometry* self) { return PxMeshScale_OUT(self->scale); }
EXPORT_API void PxConvexMeshGeometry_Scale_Set(PxConvexMeshGeometry* self, PxMeshScale_Managed value) { self->scale = PxMeshScale_IN(value); }
EXPORT_API PxConvexMesh* PxConvexMeshGeometry_ConvexMesh_Get(PxConvexMeshGeometry* self) { return self->convexMesh; }
EXPORT_API void PxConvexMeshGeometry_ConvexMesh_Set(PxConvexMeshGeometry* self, PxConvexMesh* value) { self->convexMesh = value; }
EXPORT_API PxGeometryType::Enum PxConvexMeshGeometry_GetType(PxConvexMeshGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxConvexMeshGeometry_IsValid(PxConvexMeshGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxConvexMeshGeometry_TO_PxGeometry(PxConvexMeshGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxConvexMeshGeometry* CAST_PxGeometry_TO_PxConvexMeshGeometry(PxGeometry* p) { return static_cast<PxConvexMeshGeometry*>(p); }

// PxGeometry
EXPORT_API PxGeometryType::Enum PxGeometry_GetType(PxGeometry* self) {
    return self->getType();
}

// PxHeightField
EXPORT_API void PxHeightField_Release(PxHeightField* self) {
    self->release();
}
EXPORT_API PxU32 PxHeightField_SaveCells(PxHeightField* self, void* destBuffer, PxU32 destBufferSize) {
    return self->saveCells(destBuffer, destBufferSize);
}
EXPORT_API bool PxHeightField_ModifySamples(PxHeightField* self, PxI32 startCol, PxI32 startRow, const PxHeightFieldDesc* subfieldDesc, bool shrinkBounds) {
    return self->modifySamples(startCol, startRow, *(subfieldDesc), shrinkBounds);
}
EXPORT_API PxU32 PxHeightField_GetNbRows(PxHeightField* self) {
    return self->getNbRows();
}
EXPORT_API PxU32 PxHeightField_GetNbColumns(PxHeightField* self) {
    return self->getNbColumns();
}
EXPORT_API PxHeightFieldFormat::Enum PxHeightField_GetFormat(PxHeightField* self) {
    return self->getFormat();
}
EXPORT_API PxU32 PxHeightField_GetSampleStride(PxHeightField* self) {
    return self->getSampleStride();
}
EXPORT_API PxReal PxHeightField_GetThickness(PxHeightField* self) {
    return self->getThickness();
}
EXPORT_API PxReal PxHeightField_GetConvexEdgeThreshold(PxHeightField* self) {
    return self->getConvexEdgeThreshold();
}
EXPORT_API PxHeightFieldFlag::Enum PxHeightField_GetFlags(PxHeightField* self) {
    return (PxHeightFieldFlag::Enum) (PxU32) self->getFlags();
}
EXPORT_API PxReal PxHeightField_GetHeight(PxHeightField* self, PxReal x, PxReal z) {
    return self->getHeight(x, z);
}
EXPORT_API PxU32 PxHeightField_GetReferenceCount(PxHeightField* self) {
    return self->getReferenceCount();
}
EXPORT_API PxMaterialTableIndex PxHeightField_GetTriangleMaterialIndex(PxHeightField* self, PxTriangleID triangleIndex) {
    return self->getTriangleMaterialIndex(triangleIndex);
}
EXPORT_API PxVec3_Managed PxHeightField_GetTriangleNormal(PxHeightField* self, PxTriangleID triangleIndex) {
    return PxVec3_OUT(self->getTriangleNormal(triangleIndex));
}
EXPORT_API const char* PxHeightField_GetConcreteTypeName(PxHeightField* self) {
    return self->getConcreteTypeName();
}

// PxHeightFieldDesc
EXPORT_API PxU32 PxHeightFieldDesc_NbRows_Get(PxHeightFieldDesc* self) { return self->nbRows; }
EXPORT_API void PxHeightFieldDesc_NbRows_Set(PxHeightFieldDesc* self, PxU32 value) { self->nbRows = value; }
EXPORT_API PxU32 PxHeightFieldDesc_NbColumns_Get(PxHeightFieldDesc* self) { return self->nbColumns; }
EXPORT_API void PxHeightFieldDesc_NbColumns_Set(PxHeightFieldDesc* self, PxU32 value) { self->nbColumns = value; }
EXPORT_API PxHeightFieldFormat::Enum PxHeightFieldDesc_Format_Get(PxHeightFieldDesc* self) { return self->format; }
EXPORT_API void PxHeightFieldDesc_Format_Set(PxHeightFieldDesc* self, PxHeightFieldFormat::Enum value) { self->format = value; }
EXPORT_API PxStridedData_Managed PxHeightFieldDesc_Samples_Get(PxHeightFieldDesc* self) { return PxStridedData_OUT(self->samples); }
EXPORT_API void PxHeightFieldDesc_Samples_Set(PxHeightFieldDesc* self, PxStridedData_Managed value) { self->samples = PxStridedData_IN(value); }
EXPORT_API PxReal PxHeightFieldDesc_Thickness_Get(PxHeightFieldDesc* self) { return self->thickness; }
EXPORT_API void PxHeightFieldDesc_Thickness_Set(PxHeightFieldDesc* self, PxReal value) { self->thickness = value; }
EXPORT_API PxReal PxHeightFieldDesc_ConvexEdgeThreshold_Get(PxHeightFieldDesc* self) { return self->convexEdgeThreshold; }
EXPORT_API void PxHeightFieldDesc_ConvexEdgeThreshold_Set(PxHeightFieldDesc* self, PxReal value) { self->convexEdgeThreshold = value; }
EXPORT_API PxHeightFieldFlag::Enum PxHeightFieldDesc_Flags_Get(PxHeightFieldDesc* self) { return (PxHeightFieldFlag::Enum) (PxU32) self->flags; }
EXPORT_API void PxHeightFieldDesc_Flags_Set(PxHeightFieldDesc* self, PxHeightFieldFlag::Enum value) { self->flags = (PxHeightFieldFlags) (PxU32) value; }
EXPORT_API void PxHeightFieldDesc_SetToDefault(PxHeightFieldDesc* self) {
    self->setToDefault();
}
EXPORT_API bool PxHeightFieldDesc_IsValid(PxHeightFieldDesc* self) {
    return self->isValid();
}

// PxHeightFieldGeometry
EXPORT_API PxHeightField* PxHeightFieldGeometry_HeightField_Get(PxHeightFieldGeometry* self) { return self->heightField; }
EXPORT_API void PxHeightFieldGeometry_HeightField_Set(PxHeightFieldGeometry* self, PxHeightField* value) { self->heightField = value; }
EXPORT_API PxReal PxHeightFieldGeometry_HeightScale_Get(PxHeightFieldGeometry* self) { return self->heightScale; }
EXPORT_API void PxHeightFieldGeometry_HeightScale_Set(PxHeightFieldGeometry* self, PxReal value) { self->heightScale = value; }
EXPORT_API PxReal PxHeightFieldGeometry_RowScale_Get(PxHeightFieldGeometry* self) { return self->rowScale; }
EXPORT_API void PxHeightFieldGeometry_RowScale_Set(PxHeightFieldGeometry* self, PxReal value) { self->rowScale = value; }
EXPORT_API PxReal PxHeightFieldGeometry_ColumnScale_Get(PxHeightFieldGeometry* self) { return self->columnScale; }
EXPORT_API void PxHeightFieldGeometry_ColumnScale_Set(PxHeightFieldGeometry* self, PxReal value) { self->columnScale = value; }
EXPORT_API PxMeshGeometryFlag::Enum PxHeightFieldGeometry_HeightFieldFlags_Get(PxHeightFieldGeometry* self) { return (PxMeshGeometryFlag::Enum) (PxU32) self->heightFieldFlags; }
EXPORT_API void PxHeightFieldGeometry_HeightFieldFlags_Set(PxHeightFieldGeometry* self, PxMeshGeometryFlag::Enum value) { self->heightFieldFlags = (PxMeshGeometryFlags) (PxU32) value; }
EXPORT_API PxGeometryType::Enum PxHeightFieldGeometry_GetType(PxHeightFieldGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxHeightFieldGeometry_IsValid(PxHeightFieldGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxHeightFieldGeometry_TO_PxGeometry(PxHeightFieldGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxHeightFieldGeometry* CAST_PxGeometry_TO_PxHeightFieldGeometry(PxGeometry* p) { return static_cast<PxHeightFieldGeometry*>(p); }

// PxPlaneGeometry
EXPORT_API PxGeometryType::Enum PxPlaneGeometry_GetType(PxPlaneGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxPlaneGeometry_IsValid(PxPlaneGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxPlaneGeometry_TO_PxGeometry(PxPlaneGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxPlaneGeometry* CAST_PxGeometry_TO_PxPlaneGeometry(PxGeometry* p) { return static_cast<PxPlaneGeometry*>(p); }

// PxSphereGeometry
EXPORT_API PxReal PxSphereGeometry_Radius_Get(PxSphereGeometry* self) { return self->radius; }
EXPORT_API void PxSphereGeometry_Radius_Set(PxSphereGeometry* self, PxReal value) { self->radius = value; }
EXPORT_API PxGeometryType::Enum PxSphereGeometry_GetType(PxSphereGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxSphereGeometry_IsValid(PxSphereGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxSphereGeometry_TO_PxGeometry(PxSphereGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxSphereGeometry* CAST_PxGeometry_TO_PxSphereGeometry(PxGeometry* p) { return static_cast<PxSphereGeometry*>(p); }

// PxTriangleMesh
EXPORT_API PxU32 PxTriangleMesh_GetNbVertices(PxTriangleMesh* self) {
    return self->getNbVertices();
}
EXPORT_API PxU32 PxTriangleMesh_GetNbTriangles(PxTriangleMesh* self) {
    return self->getNbTriangles();
}
EXPORT_API const void* PxTriangleMesh_GetTriangles(PxTriangleMesh* self) {
    return self->getTriangles();
}
EXPORT_API PxTriangleMeshFlag::Enum PxTriangleMesh_GetTriangleMeshFlags(PxTriangleMesh* self) {
    return (PxTriangleMeshFlag::Enum) (PxU32) self->getTriangleMeshFlags();
}
EXPORT_API void PxTriangleMesh_Release(PxTriangleMesh* self) {
    self->release();
}
EXPORT_API PxMaterialTableIndex PxTriangleMesh_GetTriangleMaterialIndex(PxTriangleMesh* self, PxTriangleID triangleIndex) {
    return self->getTriangleMaterialIndex(triangleIndex);
}
EXPORT_API PxBounds3_Managed PxTriangleMesh_GetLocalBounds(PxTriangleMesh* self) {
    return PxBounds3_OUT(self->getLocalBounds());
}
EXPORT_API PxU32 PxTriangleMesh_GetReferenceCount(PxTriangleMesh* self) {
    return self->getReferenceCount();
}
EXPORT_API const char* PxTriangleMesh_GetConcreteTypeName(PxTriangleMesh* self) {
    return self->getConcreteTypeName();
}

// PxTriangleMeshGeometry
EXPORT_API PxMeshScale_Managed PxTriangleMeshGeometry_Scale_Get(PxTriangleMeshGeometry* self) { return PxMeshScale_OUT(self->scale); }
EXPORT_API void PxTriangleMeshGeometry_Scale_Set(PxTriangleMeshGeometry* self, PxMeshScale_Managed value) { self->scale = PxMeshScale_IN(value); }
EXPORT_API PxMeshGeometryFlag::Enum PxTriangleMeshGeometry_MeshFlags_Get(PxTriangleMeshGeometry* self) { return (PxMeshGeometryFlag::Enum) (PxU32) self->meshFlags; }
EXPORT_API void PxTriangleMeshGeometry_MeshFlags_Set(PxTriangleMeshGeometry* self, PxMeshGeometryFlag::Enum value) { self->meshFlags = (PxMeshGeometryFlags) (PxU32) value; }
EXPORT_API PxTriangleMesh* PxTriangleMeshGeometry_TriangleMesh_Get(PxTriangleMeshGeometry* self) { return self->triangleMesh; }
EXPORT_API void PxTriangleMeshGeometry_TriangleMesh_Set(PxTriangleMeshGeometry* self, PxTriangleMesh* value) { self->triangleMesh = value; }
EXPORT_API PxGeometryType::Enum PxTriangleMeshGeometry_GetType(PxTriangleMeshGeometry* self) {
    return self->getType();
}
EXPORT_API bool PxTriangleMeshGeometry_IsValid(PxTriangleMeshGeometry* self) {
    return self->isValid();
}
EXPORT_API PxGeometry* CAST_PxTriangleMeshGeometry_TO_PxGeometry(PxTriangleMeshGeometry* p) { return static_cast<PxGeometry*>(p); }
EXPORT_API PxTriangleMeshGeometry* CAST_PxGeometry_TO_PxTriangleMeshGeometry(PxGeometry* p) { return static_cast<PxTriangleMeshGeometry*>(p); }

// PxRaycastBuffer

// PxVisualDebuggerConnection
